{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverseArray(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void movePoint(Point* pt, int dx, int dy) { pt->x += dx; pt->y += dy; }", "target_code": "struct Point { int x; int y; }; void movePoint(Point &pt, int dx, int dy) { pt.x += dx; pt.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "int* createArray(int size) { return new int[size]; } void deleteArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int elem : arr) { std::cout << elem << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void printPersonInfo(Person* person) { printf(\"Name: %s, Age: %d\\n\", person->name, person->age); }", "target_code": "struct Person { std::string name; int age; }; void printPersonInfo(const Person &person) { std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char title[100]; int year; } Book; void printBookInfo(Book* book) { printf(\"Title: %s, Year: %d\\n\", book->title, book->year); }", "target_code": "struct Book { std::string title; int year; }; void printBookInfo(const Book &book) { std::cout << \"Title: \" << book.title << \", Year: \" << book.year << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArrayValues(int* arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void doubleArrayValues(std::vector<int> &arr) { for (int &elem : arr) { elem *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; float price; } Product; void updateProductPrice(Product* product, float newPrice) { product->price = newPrice; }", "target_code": "struct Product { int id; float price; }; void updateProductPrice(Product &product, float newPrice) { product.price = newPrice; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverseArray(std::vector<int>& arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "int* createArray(int size) { return new int[size]; } void deleteArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiplyMatrix(int** mat1, int** mat2, int** result, int rows1, int cols1, int cols2) { for(int i=0; i<rows1; i++) { for(int j=0; j<cols2; j++) { result[i][j] = 0; for(int k=0; k<cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }", "target_code": "void multiplyMatrix(const std::vector<std::vector<int>>& mat1, const std::vector<std::vector<int>>& mat2, std::vector<std::vector<int>>& result) { int rows1 = mat1.size(), cols1 = mat1[0].size(), cols2 = mat2[0].size(); for(int i=0; i<rows1; i++) { for(int j=0; j<cols2; j++) { result[i][j] = 0; for(int k=0; k<cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void resizeArray(int** arr, int oldSize, int newSize) { int* newArr = (int*)malloc(newSize * sizeof(int)); memcpy(newArr, *arr, oldSize * sizeof(int)); free(*arr); *arr = newArr; }", "target_code": "void resizeArray(std::vector<int>& arr, int newSize) { arr.resize(newSize); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int getArea(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* newArr = (int*)malloc(size * sizeof(int)); memcpy(newArr, arr, size * sizeof(int)); return newArr; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << \" \"; } std::cout << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int size;\n    int* data;\n} Array;\n\nArray createArray(int size) {\n    Array arr;\n    arr.size = size;\n    arr.data = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(Array* arr) {\n    free(arr->data);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    int size;\n    std::vector<int> data;\n};\n\nArray createArray(int size) {\n    return {size, std::vector<int>(size)};\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* cloneArray(int* arr, int size) {\n    int* clone = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        clone[i] = arr[i];\n    }\n    return clone;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cloneArray(const std::vector<int>& arr) {\n    return arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(const Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point* p) {\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int>& arr) {\n    int size = arr.size();\n    for (int i = 0; i < size / 2; i++) {\n        std::swap(arr[i], arr[size - 1 - i]);\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for(int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(struct Point p1, struct Point p2) {\n    return abs(p2.x - p1.x) + abs(p2.y - p1.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(const Point &p1, const Point &p2) {\n    return abs(p2.x - p1.x) + abs(p2.y - p1.y);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid clear_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = 0;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid clear_array(std::vector<int> &arr) {\n    for(int &num : arr) {\n        num = 0;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint find_max(int *arr, int size) {\n    int max = arr[0];\n    for(int i = 1; i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint find_max(const std::vector<int> &arr) {\n    int max = arr[0];\n    for(int num : arr) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid squareArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareArray(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num = num * num;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* createPoint(int x, int y) {\n    struct Point* newPoint = (struct Point*)malloc(sizeof(struct Point));\n    newPoint->x = x;\n    newPoint->y = y;\n    return newPoint;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* newPoint = new Point;\n    newPoint->x = x;\n    newPoint->y = y;\n    return newPoint;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int *arr, int size) {\n    int *newArr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i] * 2;\n    }\n    return newArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> newArr(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        newArr[i] = arr[i] * 2;\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setRectangleSize(struct Rectangle *rect, int width, int height) {\n    rect->width = width;\n    rect->height = height;\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setRectangleSize(Rectangle &rect, int width, int height) {\n    rect.width = width;\n    rect.height = height;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insertNode(struct Node **head, int data) {\n    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = *head;\n    *head = newNode;\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insertNode(Node* &head, int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = head;\n    head = newNode;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* mergeArrays(int *arr1, int size1, int *arr2, int size2) {\n    int *mergedArr = (int *)malloc((size1 + size2) * sizeof(int));\n    for (int i = 0; i < size1; i++) {\n        mergedArr[i] = arr1[i];\n    }\n    for (int j = 0; j < size2; j++) {\n        mergedArr[size1 + j] = arr2[j];\n    }\n    return mergedArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeArrays(const std::vector<int> &arr1, const std::vector<int> &arr2) {\n    std::vector<int> mergedArr;\n    mergedArr.reserve(arr1.size() + arr2.size());\n    mergedArr.insert(mergedArr.end(), arr1.begin(), arr1.end());\n    mergedArr.insert(mergedArr.end(), arr2.begin(), arr2.end());\n    return mergedArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Student {\n    char name[50];\n    int age;\n};\n\nvoid printStudentInfo(struct Student *student) {\n    printf(\"Name: %s, Age: %d\\n\", student->name, student->age);\n}\n", "target_code": "#include <iostream>\n\nstruct Student {\n    std::string name;\n    int age;\n};\n\nvoid printStudentInfo(const Student &student) {\n    std::cout << \"Name: \" << student.name << \", Age: \" << student.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *arr, int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for(int elem : arr) { result += elem; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(char *str) { int len = strlen(str); for(int i = 0; i < len / 2; i++) { char temp = str[i]; str[i] = str[len - i - 1]; str[len - i - 1] = temp; } }", "target_code": "void reverse(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int getDistance(Point *p1, Point *p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "class Point { public: int x; int y; Point(int x, int y) : x(x), y(y) {} int getDistance(const Point& other) { return sqrt(pow(other.x - x, 2) + pow(other.y - y, 2)); } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int *arr) { free(arr); }", "target_code": "std::vector<int> createArray(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void printEmployee(const Employee *emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "class Employee { public: int id; std::string name; void printEmployee() { std::cout << \"ID: \" << id << \", Name: \" << name << std::endl; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "class Rectangle { public: int width; int height; int getArea() { return width * height; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteIntArray(int *arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void deleteIntArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int day; int month; int year; } Date; void printDate(const Date *date) { printf(\"%d/%d/%d\\n\", date->day, date->month, date->year); }", "target_code": "class Date { public: int day; int month; int year; void printDate() { std::cout << day << \"/\" << month << \"/\" << year << std::endl; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for(const auto& elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(const auto& elem : arr) sum += elem; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* newArr = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) newArr[i] = arr[i]; return newArr; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void updatePersonAge(Person* p, int newAge) { p->age = newAge; }", "target_code": "void updatePersonAge(Person& p, int newAge) { p.age = newAge; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(std::vector<int> &arr) {\n    int result = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        result += arr[i];\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint get_max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint get_max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    int start = 0;\n    int end = size - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(struct Rectangle rect) {\n    return rect.width * rect.height;\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *duplicate_array(int arr[], int size) {\n    int *new_arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    return new_arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicate_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr(arr.begin(), arr.end());\n    return new_arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void add_arrays(int* arr1, int* arr2, int* result, int size) { for(int i=0; i<size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void add_arrays(std::vector<int>& arr1, std::vector<int>& arr2, std::vector<int>& result) { for(size_t i=0; i<arr1.size(); i++) { result.push_back(arr1[i] + arr2[i]); } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void delete_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_message(char* message) { printf(\"%s\\n\", message); }", "target_code": "void print_message(const std::string& message) { std::cout << message << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person_info(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person_info(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int temp; for(int i=0; i<size/2; i++) { temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void init_array(Array* arr, int size) { arr->data = (int*)malloc(size * sizeof(int)); arr->size = size; }", "target_code": "struct Array { std::vector<int> data; int size; }; void init_array(Array& arr, int size) { arr.data.resize(size); arr.size = size; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { return std::accumulate(arr.begin(), arr.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { int *start = arr, *end = arr + size - 1; while (start < end) { int temp = *start; *start = *end; *end = temp; start++; end--; } }", "target_code": "void reverseArray(std::vector<int> &arr) { int start = 0, end = arr.size() - 1; while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point p) { printf(\"(%d, %d)\\n\", p.x, p.y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void deleteArray(int *arr) { free(arr); }", "target_code": "int *createArray(int size) { return new int[size]; } void deleteArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student; void printStudent(Student s) { printf(\"ID: %d, Name: %s\\n\", s.id, s.name); }", "target_code": "struct Student { int id; std::string name; }; void printStudent(const Student &s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int *src, int *dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int *arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void doubleArray(std::vector<int> &arr) { for (int &num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int> &arr) { int sum = 0; for (int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printSquare(int *arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d\\n\", arr[i] * arr[i]); } }", "target_code": "void printSquare(const std::vector<int> &arr) { for (int num : arr) { std::cout << num * num << \"\\n\"; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createIntArray(int size) { return (int *)calloc(size, sizeof(int)); } void deleteIntArray(int *arr) { free(arr); }", "target_code": "int *createIntArray(int size) { return new int[size](); } void deleteIntArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* array, int size) { int result = 0; for(int i = 0; i < size; i++) { result += array[i]; } return result; }", "target_code": "int sum(const std::vector<int>& array) { int result = 0; for(int value : array) { result += value; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int* array, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { temp[i] = array[size - 1 - i]; } for(int i = 0; i < size; i++) { array[i] = temp[i]; } free(temp); }", "target_code": "void reverse(std::vector<int>& array) { std::reverse(array.begin(), array.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move(Point* p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move(Point& p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* array) { free(array); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); } // No es necesario la función free_array en C++"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", array[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& array) { for(int value : array) { std::cout << value << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copy_array(int* array, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { copy[i] = array[i]; } return copy; }", "target_code": "std::vector<int> copy_array(const std::vector<int>& array) { return array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if(n <= 1) { return 1; } return n * factorial(n - 1); }", "target_code": "int factorial(int n) { return (n <= 1) ? 1 : n * factorial(n - 1); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* values; int size; } Array; int sum_array(Array* arr) { int result = 0; for(int i = 0; i < arr->size; i++) { result += arr->values[i]; } return result; }", "target_code": "class Array { std::vector<int> values; public: int sum_array() { int result = 0; for(int value : values) { result += value; } return result; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementar(int* num) { (*num)++; }", "target_code": "void incrementar(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicar(int* num) { int* resultado = malloc(sizeof(int)); *resultado = (*num) * 2; return resultado; }", "target_code": "int* duplicar(int& num) { int* resultado = new int; *resultado = num * 2; return resultado; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void intercambiar(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void intercambiar(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Punto;", "target_code": "struct Punto { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "Punto* crear_punto(int x, int y) { Punto* p = malloc(sizeof(Punto)); p->x = x; p->y = y; return p; }", "target_code": "Punto* crear_punto(int x, int y) { Punto* p = new Punto; p->x = x; p->y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberar_punto(Punto* p) { free(p); }", "target_code": "void liberar_punto(Punto* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* crear_array(int tam) { return malloc(sizeof(int) * tam); }", "target_code": "int* crear_array(int tam) { return new int[tam]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void llenar_array(int* arr, int tam) { for(int i = 0; i < tam; i++) arr[i] = i; }", "target_code": "void llenar_array(int* arr, int tam) { for(int i = 0; i < tam; i++) arr[i] = i; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void imprimir_array(int* arr, int tam) { for(int i = 0; i < tam; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void imprimir_array(int* arr, int tam) { for(int i = 0; i < tam; i++) std::cout << arr[i] << \" \"; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* datos; int tam; } Array;", "target_code": "struct Array { std::vector<int> datos; int tam; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { for (int i = 0; i < size/2; ++i) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { for (int i = 0; i < arr.size()/2; ++i) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& arr) { for (int val : arr) { std::cout << val << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for (int val : arr) { sum += val; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int* src, int* dest, int size) { for (int i = 0; i < size; ++i) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& arr) {\n    int result = 0;\n    for(int num : arr) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point {\n    int x;\n    int y;\n};\n\nint getDistance(struct Point a, struct Point b) {\n    return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nint getDistance(const Point& a, const Point& b) {\n    return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "void printArray(const std::vector<int>& arr) {\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "int factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "target_code": "void reverseArray(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while(start < end) {\n        std::swap(arr[start], arr[end]);\n        start++;\n        end--;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int getMax(int *arr, int size) {\n    int max = arr[0];\n    for(int i = 1; i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "target_code": "int getMax(const std::vector<int>& arr) {\n    int max = arr[0];\n    for(int num : arr) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return Point{ x, y }; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_dynamic_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_dynamic_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_dynamic_array(int *arr) { free(arr); }", "target_code": "void free_dynamic_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_person(Person *p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void print_person(const Person &p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }", "target_code": "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_string(char *str) { int length = strlen(str); for (int i = 0; i < length / 2; i++) { char temp = str[i]; str[i] = str[length - i - 1]; str[length - i - 1] = temp; } }", "target_code": "void reverse_string(std::string &str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max_element(int *arr, int size) { int max = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) max = arr[i]; } return max; }", "target_code": "int max_element(const std::vector<int> &vec) { return *std::max_element(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "float average(float *arr, int size) { float sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum / size; }", "target_code": "float average(const std::vector<float> &vec) { float sum = std::accumulate(vec.begin(), vec.end(), 0.0f); return sum / vec.size(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { int i, j; for(i = 0, j = size-1; i < j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point *p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiply_matrix(int **mat, int rows, int cols, int scalar) { int i, j; for(i = 0; i < rows; i++) { for(j = 0; j < cols; j++) { mat[i][j] *= scalar; } } }", "target_code": "void multiply_matrix(std::vector<std::vector<int>> &mat, int scalar) { for(auto &row : mat) { for(auto &elem : row) { elem *= scalar; } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; void print_student(Student *s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "struct Student { int id; std::string name; }; void print_student(const Student &s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *clone_array(int *arr, int size) { int *clone = (int *)malloc(size * sizeof(int)); memcpy(clone, arr, size * sizeof(int)); return clone; }", "target_code": "std::vector<int> clone_vector(const std::vector<int> &vec) { return std::vector<int>(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void concatenate_strings(char *str1, char *str2, char *result) { sprintf(result, \"%s%s\", str1, str2); }", "target_code": "std::string concatenate_strings(const std::string &str1, const std::string &str2) { return str1 + str2; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_int(int value) { int *ptr = (int *)malloc(sizeof(int)); *ptr = value; return ptr; } void delete_int(int *ptr) { free(ptr); }", "target_code": "int *create_int(int value) { return new int(value); } void delete_int(int *ptr) { delete ptr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_struct(struct Person *p) { p->age += 1; }", "target_code": "void modify_struct(Person &p) { p.age += 1; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Person { char name[50]; int age; };", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copy_array(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copy_array(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_values(struct Person p) { return p.age; }", "target_code": "int sum_struct_values(const Person &p) { return p.age; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_and_initialize_array(int size, int value) { int *arr = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { arr[i] = value; } return arr; }", "target_code": "std::vector<int> create_and_initialize_array(int size, int value) { return std::vector<int>(size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_array(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "#include <iostream>\nvoid print_vector(const std::vector<int>& vec) { for(int i = 0; i < vec.size(); i++) { std::cout << vec[i] << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student; Student* create_student(int id, const char* name) { Student* s = (Student*)malloc(sizeof(Student)); s->id = id; strcpy(s->name, name); return s; }", "target_code": "struct Student { int id; std::string name; }; Student* create_student(int id, const std::string& name) { return new Student{id, name}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void bubble_sort(int* arr, int size) { for(int i = 0; i < size - 1; i++) { for(int j = 0; j < size - i - 1; j++) { if(arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } }", "target_code": "void bubble_sort(std::vector<int>& vec) { for(int i = 0; i < vec.size() - 1; i++) { for(int j = 0; j < vec.size() - i - 1; j++) { if(vec[j] > vec[j + 1]) { std::swap(vec[j], vec[j + 1]); } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nint* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "#include <vector>\nstd::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { double real; double imag; } Complex; Complex add_complex(Complex a, Complex b) { Complex result; result.real = a.real + b.real; result.imag = a.imag + b.imag; return result; }", "target_code": "struct Complex { double real; double imag; }; Complex add_complex(const Complex& a, const Complex& b) { return {a.real + b.real, a.imag + b.imag}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_point(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "void print_point(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Person { char name[50]; int age; };", "target_code": "class Person { public: std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPerson(struct Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void printPerson(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { temp[i] = arr[size - i - 1]; } for(int i=0; i<size; i++) { arr[i] = temp[i]; } free(temp); }", "target_code": "void reverseArray(int* arr, int size) { std::vector<int> temp(arr, arr + size); std::reverse(temp.begin(), temp.end()); std::copy(temp.begin(), temp.end(), arr); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* mergeArrays(int* arr1, int size1, int* arr2, int size2) { int* merged = (int*)malloc((size1 + size2) * sizeof(int)); for(int i=0; i<size1; i++) { merged[i] = arr1[i]; } for(int i=0; i<size2; i++) { merged[size1 + i] = arr2[i]; } return merged; }", "target_code": "std::vector<int> mergeArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> merged(arr1); merged.insert(merged.end(), arr2.begin(), arr2.end()); return merged; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void displayArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void displayArray(const std::vector<int>& arr) { for(const auto& num : arr) { std::cout << num << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum(int arr[], int n) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &arr) {\n    int result = 0;\n    for (int num : arr) {\n        result += num;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\";\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle *r) {\n    printf(\"Rectangle: width=%d, height=%d\\n\", r->width, r->height);\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle &r) {\n    std::cout << \"Rectangle: width=\" << r.width << \", height=\" << r.height << \"\\n\";\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_linked_list(const struct Node *head) {\n    const struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_linked_list(const Node *head) {\n    const Node *current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \"\\n\";\n        current = current->next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int arr1[], int arr2[], int size, int result[]) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2) {\n    std::vector<int> result;\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printStruct(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printStruct(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int arr[], int size) {\n    int* newArr = (int*)malloc(size * 2 * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    return newArr;\n}\n", "target_code": "#include <iostream>\n\nint* doubleArray(int arr[], int size) {\n    int* newArr = new int[size * 2];\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for (int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_array(int *arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void double_vector(std::vector<int> &vec) { for (int i = 0; i < vec.size(); i++) { vec[i] *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_values(Point *p) { return p->x + p->y; }", "target_code": "int sum_struct_values(const Point &p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "N/A (No necesita liberar memoria explícitamente con std::vector)"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int> &vec) { for (int i = 0; i < vec.size(); i++) { std::cout << vec[i] << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copy_array(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copy_vector(const std::vector<int> &vec) { return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_struct(Point *p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void modify_struct(Point &p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for (int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializeStruct(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void initializeStruct(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) copy[i] = arr[i]; return copy; }", "target_code": "int* copyArray(const std::vector<int>& arr) { int* copy = new int[arr.size()]; std::copy(arr.begin(), arr.end(), copy); return copy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStructMembers(Point* p) { return p->x + p->y; }", "target_code": "int sumStructMembers(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int* arr, int size) { for (int i = 0; i < size; i++) arr[i] *= 2; }", "target_code": "void doubleArray(std::vector<int>& arr) { for (int& num : arr) num *= 2; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max_value(int* arr, int size) { int max = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) { max = arr[i]; } } return max; }", "target_code": "int max_value(const std::vector<int>& vec) { int max = vec[0]; for (int i = 1; i < vec.size(); i++) { if (vec[i] > max) { max = vec[i]; } } return max; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area_rectangle(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area_rectangle(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increase_values(int* arr, int size, int amount) { for (int i = 0; i < size; i++) { arr[i] += amount; } }", "target_code": "void increase_values(std::vector<int>& vec, int amount) { for (int i = 0; i < vec.size(); i++) { vec[i] += amount; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person_data(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person_data(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int a, int b) { return a + b; }", "target_code": "int sum(int a, int b) { return a + b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float x; float y; } Vector; Vector add_vectors(Vector v1, Vector v2) { Vector result; result.x = v1.x + v2.x; result.y = v1.y + v2.y; return result; }", "target_code": "struct Vector { float x; float y; }; Vector add_vectors(const Vector& v1, const Vector& v2) { return Vector{v1.x + v2.x, v1.y + v2.y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void sort_array(int* arr, int size) { for (int i = 0; i < size - 1; i++) { for (int j = 0; j < size - i - 1; j++) { if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } }", "target_code": "void sort_vector(std::vector<int>& vec) { std::sort(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void addArrays(int *arr1, int *arr2, int *result, int size) { for(int i=0; i<size; i++) result[i] = arr1[i] + arr2[i]; }", "target_code": "void addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2, std::vector<int> &result) { for(size_t i=0; i<vec1.size(); i++) result.push_back(vec1[i] + vec2[i]); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createDynamicArray(int size) { return (int*) malloc(size * sizeof(int)); }", "target_code": "int* createDynamicArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapValues(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapValues(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int calculateSum(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int calculateSum(const std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printStruct(Person *person) { printf(\"ID: %d, Name: %s\\n\", person->id, person->name); }", "target_code": "void printStruct(const Person &person) { std::cout << \"ID: \" << person.id << \", Name: \" << person.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int *arr, int size) { int *copy = (int*) malloc(size * sizeof(int)); for(int i=0; i<size; i++) copy[i] = arr[i]; return copy; }", "target_code": "std::vector<int> copyVector(const std::vector<int> &vec) { return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeDynamicArray(int *arr) { free(arr); }", "target_code": "void freeDynamicArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementValues(int *arr, int size) { for(int i=0; i<size; i++) arr[i]++; }", "target_code": "void incrementValues(std::vector<int> &vec) { for(int &num : vec) num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStructValues(Person *person) { return person->id + strlen(person->name); }", "target_code": "int sumStructValues(const Person &person) { return person.id + person.name.length(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_sum(Point p) {\n    return p.x + p.y;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_sum(Point &p) {\n    return p.x + p.y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int &a, int &b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insert_node(struct Node **head, int data) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insert_node(Node *&head, int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    int left = 0;\n    int right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    int left = 0;\n    int right = vec.size() - 1;\n    while (left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* merge_arrays(int arr1[], int size1, int arr2[], int size2) {\n    int* merged = (int*)malloc((size1 + size2) * sizeof(int));\n    int i, j;\n    for (i = 0; i < size1; i++) {\n        merged[i] = arr1[i];\n    }\n    for (j = 0; j < size2; j++) {\n        merged[i + j] = arr2[j];\n    }\n    return merged;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> merge_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2) {\n    std::vector<int> merged;\n    merged.reserve(vec1.size() + vec2.size());\n    merged.insert(merged.end(), vec1.begin(), vec1.end());\n    merged.insert(merged.end(), vec2.begin(), vec2.end());\n    return merged;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_linked_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_linked_list(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"NULL\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int age;\n};\n\nvoid print_student_info(struct Student s) {\n    printf(\"Name: %s, Age: %d\\n\", s.name, s.age);\n}\n", "target_code": "#include <iostream>\n\nstruct Student {\n    std::string name;\n    int age;\n};\n\nvoid print_student_info(const Student& s) {\n    std::cout << \"Name: \" << s.name << \", Age: \" << s.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* copy_array(int arr[], int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> copy_vector(const std::vector<int>& vec) {\n    std::vector<int> copy(vec.begin(), vec.end());\n    return copy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createIntArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nArray createArray(int size) {\n    Array arr;\n    arr.data = (int *)malloc(size * sizeof(int));\n    arr.size = size;\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> data;\n    int size;\n\n    Array(int size) : data(size), size(size) {}\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size, int inc) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += inc;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementArray(std::vector<int> &arr, int inc) {\n    for (int &num : arr) {\n        num += inc;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    void print() {\n        std::cout << \"(\" << x << \", \" << y << \")\" << std::endl;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid doubleArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid doubleArray(std::vector<int> &arr) {\n    std::for_each(arr.begin(), arr.end(), [](int &num) {\n        num *= 2;\n    });\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\n// No es necesario, std::vector se libera automáticamente\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    } else {\n        return base * power(base, exponent - 1);\n    }\n}\n", "target_code": "#include <iostream>\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    } else {\n        return base * power(base, exponent - 1);\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* mergeArrays(int *arr1, int size1, int *arr2, int size2) {\n    int *result = (int*)malloc((size1 + size2) * sizeof(int));\n    memcpy(result, arr1, size1 * sizeof(int));\n    memcpy(result + size1, arr2, size2 * sizeof(int));\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeArrays(std::vector<int> &arr1, std::vector<int> &arr2) {\n    std::vector<int> result;\n    result.insert(result.end(), arr1.begin(), arr1.end());\n    result.insert(result.end(), arr2.begin(), arr2.end());\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getDistance(struct Point *p1, struct Point *p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}\n", "target_code": "#include <iostream>\n#include <cmath>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getDistance(const Point &p1, const Point &p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* filterArray(int *arr, int size, int threshold, int &newSize) {\n    int *newArr = (int*)malloc(size * sizeof(int));\n    newSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] > threshold) {\n            newArr[newSize] = arr[i];\n            newSize++;\n        }\n    }\n    newArr = (int*)realloc(newArr, newSize * sizeof(int));\n    return newArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> filterArray(const std::vector<int> &arr, int threshold) {\n    std::vector<int> newArr;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > threshold) {\n            newArr.push_back(arr[i]);\n        }\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << '\\n';\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint countDigits(int num) {\n    int count = 0;\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n    return count;\n}\n", "target_code": "#include <iostream>\n\nint countDigits(int num) {\n    return std::to_string(num).length();\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid deleteLinkedList(struct Node *head) {\n    struct Node *current = head;\n    struct Node *next;\n    while (current != NULL) {\n        next = current->next;\n        free(current);\n        current = next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid deleteLinkedList(Node *head) {\n    Node *current = head;\n    Node *next;\n    while (current != NULL) {\n        next = current->next;\n        delete current;\n        current = next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(struct Point *p1, struct Point *p2) {\n    return (p2->x - p1->x) * (p2->x - p1->x) + (p2->y - p1->y) * (p2->y - p1->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(const Point &p1, const Point &p2) {\n    return (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint get_age(struct Person *p) {\n    return p->age;\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint get_age(const Person &p) {\n    return p.age;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *dest, int *src, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid copy_array(int *dest, const int *src, int size) {\n    std::copy(src, src + size, dest);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid print_array(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *multiply_by_scalar(int *arr, int size, int scalar) {\n    int *result = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * scalar;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n\nstd::vector<int> multiply_by_scalar(const std::vector<int> &arr, int scalar) {\n    std::vector<int> result(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * scalar;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int result = 0; for(int i=0; i<size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(std::vector<int>& arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void* createIntArray(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(Point* p1, Point* p2) { Point temp = *p1; *p1 = *p2; *p2 = temp; }", "target_code": "void swap(Point& p1, Point& p2) { Point temp = p1; p1 = p2; p2 = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void setRectangleSize(Rectangle* rect, int w, int h) { rect->width = w; rect->height = h; }", "target_code": "struct Rectangle { int width; int height; }; void setRectangleSize(Rectangle& rect, int w, int h) { rect.width = w; rect.height = h; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createAndFillArray(int size, int value) { int* arr = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { arr[i] = value; } return arr; }", "target_code": "std::vector<int> createAndFillArray(int size, int value) { return std::vector<int>(size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid updatePoint(Point *p, int new_x, int new_y) {\n    p->x = new_x;\n    p->y = new_y;\n}\n", "target_code": "#include <iostream>\n\nvoid updatePoint(Point &p, int new_x, int new_y) {\n    p.x = new_x;\n    p.y = new_y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapPointers(int **ptr1, int **ptr2) {\n    int *temp = *ptr1;\n    *ptr1 = *ptr2;\n    *ptr2 = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapPointers(int* &ptr1, int* &ptr2) {\n    int* temp = ptr1;\n    ptr1 = ptr2;\n    ptr2 = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void print_vector(std::vector<int>& vec) { for(int i=0; i<vec.size(); i++) std::cout << vec[i] << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student;", "target_code": "struct Student { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int i=0; i<vec.size(); i++) sum += vec[i]; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void update_point(Point* p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void update_point(Point& p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int start = 0; int end = size - 1; while (start < end) { swap(&arr[start], &arr[end]); start++; end--; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { int start = 0; int end = vec.size() - 1; while (start < end) { swap(vec[start], vec[end]); start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copy_array(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) copy[i] = arr[i]; return copy; }", "target_code": "std::vector<int> copy_vector(std::vector<int>& vec) { std::vector<int> copy(vec.begin(), vec.end()); return copy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *num) { (*num)++; }", "target_code": "void increment(int &num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverseArray(std::vector<int> &arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point createPoint(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point createPoint(int x, int y) { return Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int *arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printIntArray(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int> &arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculateArea(const Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculateArea(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copyArray(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(sizeof(int) * size); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int i = 0; i < arr.size(); i++) { std::cout << arr[i] << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modifyStruct(Point* p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void modifyStruct(Point& p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int* src, int* dest, int size) { std::copy(src, src + size, dest); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* addArrays(int* arr1, int* arr2, int size) { int* result = (int*)malloc(sizeof(int) * size); for (int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } return result; }", "target_code": "std::vector<int> addArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> result; for (int i = 0; i < arr1.size(); i++) { result.push_back(arr1[i] + arr2[i]); } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int getArraySum(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int getArraySum(const std::vector<int>& arr) { int sum = 0; for (int i = 0; i < arr.size(); i++) { sum += arr[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int n) { int total = 0; for(int i = 0; i < n; i++) { total += arr[i]; } return total; }", "target_code": "int sum(const std::vector<int>& arr) { int total = 0; for(int num : arr) { total += num; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student;", "target_code": "struct Student { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_student(const Student* s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "void print_student(const Student& s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "N/A (No need for explicit memory management with std::vector in C++)"}
{"source_language": "C", "target_language": "C++", "source_code": "void initialize_array(int* arr, int n) { for(int i = 0; i < n; i++) { arr[i] = i; } }", "target_code": "void initialize_array(std::vector<int>& arr) { for(int i = 0; i < arr.size(); i++) { arr[i] = i; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if(n == 0) return 1; return n * factorial(n - 1); }", "target_code": "int factorial(int n) { if(n == 0) return 1; return n * factorial(n - 1); } // Recursive function in C++ is the same as in C"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_array(int* arr, int n) { for(int i = 0; i < n; i++) { arr[i] *= 2; } }", "target_code": "void modify_array(std::vector<int>& arr) { for(int& num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int count_elements(int* arr, int n, int target) { int count = 0; for(int i = 0; i < n; i++) { if(arr[i] == target) { count++; } } return count; }", "target_code": "int count_elements(const std::vector<int>& arr, int target) { int count = 0; for(int num : arr) { if(num == target) { count++; } } return count; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeIntArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n} Employee;\n", "target_code": "#include <iostream>\n\nclass Employee {\npublic:\n    int id;\n    std::string name;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid reverseArray(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid addOneToArray(std::vector<int>& arr) {\n    for (int& num : arr) {\n        num += 1;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* copyArray(int *arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n", "target_code": "#include <iostream>\n\nstd::vector<int> copyArray(const std::vector<int>& arr) {\n    std::vector<int> copy;\n    for (int num : arr) {\n        copy.push_back(num);\n    }\n    return copy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    double radius;\n} Circle;\n\nvoid updateRadius(Circle *c, double new_radius) {\n    c->radius = new_radius;\n}\n", "target_code": "#include <iostream>\n\nclass Circle {\npublic:\n    double radius;\n    void updateRadius(double new_radius) {\n        radius = new_radius;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\nint sum(const std::vector<int> &arr) {\n    int result = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        result += arr[i];\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\nint* create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\nint get_sum(Point p) {\n    return p.x + p.y;\n}\n", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int x_, int y_) : x(x_), y(y_) {}\n    int get_sum() {\n        return x + y;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\nint get_area(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n", "target_code": "#include <iostream>\nclass Rectangle {\npublic:\n    int width;\n    int height;\n    Rectangle(int width_, int height_) : width(width_), height(height_) {}\n    int get_area() {\n        return width * height;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\nvoid reverse_array(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* duplicate_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    return new_arr;\n}\n", "target_code": "#include <iostream>\nstd::vector<int> duplicate_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr;\n    for(int i = 0; i < arr.size(); i++) {\n        new_arr.push_back(arr[i]);\n    }\n    return new_arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_array(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\nvoid print_array(const std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *x) { (*x)++; }", "target_code": "void increment(int &x) { x++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int array[], int size) { int result = 0; for(int i = 0; i < size; i++) { result += array[i]; } return result; }", "target_code": "int sum(const std::vector<int> &array) { int result = 0; for(int val : array) { result += val; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createIntArray(int size) { return (int*)malloc(sizeof(int) * size); }", "target_code": "int *createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int *array) { free(array); }", "target_code": "void freeIntArray(int *array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int square(int x) { return x * x; }", "target_code": "int square(int x) { return x * x; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int *array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", array[i]); } printf(\"\\n\"); }", "target_code": "void printIntArray(const std::vector<int> &array) { for(int val : array) { std::cout << val << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void setPersonName(Person *p, const char *name) { strcpy(p->name, name); }", "target_code": "void setPersonName(Person &p, const std::string &name) { p.name = name; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int *array, int size) { for(int i = 0; i < size; i++) { array[i] *= 2; } }", "target_code": "void doubleArray(std::vector<int> &array) { for(int &val : array) { val *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(char* str) { int len = strlen(str); for(int i = 0, j = len-1; i < j; i++, j--) { char temp = str[i]; str[i] = str[j]; str[j] = temp; } }", "target_code": "void reverse(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Person; void printPersonInfo(Person* p) { printf(\"ID: %d, Name: %s\\n\", p->id, p->name); }", "target_code": "struct Person { int id; std::string name; }; void printPersonInfo(const Person& p) { std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { int* arr = (int*)malloc(size * sizeof(int)); return arr; } void freeArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createArray(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; float distance(Point* p1, Point* p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { int x; int y; }; float distance(const Point& p1, const Point& p2) { return std::sqrt(std::pow(p2.x - p1.x, 2) + std::pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) { std::copy(src.begin(), src.end(), dest.begin()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float radius; } Circle; float area(Circle* c) { return 3.14 * c->radius * c->radius; }", "target_code": "struct Circle { float radius; }; float area(const Circle& c) { return 3.14 * c.radius * c.radius; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* allocateInt() { int* num = (int*)malloc(sizeof(int)); return num; } void deallocateInt(int* num) { free(num); }", "target_code": "int* allocateInt() { return new int; } void deallocateInt(int* num) { delete num; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle* r) { return r->width * r->height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle& r) { return r.width * r.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_memory(int *ptr) { free(ptr); } int* allocate_memory(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "void free_memory(int *ptr) { delete[] ptr; } int* allocate_memory(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void set_dimensions(Rectangle *rect, int w, int h) { rect->width = w; rect->height = h; }", "target_code": "struct Rectangle { int width; int height; }; void set_dimensions(Rectangle &rect, int w, int h) { rect.width = w; rect.height = h; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int *src, int *dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int> &src, std::vector<int> &dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_values(int *arr, int size) { for(int i=0; i<size; i++) { arr[i] *= 2; } }", "target_code": "void double_values(std::vector<int> &arr) { for(int &num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void print_employee(const Employee *emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "struct Employee { int id; std::string name; }; void print_employee(const Employee &emp) { std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment_values(int *arr, int size) { for(int i=0; i<size; i++) { (*arr)++; arr++; } }", "target_code": "void increment_values(std::vector<int> &arr) { for(int &num : arr) { num++; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "void printVector(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int width;\n    int height;\n} Rectangle;", "target_code": "struct Rectangle {\n    int width;\n    int height;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createDynamicArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "std::vector<int> createDynamicArray(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sumVector(const std::vector<int>& vec) {\n    return std::accumulate(vec.begin(), vec.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializePerson(Person* p, int id, const char* name) {\n    p->id = id;\n    strcpy(p->name, name);\n}", "target_code": "void initializePerson(Person& p, int id, const std::string& name) {\n    p.id = id;\n    p.name = name;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int* data;\n    int size;\n} Array;", "target_code": "struct Array {\n    std::vector<int> data;\n    int size;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void printArray(std::vector<int> arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; ++i) sum += arr[i]; return sum; }", "target_code": "int sumArray(std::vector<int> arr) { int sum = 0; for (int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializePoint(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void initializePoint(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* doubleArray(int* arr, int size) { int* newArr = (int*)malloc(size * 2 * sizeof(int)); memcpy(newArr, arr, size * sizeof(int)); free(arr); return newArr; }", "target_code": "std::vector<int> doubleArray(const std::vector<int>& arr) { std::vector<int> newArr; newArr.reserve(arr.size() * 2); newArr.insert(newArr.end(), arr.begin(), arr.end()); return newArr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStruct(Point* p) { return p->x + p->y; }", "target_code": "int sumStruct(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modifyStruct(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void modifyStruct(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_ints(int* a, int* b) {\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}", "target_code": "void swap_ints(int& a, int& b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nint get_distance(const Point* p1, const Point* p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\ndouble get_distance(const Point& p1, const Point& p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}", "target_code": "std::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Employee;\n\nvoid print_employee(const Employee* emp) {\n    printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name);\n}", "target_code": "struct Employee {\n    int id;\n    std::string name;\n    void print() const {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* double_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}", "target_code": "std::vector<int> double_vector(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for(int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    return new_vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint get_area(const Rectangle* rect) {\n    return rect->width * rect->height;\n}", "target_code": "struct Rectangle {\n    int width;\n    int height;\n    int get_area() const {\n        return width * height;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* merge_arrays(int* arr1, int size1, int* arr2, int size2) {\n    int* merged = (int*)malloc((size1 + size2) * sizeof(int));\n    memcpy(merged, arr1, size1 * sizeof(int));\n    memcpy(merged + size1, arr2, size2 * sizeof(int));\n    return merged;\n}", "target_code": "std::vector<int> merge_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2) {\n    std::vector<int> merged = vec1;\n    merged.insert(merged.end(), vec2.begin(), vec2.end());\n    return merged;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid print_array(const Array* arr) {\n    for(int i = 0; i < arr->size; i++) {\n        printf(\"%d \", arr->data[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "class Array {\npublic:\n    std::vector<int> data;\n\n    void print() const {\n        for(int num : data) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct(const Point* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i].x + arr[i].y;\n    }\n    return sum;\n}", "target_code": "int sum_struct(const std::vector<Point>& vec) {\n    int sum = 0;\n    for(const Point& p : vec) {\n        sum += p.x + p.y;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: %d, %d\\n\", p.x, p.y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: \" << p.x << \", \" << p.y << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* doubleArray(int *arr, int size) {\n    int *newArr = (int*)malloc(size * 2 * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    free(arr);\n    return newArr;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> newArr(arr.begin(), arr.end());\n    newArr.insert(newArr.end(), arr.begin(), arr.end());\n    return newArr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(struct Rectangle rect) {\n    return rect.width * rect.height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.width * rect.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverseArray(int *arr, int size) {\n    std::reverse(arr, arr + size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyString(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}", "target_code": "#include <iostream>\n\nvoid copyString(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicateArray(int* arr, int size) { int* duplicate = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { duplicate[i] = arr[i]; } return duplicate; }", "target_code": "std::vector<int> duplicateArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void clearArray(int* arr, int size) { for(int i = 0; i < size; i++) { arr[i] = 0; } }", "target_code": "void clearArray(std::vector<int>& arr) { std::fill(arr.begin(), arr.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPersonInfo(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void printPersonInfo(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& arr) {\n    int result = 0;\n    for (int elem : arr) {\n        result += elem;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "int* createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeIntArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPerson(const Person* p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}", "target_code": "void printPerson(const Person& p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArrayElements(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "void doubleArrayElements(std::vector<int>& arr) {\n    for (int& elem : arr) {\n        elem *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createAndInitArray(int size, int value) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}", "target_code": "std::vector<int> createAndInitArray(int size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for(int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle;", "target_code": "struct Rectangle { int width; int height; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void update_rectangle(Rectangle* r, int new_width, int new_height) { r->width = new_width; r->height = new_height; }", "target_code": "void update_rectangle(Rectangle& r, int new_width, int new_height) { r.width = new_width; r.height = new_height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* double_array(int* arr, int size) { int* doubled = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) doubled[i] = arr[i] * 2; return doubled; }", "target_code": "std::vector<int> double_array(const std::vector<int>& arr) { std::vector<int> doubled; for(int num : arr) doubled.push_back(num * 2); return doubled; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max(int a, int b) { return a > b ? a : b; }", "target_code": "int max(int a, int b) { return std::max(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson* createPerson(int id, const char *name) {\n    Person *p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* createPerson(int id, const std::string &name) {\n    Person *p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeMemory(void *ptr) {\n    free(ptr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeMemory(void *ptr) {\n    delete ptr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int *arr, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> result(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint square(int num) {\n    return num * num;\n}\n", "target_code": "#include <iostream>\n\nint square(int num) {\n    return num * num;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_c(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_cpp(std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_c(char *str) { int length = strlen(str); for(int i = 0; i < length / 2; i++) { char temp = str[i]; str[i] = str[length - i - 1]; str[length - i - 1] = temp; } }", "target_code": "void reverse_cpp(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int distance_c(Point *p1, Point *p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { int x; int y; }; int distance_cpp(const Point& p1, const Point& p2) { return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array_c(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array_cpp(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array_c(int size) { return (int*)malloc(size * sizeof(int)); } void free_array_c(int *arr) { free(arr); }", "target_code": "int* create_array_cpp(int size) { return new int[size]; } void free_array_cpp(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; void print_student_c(Student *s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "struct Student { int id; std::string name; }; void print_student_cpp(const Student& s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void bubble_sort_c(int *arr, int size) { for(int i = 0; i < size - 1; i++) { for(int j = 0; j < size - i - 1; j++) { if(arr[j] > arr[j+1]) { int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } } }", "target_code": "void bubble_sort_cpp(std::vector<int>& arr) { std::sort(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area_c(Rectangle *r) { return r->width * r->height; }", "target_code": "struct Rectangle { int width; int height; }; int area_cpp(const Rectangle& r) { return r.width * r.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void uppercase_c(char *str) { for(int i = 0; str[i]; i++) { str[i] = toupper(str[i]); } }", "target_code": "void uppercase_cpp(std::string& str) { std::transform(str.begin(), str.end(), str.begin(), ::toupper); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *merge_arrays_c(int *arr1, int size1, int *arr2, int size2) { int *merged = (int*)malloc((size1 + size2) * sizeof(int)); memcpy(merged, arr1, size1 * sizeof(int)); memcpy(merged + size1, arr2, size2 * sizeof(int)); return merged; }", "target_code": "std::vector<int> merge_arrays_cpp(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> merged = arr1; merged.insert(merged.end(), arr2.begin(), arr2.end()); return merged; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverseArray(int arr[], int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverseVector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Point {\n    int x;\n    int y;\n};\nvoid printPoint(struct Point p) {\n    printf(\"%d %d\\n\", p.x, p.y);\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    void print() {\n        std::cout << x << \" \" << y << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <iostream>\nint* createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid freeIntArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\nvoid freeIntArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sum(const int *arr, int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "#include <iostream>\nint sum(const std::vector<int> &vec) {\n    int result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Student {\n    char name[50];\n    int age;\n};\nvoid printStudent(struct Student *stu) {\n    printf(\"Name: %s, Age: %d\\n\", stu->name, stu->age);\n}", "target_code": "#include <iostream>\n#include <string>\nclass Student {\npublic:\n    std::string name;\n    int age;\n    void print() {\n        std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid doubleArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "#include <iostream>\nvoid doubleVector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createAndInitArray(int size, int value) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}", "target_code": "#include <iostream>\nstd::vector<int> createAndInitVector(int size, int value) {\n    std::vector<int> vec(size, value);\n    return vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}", "target_code": "#include <iostream>\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printIntArray(const std::vector<int>& arr) {\n    for(const auto& elem : arr) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\n// No need for manual memory management with std::vector in C++\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addPoint(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n", "target_code": "#include <iostream>\n\nvoid addPoint(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyIntArray(int* src, int* dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid copyIntArray(const int* src, int* dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumIntArray(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumIntArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for(const auto& elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createDynamicArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createDynamicArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArray(int* arr, int size, int* result) { *result = 0; for(int i = 0; i < size; i++) { *result += arr[i]; } }", "target_code": "void sumVector(const std::vector<int>& vec, int& result) { result = 0; for(int i = 0; i < vec.size(); i++) { result += vec[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapIntegers(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapIntegers(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int getArea(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int i = 0, j = size - 1; while(i < j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; i++; j--; } }", "target_code": "void reverseVector(std::vector<int>& vec) { int i = 0, j = vec.size() - 1; while(i < j) { int temp = vec[i]; vec[i] = vec[j]; vec[j] = temp; i++; j--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void doubleArrayValues(Array* arr) { for(int i = 0; i < arr->size; i++) { arr->data[i] *= 2; } }", "target_code": "class Array { std::vector<int> data; public: void doubleValues() { for(int i = 0; i < data.size(); i++) { data[i] *= 2; } } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyVector(const std::vector<int>& vec) { return std::vector<int>(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void freeArray(Array* arr) { free(arr->data); }", "target_code": "class Array { std::vector<int> data; public: ~Array() { data.clear(); } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int>& vec) { for(int i = 0; i < vec.size(); i++) { std::cout << vec[i] << \" \"; } std::cout << \"\\n\"; }"}
