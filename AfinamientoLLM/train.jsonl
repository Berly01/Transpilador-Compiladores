{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for(int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nstruct Person* create_person(const char* name, int age) {\n    struct Person *p = (struct Person*)malloc(sizeof(struct Person));\n    snprintf(p->name, sizeof(p->name), \"%s\", name);\n    p->age = age;\n    return p;\n}\n\nvoid free_person(struct Person *p) {\n    free(p);\n}\n\nint main() {\n    struct Person *p = create_person(\"Alice\", 30);\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n    free_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nPerson* create_person(const std::string& name, int age) {\n    Person *p = new Person;\n    p->name = name;\n    p->age = age;\n    return p;\n}\n\nint main() {\n    Person *p = create_person(\"Alice\", 30);\n    std::cout << \"Name: \" << p->name << \", Age: \" << p->age << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementPointer(int* ptr) { (*ptr)++; }", "target_code": "void incrementPointer(int& ref) { ref++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& vec) { for(int val : vec) std::cout << val << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freePoint(Point* p) { free(p); }", "target_code": "void freePoint(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::vector<int> createIntArray(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num;\n    int* ptr = &num;\n    c_function(ptr);\n    printf(\"Value in C: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int num;\n    cpp_function(num);\n    std::cout << \"Value in C++: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = (int*)malloc(size * sizeof(int));\n    c_function(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec(size);\n    cpp_function(vec);\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point* point = (Point*)malloc(sizeof(Point));\n    c_function(point);\n    printf(\"Values in C: x=%d, y=%d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function(Point& point) {\n    point.x = 5;\n    point.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_function(point);\n    std::cout << \"Values in C++: x=\" << point.x << \", y=\" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid c_function(Array* arr) {\n    for (int i = 0; i < arr->size; i++) {\n        arr->data[i] = i;\n    }\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.data = (int*)malloc(arr.size * sizeof(int));\n    c_function(&arr);\n    for (int i = 0; i < arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n};\n\nvoid cpp_function(Array& arr) {\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i;\n    }\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.data.resize(arr.size);\n    cpp_function(arr);\n    for (int i = 0; i < arr.size; i++) {\n        std::cout << arr.data[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* point = (Point*)malloc(sizeof(Point));\n    point->x = x;\n    point->y = y;\n    return point;\n}\n\nvoid c_function(Point* point) {\n    printf(\"Values in C: x=%d, y=%d\\n\", point->x, point->y);\n}\n\nint main() {\n    Point* point = create_point(5, 10);\n    c_function(point);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    Point* point = new Point;\n    point->x = x;\n    point->y = y;\n    return point;\n}\n\nvoid cpp_function(Point& point) {\n    std::cout << \"Values in C++: x=\" << point.x << \", y=\" << point.y << std::endl;\n}\n\nint main() {\n    Point* point = create_point(5, 10);\n    cpp_function(*point);\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point* point = (Point*)malloc(sizeof(Point));\n    c_function(point);\n    printf(\"Values in C: x=%d, y=%d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point* point = new Point;\n    cpp_function(point);\n    std::cout << \"Values in C++: x=\" << point->x << \", y=\" << point->y << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"Num: %d\\n\", num);\n\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    print_array(arr, 5);\n\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid print_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << \"Num: \" << num << std::endl;\n\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    print_vector(vec);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid print_person(Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = 1;\n    strcpy(p->name, \"Alice\");\n    print_person(p);\n\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person *p = new Person;\n    p->id = 1;\n    p->name = \"Alice\";\n    print_person(*p);\n\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int *arr = create_array(5);\n    print_array(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    for (int i = 0; i < size; i++) {\n        vec[i] = i + 1;\n    }\n    return vec;\n}\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum(int *arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &vec) {\n    int total = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        total += vec[i];\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum(vec);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid swap(Point *p) {\n    int temp = p->x;\n    p->x = p->y;\n    p->y = temp;\n}\n\nint main() {\n    Point p = {10, 20};\n    swap(&p);\n    printf(\"%d %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nvoid swap(Point &p) {\n    int temp = p.x;\n    p.x = p.y;\n    p.y = temp;\n}\n\nint main() {\n    Point p = {10, 20};\n    swap(p);\n    std::cout << p.x << ' ' << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int size;\n    int *data;\n} Array;\n\nvoid initialize(Array *arr, int size) {\n    arr->size = size;\n    arr->data = (int *)malloc(size * sizeof(int));\n}\n\nvoid cleanup(Array *arr) {\n    free(arr->data);\n}\n\nint main() {\n    Array arr;\n    initialize(&arr, 5);\n    cleanup(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> data;\n\n    void initialize(int size) {\n        data.resize(size);\n    }\n};\n\nint main() {\n    Array arr;\n    arr.initialize(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {10, 20};\n    printf(\"Area: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    int area() {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r = {10, 20};\n    std::cout << \"Area: \" << r.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid print_person(Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    int id;\n    std::string name;\n\n    void print() {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};\n\nint main() {\n    Person p = {1, \"Alice\"};\n    p.print();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int a;\n    int b;\n} Pair;\n\nvoid add(Pair *p) {\n    p->a += 10;\n    p->b += 10;\n}\n\nint main() {\n    Pair p = {5, 7};\n    add(&p);\n    printf(\"%d %d\\n\", p.a, p.b);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Pair {\npublic:\n    int a;\n    int b;\n\n    void add() {\n        a += 10;\n        b += 10;\n    }\n};\n\nint main() {\n    Pair p = {5, 7};\n    p.add();\n    std::cout << p.a << ' ' << p.b << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insert_node(struct Node **head, int data) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct Node *head = NULL;\n    insert_node(&head, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insert_node(Node *&head, int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node *head = nullptr;\n    insert_node(head, 5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid sumar_array(int* arr, int size, int* resultado) {\n    *resultado = 0;\n    for (int i = 0; i < size; i++) {\n        *resultado += arr[i];\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int resultado;\n    sumar_array(arr, 5, &resultado);\n    printf(\"La suma es: %d\\n\", resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid sumar_vector(const std::vector<int>& vec, int& resultado) {\n    resultado = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        resultado += vec[i];\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int resultado;\n    sumar_vector(vec, resultado);\n    std::cout << \"La suma es: \" << resultado << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid duplicar_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    duplicar_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid duplicar_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    duplicar_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nstruct Punto {\n    int x;\n    int y;\n};\nvoid imprimir_punto(struct Punto* punto) {\n    printf(\"(%d, %d)\\n\", punto->x, punto->y);\n}\nint main() {\n    struct Punto p = {3, 5};\n    imprimir_punto(&p);\n    return 0;\n}", "target_code": "#include <iostream>\nstruct Punto {\n    int x;\n    int y;\n};\nvoid imprimir_punto(const Punto& punto) {\n    std::cout << \"(\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n}\nint main() {\n    Punto p = {3, 5};\n    imprimir_punto(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid invertir_array(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    invertir_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid invertir_vector(std::vector<int>& vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    invertir_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid sumar_matrices(int** mat1, int** mat2, int** resultado, int filas, int columnas) {\n    *resultado = (int**)malloc(filas * sizeof(int*));\n    for (int i = 0; i < filas; i++) {\n        (*resultado)[i] = (int*)malloc(columnas * sizeof(int));\n        for (int j = 0; j < columnas; j++) {\n            (*resultado)[i][j] = mat1[i][j] + mat2[i][j];\n        }\n    }\n}\nint main() {\n    int** mat1 = (int**)malloc(2 * sizeof(int*));\n    int** mat2 = (int**)malloc(2 * sizeof(int*));\n    int** resultado;\n    for (int i = 0; i < 2; i++) {\n        mat1[i] = (int*)malloc(2 * sizeof(int));\n        mat2[i] = (int*)malloc(2 * sizeof(int));\n        for (int j = 0; j < 2; j++) {\n            mat1[i][j] = i + j;\n            mat2[i][j] = i - j;\n        }\n    }\n    sumar_matrices(mat1, mat2, &resultado, 2, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", resultado[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid sumar_matrices(const std::vector<std::vector<int>>& mat1, const std::vector<std::vector<int>>& mat2, std::vector<std::vector<int>>& resultado) {\n    resultado.resize(mat1.size(), std::vector<int>(mat1[0].size()));\n    for (int i = 0; i < mat1.size(); i++) {\n        for (int j = 0; j < mat1[0].size(); j++) {\n            resultado[i][j] = mat1[i][j] + mat2[i][j];\n        }\n    }\n}\nint main() {\n    std::vector<std::vector<int>> mat1 = {{0, 1}, {1, 2}};\n    std::vector<std::vector<int>> mat2 = {{0, -1}, {1, 0}};\n    std::vector<std::vector<int>> resultado;\n    sumar_matrices(mat1, mat2, resultado);\n    for (int i = 0; i < resultado.size(); i++) {\n        for (int j = 0; j < resultado[0].size(); j++) {\n            std::cout << resultado[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <iostream>\n#include <vector>\nint sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(auto num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <iostream>\nint* create_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\nint get_distance(const Point* p1, const Point* p2) {\n    return (p2->x - p1->x) + (p2->y - p1->y);\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n};\nint get_distance(const Point& p1, const Point& p2) {\n    return (p2.x - p1.x) + (p2.y - p1.y);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap_values(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\nvoid swap_values(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int id;\n    char name[50];\n} Student;\nvoid print_student(const Student* s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}", "target_code": "#include <iostream>\nclass Student {\npublic:\n    int id;\n    std::string name;\n    void print_student() const {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n\nint sumArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for(const auto& elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *array = createArray(5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid printList(struct Node *head) {\n    struct Node *current = head;\n    while(current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = NULL;\n    printList(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid printList(const Node *head) {\n    const Node *current = head;\n    while(current != nullptr) {\n        std::cout << current->data << \" \";\n        current = current->next;\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = nullptr;\n    printList(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } }", "target_code": "void print_vector(const std::vector<int>& vec) { for (int elem : vec) { std::cout << elem << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementarArray(int *array, int size) {\n    for(int i = 0; i < size; i++) {\n        array[i]++;\n    }\n}", "target_code": "void incrementarVector(std::vector<int> &vec) {\n    for(int &elem : vec) {\n        elem++;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid moverPunto(Punto *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "struct Punto {\n    int x;\n    int y;\n};\n\nvoid moverPunto(Punto &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int *crearArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}", "target_code": "std::vector<int> crearVector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumaArray(int *array, int size) {\n    int suma = 0;\n    for(int i = 0; i < size; i++) {\n        suma += array[i];\n    }\n    return suma;\n}", "target_code": "int sumaVector(const std::vector<int> &vec) {\n    int suma = 0;\n    for(const int &elem : vec) {\n        suma += elem;\n    }\n    return suma;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char nombre[50];\n} Usuario;\n\nvoid imprimirUsuario(Usuario *u) {\n    printf(\"ID: %d, Nombre: %s\\n\", u->id, u->nombre);\n}", "target_code": "struct Usuario {\n    int id;\n    std::string nombre;\n};\n\nvoid imprimirUsuario(const Usuario &u) {\n    std::cout << \"ID: \" << u.id << \", Nombre: \" << u.nombre << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void c_swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void cpp_swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int c_sum_array(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int cpp_sum_vector(const std::vector<int> &arr) { int sum = 0; for(int i=0; i<arr.size(); i++) sum += arr[i]; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } c_point; c_point *c_create_point(int x, int y) { c_point *p = (c_point *)malloc(sizeof(c_point)); p->x = x; p->y = y; return p; }", "target_code": "struct cpp_point { int x; int y; }; cpp_point *cpp_create_point(int x, int y) { cpp_point *p = new cpp_point; p->x = x; p->y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void c_reverse_array(int *arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void cpp_reverse_vector(std::vector<int> &arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int c_factorial(int n) { if (n == 0) return 1; else return n * c_factorial(n - 1); }", "target_code": "int cpp_factorial(int n) { if (n == 0) return 1; else return n * cpp_factorial(n - 1); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint c_function2(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid* c_function3(int size) {\n    return malloc(size);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint cpp_function2(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int x : vec) {\n        sum += x;\n    }\n    return sum;\n}\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid* cpp_function3(int size) {\n    return new char[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* c_function4(int value) {\n    int* ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}\n\nvoid c_function5(struct c_struct* s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int value) {\n    int* ptr = new int;\n    *ptr = value;\n    return ptr;\n}\n\nvoid cpp_function5(const cpp_struct& s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function6(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "#include <iostream>\n\nvoid cpp_function6(const std::vector<int>& vec) {\n    for (int x : vec) {\n        std::cout << x << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint c_function7(int a, int b) {\n    return a + b;\n}", "target_code": "#include <iostream>\n\nint cpp_function7(int a, int b) {\n    return a + b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function8(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nvoid cpp_function8(void* ptr) {\n    delete ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "class Point { public: int x; int y; void set_point(int x, int y) { this->x = x; this->y = y; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void destroy_array(int* arr) { free(arr); }", "target_code": "std::vector<int>* create_vector(int size) { return new std::vector<int>(size); } void destroy_vector(std::vector<int>* vec) { delete vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int multiply(int a, int b) { return a * b; }", "target_code": "int multiply(const int& a, const int& b) { return a * b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void print_employee_info(const Employee* emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "struct Employee { int id; std::string name; }; void print_employee_info(const Employee& emp) { std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    vec[0] = 1;\n    vec[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int result = square(5);\n    printf(\"Square: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int result = square(5);\n    std::cout << \"Square: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int>& src, std::vector<int>& dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest;\n    copy_vector(src, dest);\n    for (int i = 0; i < dest.size(); i++) {\n        std::cout << dest[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *num) { *num = *num + 1; }", "target_code": "void increment(int &num) { num = num + 1; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int total = 0; for (int i = 0; i < size; i++) { total += arr[i]; } return total; }", "target_code": "int sum(const std::vector<int> &arr) { int total = 0; for (int num : arr) { total += num; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n    node->data = data;\n    node->next = NULL;\n    return node;\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *node = new Node;\n    node->data = data;\n    node->next = nullptr;\n    return node;\n}\n\nint main() {\n    Node *node = create_node(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copy_array(const int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid squareArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n\n    squareArray(arr, size);\n\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareArray(std::vector<int>& v) {\n    for(auto& num : v) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n\n    squareArray(v);\n\n    for(auto num : v) {\n        std::cout << num << ' ';\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(p);\n    free(p);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int x, int y) : x(x), y(y) {}\n\n    void printPoint() {\n        std::cout << '(' << x << ',' << y << ')' << std::endl;\n    }\n};\n\nint main() {\n    Point* p = new Point(3, 4);\n    p->printPoint();\n    delete p;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapValues(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n\n    swapValues(&x, &y);\n\n    printf(\"x: %d, y: %d\\n\", x, y);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapValues(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n\n    swapValues(x, y);\n\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = createIntArray(size);\n\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    std::vector<int> v;\n    for(int i = 0; i < size; i++) {\n        v.push_back(i + 1);\n    }\n    return v;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> v = createIntArray(size);\n\n    for(auto num : v) {\n        std::cout << num << ' ';\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid areaRectangle(Rectangle* rect) {\n    int area = rect->width * rect->height;\n    printf(\"Area: %d\\n\", area);\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    areaRectangle(&r);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    void areaRectangle() {\n        int area = width * height;\n        std::cout << \"Area: \" << area << std::endl;\n    }\n};\n\nint main() {\n    Rectangle r;\n    r.width = 3;\n    r.height = 4;\n    r.areaRectangle();\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_pointers(int *a, int *b) {\n    *a = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3;\n    c_function_with_pointers(&x, &y);\n    printf(\"%d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_with_references(int &a, int &b) {\n    a = a + b;\n}\n\nint main() {\n    int x = 5, y = 3;\n    cpp_function_with_references(x, y);\n    std::cout << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_arrays(int a[], int size) {\n    for(int i = 0; i < size; i++) {\n        a[i] = i;\n    }\n}\n\nint main() {\n    int arr[5];\n    c_function_with_arrays(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_with_vectors(std::vector<int> &v) {\n    for(int i = 0; i < v.size(); i++) {\n        v[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    cpp_function_with_vectors(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint *c_function_with_malloc() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    return p;\n}\n\nint main() {\n    Point *ptr = c_function_with_malloc();\n    printf(\"%d %d\\n\", ptr->x, ptr->y);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* cpp_function_with_new() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n    return p;\n}\n\nint main() {\n    Point* ptr = cpp_function_with_new();\n    std::cout << ptr->x << \" \" << ptr->y << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int data;\n} Node;\n\nvoid c_function_with_struct(Node **head, int value) {\n    Node *new_node = (Node *)malloc(sizeof(Node));\n    new_node->data = value;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    Node *head = NULL;\n    c_function_with_struct(&head, 5);\n    c_function_with_struct(&head, 10);\n\n    Node *temp = head;\n    while(temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid cpp_function_with_class(Node* &head, int value) {\n    Node* new_node = new Node;\n    new_node->data = value;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node* head = nullptr;\n    cpp_function_with_class(head, 5);\n    cpp_function_with_class(head, 10);\n\n    Node* temp = head;\n    while(temp != nullptr) {\n        std::cout << temp->data << \" \";\n        temp = temp->next;\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int *arr1, int *arr2, int size) {\n    for(int i = 0; i < size; i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5] = {5, 4, 3, 2, 1};\n    addArrays(arr1, arr2, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(std::vector<int> &vec1, std::vector<int> &vec2) {\n    for(int i = 0; i < vec1.size(); i++) {\n        vec1[i] += vec2[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    addVectors(vec1, vec2);\n    for(int i = 0; i < vec1.size(); i++) {\n        std::cout << vec1[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = 5;\n    p->y = 10;\n    movePoint(p, 3, 2);\n    printf(\"%d %d\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    movePoint(p, 3, 2);\n    std::cout << p.x << \" \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for(int i = vec.size()-1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyMatrix(int **matrix, int rows, int cols, int scalar) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int **matrix = (int**)malloc(2 * sizeof(int*));\n    for(int i = 0; i < 2; i++) {\n        matrix[i] = (int*)malloc(3 * sizeof(int));\n    }\n    matrix[0][0] = 1;\n    matrix[0][1] = 2;\n    matrix[0][2] = 3;\n    matrix[1][0] = 4;\n    matrix[1][1] = 5;\n    matrix[1][2] = 6;\n    multiplyMatrix(matrix, 2, 3, 2);\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 3; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for(int i = 0; i < 2; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(std::vector<std::vector<int>> &matrix, int scalar) {\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}};\n    multiplyMatrix(matrix, 2);\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swapValues(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapValues(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapValues(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapValues(x, y);\n    std::cout << x << \" \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *array = create_array(5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    int *arr = new int[size];\n    return arr;\n}\n\nint main() {\n    int *array = create_array(5);\n    delete[] array;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum(int *arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &arr) {\n    int total = 0;\n    for (int num : arr) {\n        total += num;\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insert_node(struct Node **head, int data) {\n    struct Node *new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct Node *head = NULL;\n    insert_node(&head, 5);\n    insert_node(&head, 10);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insert_node(Node* &head, int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node *head = nullptr;\n    insert_node(head, 5);\n    insert_node(head, 10);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - 1 - i];\n        arr[arr.size() - 1 - i] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node *node1 = (struct Node *)malloc(sizeof(struct Node));\n    struct Node *node2 = (struct Node *)malloc(sizeof(struct Node));\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = NULL;\n    print_list(node1);\n    free(node1);\n    free(node2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_list(Node *head) {\n    Node *current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" \";\n        current = current->next;\n    }\n}\n\nint main() {\n    Node *node1 = new Node;\n    Node *node2 = new Node;\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = nullptr;\n    print_list(node1);\n    delete node1;\n    delete node2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *array, int size) { int sum = 0; for (int i = 0; i < size; ++i) { sum += *(array + i); } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person; void print_person(const Person *p) { printf(\"ID: %d, Name: %s\\n\", p->id, p->name); }", "target_code": "struct Person { int id; std::string name; }; void print_person(const Person &p) { std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "int *create_array(int size) { return new int[size]; } void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int calculate_distance(const Point *p1, const Point *p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { int x; int y; }; int calculate_distance(const Point &p1, const Point &p2) { return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void fill_array(int *arr, int size, int value) { for (int i = 0; i < size; ++i) { *(arr + i) = value; } }", "target_code": "int *create_array(int size) { return new int[size]; } void fill_array(int *arr, int size, int value) { std::fill(arr, arr + size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void c_function1(int* ptr) { *ptr = 10; }", "target_code": "void cpp_function1(int& ref) { ref = 10; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void c_function2(int arr[], int size) { for(int i = 0; i < size; i++) arr[i] *= 2; }", "target_code": "void cpp_function2(std::vector<int>& vec) { for(int& num : vec) num *= 2; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point() { Point* p = (Point*)malloc(sizeof(Point)); p->x = 0; p->y = 0; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point() { return new Point{0, 0}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void c_function3(int* array, int size) { for(int i = 0; i < size; i++) array[i] += i; }", "target_code": "void cpp_function3(int* array, int size) { for(int i = 0; i < size; i++) array[i] += i; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int data; } Node; void c_function4(Node* node) { node->data = 5; }", "target_code": "struct Node { int data; }; void cpp_function4(Node& node) { node.data = 5; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    set_point(&p, 3, 4);\n    printf(\"Point coordinates: x=%d, y=%d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 3, 4);\n    std::cout << \"Point coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char *dest, const char *src) {\n    while (*src) {\n        *dest = *src;\n        src++;\n        dest++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str1[20], str2[20] = \"Hello\";\n    copy_string(str1, str2);\n    printf(\"Copied string: %s\\n\", str1);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(std::string &dest, const std::string &src) {\n    dest = src;\n}\n\nint main() {\n    std::string str1, str2 = \"Hello\";\n    copy_string(str1, str2);\n    std::cout << \"Copied string: \" << str1 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* multiply(int *arr, int size, int factor) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * factor;\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *result = multiply(arr, 5, 2);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> multiply(const std::vector<int> &arr, int factor) {\n    std::vector<int> result(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * factor;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    std::vector<int> result = multiply(arr, 2);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int a, int b, int* result) {\n    *result = a + b;\n}\n\nvoid subtract(int a, int b, int* result) {\n    *result = a - b;\n}", "target_code": "#include <iostream>\n\nvoid add(int a, int b, int& result) {\n    result = a + b;\n}\n\nvoid subtract(int a, int b, int& result) {\n    result = a - b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid doubleArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid doubleVector(std::vector<int>& vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\n// No es necesario liberar memoria en C++ usando std::vector"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n\nvoid fillArray(int* arr, int size, int value) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\n// fillArray no es necesario porque std::vector ya inicializa con un valor por defecto"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle* r) {\n    return r->width * r->height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle& r) {\n    return r.width * r.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int *a) {\n    *a = 10;\n}\n\nvoid c_func2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nstruct c_struct {\n    int x;\n};\n\nvoid c_func3(struct c_struct *s) {\n    s->x = 100;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(int &a) {\n    a = 10;\n}\n\nvoid cpp_func2(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nstruct cpp_struct {\n    int x;\n};\n\nvoid cpp_func3(cpp_struct *s) {\n    s->x = 100;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_func4() {\n    int *ptr = (int*)malloc(sizeof(int));\n    *ptr = 20;\n    return ptr;\n}\n\nvoid c_func5() {\n    printf(''Hello from C'');\n}", "target_code": "#include <iostream>\n\nint* cpp_func4() {\n    int *ptr = new int;\n    *ptr = 20;\n    return ptr;\n}\n\nvoid cpp_func5() {\n    std::cout << ''Hello from C++'' << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func6(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 5;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func6(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num += 5;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func7(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid cpp_func7(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_node {\n    int data;\n    struct c_node *next;\n};\n\nvoid c_func8(struct c_node *node) {\n    node->data *= 3;\n}", "target_code": "#include <iostream>\n\nstruct cpp_node {\n    int data;\n    cpp_node *next;\n};\n\nvoid cpp_func8(cpp_node *node) {\n    node->data *= 3;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nusing namespace std;\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    cout << \"x: \" << x << \", y: \" << y << endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createArray(5);\n    deleteArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> createVector(int size) {\n    return vector<int>(size);\n}\n\nint main() {\n    vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\nusing namespace std;\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    cout << \"(\" << p.x << \", \" << p.y << \")\" << endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node *node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->next = NULL;\n    return node;\n}\n\nvoid deleteNode(struct Node *node) {\n    free(node);\n}\n\nint main() {\n    struct Node *n = createNode(10);\n    deleteNode(n);\n    return 0;\n}", "target_code": "#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* createNode(int data) {\n    Node *node = new Node;\n    node->data = data;\n    node->next = nullptr;\n    return node;\n}\n\nint main() {\n    Node *n = createNode(10);\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle rect = {4, 5};\n    int a = area(rect);\n    printf(\"Area: %d\\n\", a);\n    return 0;\n}", "target_code": "#include <iostream>\nusing namespace std;\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    int a = area(rect);\n    cout << \"Area: \" << a << endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sum_array(int *arr, int size, int *result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(array, 5, &result);\n    printf(\"Sum is: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int> &vec, int &result) {\n    result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum is: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *point = create_point(10, 20);\n    printf(\"Point coordinates: %d, %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    Point *p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *point = create_point(10, 20);\n    std::cout << \"Point coordinates: \" << point->x << \", \" << point->y << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int temp;\n    for (int i = 0; i < size / 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    reverse_array(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiply_matrix(int **matrix, int rows, int cols, int scalar) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int **matrix = (int**)malloc(2 * sizeof(int*));\n    for (int i = 0; i < 2; i++) {\n        matrix[i] = (int*)malloc(3 * sizeof(int));\n        for (int j = 0; j < 3; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    multiply_matrix(matrix, 2, 3, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < 2; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_matrix(std::vector<std::vector<int>> &matrix, int scalar) {\n    for (std::vector<int> &row : matrix) {\n        for (int &val : row) {\n            val *= scalar;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{0, 1, 2}, {1, 2, 3}};\n    multiply_matrix(matrix, 2);\n    for (const auto &row : matrix) {\n        for (int val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sort_array(int *arr, int size) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] > arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int array[] = {5, 3, 1, 4, 2};\n    sort_array(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nvoid sort_vector(std::vector<int> &vec) {\n    std::sort(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {5, 3, 1, 4, 2};\n    sort_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_int_ptrs(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int_ptrs(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int_refs(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int_refs(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    int* temp = (int*) malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << '(' << p.x << \", \" << p.y << ')' << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for(int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_area(struct Rectangle* rect) {\n    printf(\"Area: %d\\n\", rect->width * rect->height);\n}\n\nint main() {\n    struct Rectangle r = {4, 5};\n    print_area(&r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_area(const Rectangle& rect) {\n    std::cout << \"Area: \" << rect.width * rect.height << std::endl;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    print_area(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\n#include<stdlib.h>\n\nvoid sum_array(int* array, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += array[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include<iostream>\n#include<vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\n#include<stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(const Point* pt) {\n    printf(\"Point: (%d, %d)\\n\", pt->x, pt->y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include<iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& pt) {\n    std::cout << \"Point: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\n#include<stdlib.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include<iostream>\n#include<string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\n#include<stdlib.h>\n\nvoid double_array(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include<iostream>\n#include<vector>\n\nvoid double_vector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    double_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\n#include<stdlib.h>\n\nvoid allocate_array(int size, int** array) {\n    *array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        (*array)[i] = i;\n    }\n}\n\nint main() {\n    int* arr;\n    allocate_array(5, &arr);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include<iostream>\n\nvoid allocate_vector(int size, std::vector<int>& vec) {\n    vec.resize(size);\n    for (int i = 0; i < size; i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> vec;\n    allocate_vector(5, vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {2, 3};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {2, 3};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid uppercase(char* str) {\n    while (*str) {\n        if (*str >= 'a' && *str <= 'z') {\n            *str = *str - 'a' + 'A';\n        }\n        str++;\n    }\n}\n\nint main() {\n    char str[] = \"hello world\";\n    uppercase(str);\n    printf(\"Uppercase string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid uppercase(std::string& str) {\n    for (char& c : str) {\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        }\n    }\n}\n\nint main() {\n    std::string str = \"hello world\";\n    uppercase(str);\n    std::cout << \"Uppercase string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int x = 24, y = 18;\n    int result = gcd(x, y);\n    printf(\"GCD of %d and %d is %d\\n\", x, y, result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int x = 24, y = 18;\n    int result = gcd(x, y);\n    std::cout << \"GCD of \" << x << \" and \" << y << \" is \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid square_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    square_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_array(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    square_array(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 5;\n    p->y = 10;\n    move_point(p, 2, 3);\n    printf(\"%d %d\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    move_point(p, 2, 3);\n    std::cout << p.x << ' ' << p.y << '\\n';\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copy_array(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copy_array(const int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    const int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << dest[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[size - i - 1] = arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_array(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    print_array(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n    }\n    print_array(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int> &vec) {\n    for(int &num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid setDimensions(Rectangle *rect, int w, int h) {\n    rect->width = w;\n    rect->height = h;\n}\n\nint main() {\n    Rectangle r;\n    setDimensions(&r, 10, 20);\n    printf(\"Rectangle dimensions: %dx%d\\n\", r.width, r.height);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setDimensions(Rectangle &rect, int w, int h) {\n    rect.width = w;\n    rect.height = h;\n}\n\nint main() {\n    Rectangle r;\n    setDimensions(r, 10, 20);\n    std::cout << \"Rectangle dimensions: \" << r.width << \"x\" << r.height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyString(char *dest, const char *src) {\n    while(*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str[20], copy[20];\n    copyString(copy, \"Hello, World!\");\n    printf(\"Copied string: %s\\n\", copy);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copyString(char *dest, const char *src) {\n    while(*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str[20], copy[20];\n    copyString(copy, \"Hello, World!\");\n    std::cout << \"Copied string: \" << copy << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyArray(int* array, int n, int multiplier) {\n    for(int i = 0; i < n; i++) {\n        array[i] *= multiplier;\n    }\n}\n\nint main() {\n    int n = 5;\n    int* array = (int*)malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        array[i] = i + 1;\n    }\n    multiplyArray(array, n, 2);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyVector(std::vector<int>& vec, int multiplier) {\n    for(int& num : vec) {\n        num *= multiplier;\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> vec(n);\n    for(int i = 0; i < n; i++) {\n        vec[i] = i + 1;\n    }\n    multiplyVector(vec, 2);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPerson(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person* p = (struct Person*)malloc(sizeof(struct Person));\n    strcpy(p->name, \"Alice\");\n    p->age = 30;\n    printPerson(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person* p = new Person;\n    p->name = \"Alice\";\n    p->age = 30;\n    printPerson(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* array, int n) {\n    int left = 0;\n    int right = n - 1;\n    while(left < right) {\n        int temp = array[left];\n        array[left] = array[right];\n        array[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    int n = 5;\n    int* array = (int*)malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        array[i] = i + 1;\n    }\n    reverseArray(array, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    int left = 0;\n    int right = vec.size() - 1;\n    while(left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> vec(n);\n    for(int i = 0; i < n; i++) {\n        vec[i] = i + 1;\n    }\n    reverseVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int n) {\n    int* array = (int*)malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        array[i] = i + 1;\n    }\n    return array;\n}\n\nvoid printArray(int* array, int n) {\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n}\n\nint main() {\n    int n = 5;\n    int* array = createArray(n);\n    printArray(array, n);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* createVector(int n) {\n    std::vector<int>* vec = new std::vector<int>(n);\n    for(int i = 0; i < n; i++) {\n        (*vec)[i] = i + 1;\n    }\n    return vec;\n}\n\nvoid printVector(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int>* vec = createVector(n);\n    printVector(*vec);\n    delete vec;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangle(struct Rectangle* r) {\n    printf(\"Width: %d, Height: %d\\n\", r->width, r->height);\n}\n\nint main() {\n    struct Rectangle* r = (struct Rectangle*)malloc(sizeof(struct Rectangle));\n    r->width = 10;\n    r->height = 5;\n    printRectangle(r);\n    free(r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangle(const Rectangle& r) {\n    std::cout << \"Width: \" << r.width << \", Height: \" << r.height << std::endl;\n}\n\nint main() {\n    Rectangle* r = new Rectangle;\n    r->width = 10;\n    r->height = 5;\n    printRectangle(*r);\n    delete r;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nint main() {\n    Person p;\n    p.id = 1;\n    strcpy(p.name, \"John\");\n    printf(\"Person: %d, %s\\n\", p.id, p.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nint main() {\n    Person p;\n    p.id = 1;\n    p.name = \"John\";\n    std::cout << \"Person: \" << p.id << \", \" << p.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\nint* createArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n", "target_code": "#include <iostream>\nclass Rectangle {\npublic:\n    int width;\n    int height;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createIntArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createIntArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    p.age = 25;\n    printf(\"Age: %d\\n\", p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.age = 25;\n    std::cout << \"Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for(int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - 1 - i];\n        str[len - 1 - i] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2;\n    copyVector(arr1, arr2);\n    for(int i = 0; i < arr2.size(); i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int arr[], int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(std::vector<int> &vec) {\n    int sum = 0;\n    for(int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int arr[], int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printVector(const std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* myArray = create_array(5);\n    free_array(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> myVector = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point myPoint = {3, 5};\n    print_point(myPoint);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point myPoint = {3, 5};\n    print_point(myPoint);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int myArray[] = {1, 2, 3, 4, 5};\n    int total = sum_array(myArray, 5);\n    printf(\"Sum of array: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> myVector = {1, 2, 3, 4, 5};\n    int total = sum_vector(myVector);\n    std::cout << \"Sum of vector: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person myPerson = {\"Alice\", 30};\n    print_person(myPerson);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person myPerson = {\"Alice\", 30};\n    print_person(myPerson);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementar_array(int* array, int size) { for(int i=0; i<size; ++i) array[i]++; }", "target_code": "void incrementar_vector(std::vector<int>& vec) { for(int& num : vec) num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x, y; } Punto; void imprimir_punto(Punto* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Punto { int x, y; }; void imprimir_punto(const Punto& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicar_array(int* array, int size) { int* nuevo_array = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; ++i) nuevo_array[i] = array[i] * 2; return nuevo_array; }", "target_code": "std::vector<int> duplicar_vector(const std::vector<int>& vec) { std::vector<int> nuevo_vector; for(int num : vec) nuevo_vector.push_back(num * 2); return nuevo_vector; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char nombre[50]; } Persona; void imprimir_persona(Persona* p) { printf(\"ID: %d, Nombre: %s\\n\", p->id, p->nombre); }", "target_code": "struct Persona { int id; std::string nombre; }; void imprimir_persona(const Persona& p) { std::cout << \"ID: \" << p.id << \", Nombre: \" << p.nombre << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberar_memoria(int* array) { free(array); }", "target_code": "void liberar_memoria(int* array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    int* arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = createArray(size);\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    printf(\"Area of rectangle: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    std::cout << \"Area of rectangle: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int> &vec) { for(const auto &elem : vec) std::cout << elem << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_dynamic_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_dynamic_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void delete_dynamic_array(int *arr) { free(arr); }", "target_code": "void delete_dynamic_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_ints(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_ints(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); } // No es necesario liberar la memoria en C++"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(int* arr, int size) { int max = arr[0]; for(int i = 1; i < size; ++i) { if (arr[i] > max) { max = arr[i]; } } return max; }", "target_code": "int get_max(const std::vector<int>& vec) { int max = vec[0]; for(int num : vec) { if (num > max) { max = num; } } return max; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int> &arr) { for(const int &elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void destroy_array(int *arr) { free(arr); }", "target_code": "void destroy_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArrays(int* arr1, int* arr2, int* result, int size) { for(int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void sumVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) { result.resize(vec1.size()); for(int i = 0; i < vec1.size(); i++) { result[i] = vec1[i] + vec2[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyString(char* dest, const char* src) { while(*src) { *dest = *src; dest++; src++; } *dest = '\\0'; }", "target_code": "void copyString(char* dest, const char* src) { while(*src) { *dest = *src; dest++; src++; } *dest = '\\0'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void printPerson(const Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void printPerson(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int n) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int n) {\n    std::vector<int> vec(n);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculate_area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle r = {5, 10};\n    int area = calculate_area(r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculate_area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = calculate_area(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int sum = sum_vector(vec);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int numero = 5;\n    incrementar(&numero);\n    printf(\"Número incrementado: %d\\n\", numero);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid incrementar(int &num) {\n    num++;\n}\n\nint main() {\n    int numero = 5;\n    incrementar(numero);\n    std::cout << \"Número incrementado: \" << numero << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicar_elementos(int *array, int tam) {\n    for(int i = 0; i < tam; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int arreglo[] = {1, 2, 3, 4, 5};\n    duplicar_elementos(arreglo, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arreglo[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicar_elementos(std::vector<int> &array) {\n    for(int i = 0; i < array.size(); i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> arreglo = {1, 2, 3, 4, 5};\n    duplicar_elementos(arreglo);\n    for(int num : arreglo) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid desplazar(Punto *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Punto punto = {3, 5};\n    desplazar(&punto, 2, -1);\n    printf(\"Punto desplazado: (%d, %d)\\n\", punto.x, punto.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid desplazar(Punto &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Punto punto = {3, 5};\n    desplazar(punto, 2, -1);\n    std::cout << \"Punto desplazado: (\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *crear_arreglo(int tam) {\n    int *array = (int *) malloc(tam * sizeof(int));\n    for(int i = 0; i < tam; i++) {\n        array[i] = i + 1;\n    }\n    return array;\n}\n\nint main() {\n    int *arreglo = crear_arreglo(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arreglo[i]);\n    }\n    printf(\"\\n\");\n    free(arreglo);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *crear_arreglo(int tam) {\n    int *array = new int[tam];\n    for(int i = 0; i < tam; i++) {\n        array[i] = i + 1;\n    }\n    return array;\n}\n\nint main() {\n    int *arreglo = crear_arreglo(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arreglo[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arreglo;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid imprimir_persona(Persona *p) {\n    printf(\"Nombre: %s, Edad: %d\\n\", p->nombre, p->edad);\n}\n\nint main() {\n    Persona persona = {\"Juan\", 30};\n    imprimir_persona(&persona);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid imprimir_persona(const Persona &p) {\n    std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl;\n}\n\nint main() {\n    Persona persona = {\"Juan\", 30};\n    imprimir_persona(persona);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x, y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {1, 2};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x, y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {1, 2};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person *p = (struct Person*)malloc(sizeof(struct Person));\n    p->age = 30;\n    printf(\"Age: %d\\n\", p->age);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person *p = new Person;\n    p->age = 30;\n    std::cout << \"Age: \" << p->age << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumar(int* a, int* b, int* resultado) {\n    *resultado = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, z;\n    sumar(&x, &y, &z);\n    printf(\"La suma es: %d\\n\", z);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sumar(int& a, int& b, int& resultado) {\n    resultado = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, z;\n    sumar(x, y, z);\n    std::cout << \"La suma es: \" << z << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicar_array(int* array, int longitud) {\n    int* nuevo_array = (int*)malloc(longitud * sizeof(int));\n    for (int i = 0; i < longitud; i++) {\n        nuevo_array[i] = array[i] * 2;\n    }\n    return nuevo_array;\n}\n\nint main() {\n    int original[] = {1, 2, 3, 4, 5};\n    int* duplicado = duplicar_array(original, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", duplicado[i]);\n    }\n    free(duplicado);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicar_vector(const std::vector<int>& vector_original) {\n    std::vector<int> nuevo_vector;\n    for (int num : vector_original) {\n        nuevo_vector.push_back(num * 2);\n    }\n    return nuevo_vector;\n}\n\nint main() {\n    std::vector<int> original = {1, 2, 3, 4, 5};\n    std::vector<int> duplicado = duplicar_vector(original);\n    for (int num : duplicado) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(struct Punto punto) {\n    printf(\"(%d, %d)\\n\", punto.x, punto.y);\n}\n\nint main() {\n    struct Punto p = {3, 5};\n    imprimir_punto(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto& punto) {\n    std::cout << \"(\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto p = {3, 5};\n    imprimir_punto(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid invertir_array(int* array, int longitud) {\n    int i = 0, j = longitud - 1;\n    while (i < j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n        i++;\n        j--;\n    }\n}\n\nint main() {\n    int numeros[] = {1, 2, 3, 4, 5};\n    invertir_array(numeros, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid invertir_vector(std::vector<int>& vector) {\n    int i = 0, j = vector.size() - 1;\n    while (i < j) {\n        int temp = vector[i];\n        vector[i] = vector[j];\n        vector[j] = temp;\n        i++;\n        j--;\n    }\n}\n\nint main() {\n    std::vector<int> numeros = {1, 2, 3, 4, 5};\n    invertir_vector(numeros);\n    for (int num : numeros) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Nodo {\n    int dato;\n    struct Nodo* siguiente;\n};\n\nvoid imprimir_lista(struct Nodo* cabeza) {\n    struct Nodo* actual = cabeza;\n    while (actual != NULL) {\n        printf(\"%d -> \", actual->dato);\n        actual = actual->siguiente;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Nodo* n1 = (struct Nodo*)malloc(sizeof(struct Nodo));\n    struct Nodo* n2 = (struct Nodo*)malloc(sizeof(struct Nodo));\n    struct Nodo* n3 = (struct Nodo*)malloc(sizeof(struct Nodo));\n    n1->dato = 1;\n    n2->dato = 2;\n    n3->dato = 3;\n    n1->siguiente = n2;\n    n2->siguiente = n3;\n    n3->siguiente = NULL;\n    imprimir_lista(n1);\n    free(n1);\n    free(n2);\n    free(n3);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Nodo {\n    int dato;\n    Nodo* siguiente;\n};\n\nvoid imprimir_lista(const Nodo* cabeza) {\n    const Nodo* actual = cabeza;\n    while (actual != nullptr) {\n        std::cout << actual->dato << \" -> \";\n        actual = actual->siguiente;\n    }\n    std::cout << \"NULL\" << std::endl;\n}\n\nint main() {\n    Nodo* n1 = new Nodo;\n    Nodo* n2 = new Nodo;\n    Nodo* n3 = new Nodo;\n    n1->dato = 1;\n    n2->dato = 2;\n    n3->dato = 3;\n    n1->siguiente = n2;\n    n2->siguiente = n3;\n    n3->siguiente = nullptr;\n    imprimir_lista(n1);\n    delete n1;\n    delete n2;\n    delete n3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementArray(int* arr, int size) { for(int i = 0; i < size; i++) { arr[i]++; } }", "target_code": "void incrementVector(std::vector<int>& vec) { for(int& num : vec) { num++; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapValues(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapValues(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void deleteIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumVector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_int(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    set_point(&p, 3, 4);\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 3, 4);\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid double_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid double_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    double_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person_info(const Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person_info(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person_info(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person_info(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *myArray = createArray(5);\n    freeArray(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> myVector = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 4};\n    printPoint(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 4};\n    printPoint(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int myArray[5] = {1, 2, 3, 4, 5};\n    addOneToArray(myArray, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", myArray[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addOneToVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] += 1;\n    }\n}\n\nint main() {\n    std::vector<int> myVector = {1, 2, 3, 4, 5};\n    addOneToVector(myVector);\n    for (int i = 0; i < myVector.size(); i++) {\n        std::cout << myVector[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(3, 4);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(3, 4);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sum(int a, int b, int *result) {\n    *result = a + b;\n}\n\nint main() {\n    int a = 5, b = 3, result;\n    sum(a, b, &result);\n    printf(\"Sum is: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sum(int a, int b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int a = 5, b = 3, result;\n    sum(a, b, result);\n    std::cout << \"Sum is: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_array(size);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* create_array(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid free_array(std::vector<int> *arr) {\n    delete arr;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> *arr = create_array(size);\n    free_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson* create_person(int id, const char *name) {\n    Person *p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nvoid free_person(Person *p) {\n    free(p);\n}\n\nint main() {\n    Person *p = create_person(1, \"Alice\");\n    free_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* create_person(int id, const std::string &name) {\n    Person *p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n\nvoid free_person(Person *p) {\n    delete p;\n}\n\nint main() {\n    Person *p = create_person(1, \"Alice\");\n    free_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyArray(int* arr, int n, int scalar) {\n    for (int i = 0; i < n; i++) {\n        arr[i] *= scalar;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    multiplyArray(arr, 5, 2);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyVector(std::vector<int>& vec, int scalar) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= scalar;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    multiplyVector(vec, 2);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int n) {\n    int* arr = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createArray(int n) {\n    int* arr = new int[n];\n    for (int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setDimensions(struct Rectangle* rect, int w, int h) {\n    rect->width = w;\n    rect->height = h;\n}\n\nint main() {\n    struct Rectangle r;\n    setDimensions(&r, 10, 5);\n    printf(\"Width: %d, Height: %d\\n\", r.width, r.height);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setDimensions(Rectangle& rect, int w, int h) {\n    rect.width = w;\n    rect.height = h;\n}\n\nint main() {\n    Rectangle r;\n    setDimensions(r, 10, 5);\n    std::cout << \"Width: \" << r.width << \", Height: \" << r.height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(std::vector<int> &arr) { int sum = 0; for(int i = 0; i < arr.size(); i++) sum += arr[i]; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid squareArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    squareArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    squareVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    p->x = 5;\n    p->y = 10;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\";\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 5;\n    p->y = 10;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyMatrix(int **matrix, int rows, int cols, int scalar) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2;\n    int cols = 2;\n    int **matrix = (int **)malloc(rows * sizeof(int *));\n    for(int i = 0; i < rows; i++) {\n        matrix[i] = (int *)malloc(cols * sizeof(int));\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    multiplyMatrix(matrix, rows, cols, 2);\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for(int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(std::vector<std::vector<int>> &matrix, int scalar) {\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2;\n    int cols = 2;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    multiplyMatrix(matrix, 2);\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << \"\\n\";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint getArea(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle *r = (Rectangle *)malloc(sizeof(Rectangle));\n    r->width = 5;\n    r->height = 10;\n    int area = getArea(r);\n    printf(\"Area: %d\\n\", area);\n    free(r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n\n    int getArea() const {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle *r = new Rectangle;\n    r->width = 5;\n    r->height = 10;\n    int area = r->getArea();\n    std::cout << \"Area: \" << area << std::endl;\n    delete r;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* myArray = create_array(5);\n    free_array(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> myVector = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    snprintf(p.name, sizeof(p.name), \"John Doe\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John Doe\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum_vector(vec);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint create_point(int x, int y) {\n    Point p;\n    p.x = x;\n    p.y = y;\n    return p;\n}\n\nint main() {\n    Point point = create_point(3, 4);\n    printf(\"Point: (%d, %d)\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint create_point(int x, int y) {\n    Point p;\n    p.x = x;\n    p.y = y;\n    return p;\n}\n\nint main() {\n    Point point = create_point(3, 4);\n    std::cout << \"Point: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid printVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* customMalloc(size_t size) {\n    void *ptr = malloc(size);\n    return ptr;\n}\n\nvoid customFree(void *ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nvoid* customNew(size_t size) {\n    void *ptr = new char[size];\n    return ptr;\n}\n\nvoid customDelete(void *ptr) {\n    delete[] reinterpret_cast<char*>(ptr);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid doubleArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid doubleVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nvoid printVector(const std::vector<int> &vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid printPerson(const Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid printPerson(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 5;\n    p.y = 10;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    int result = sum(x, y);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    int result = sum(x, y);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid printVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    return new int[size];\n}\n\nvoid freeArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid printPerson(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "target_code": "#include <iostream>\n\nvoid reverseVector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nvoid c_function2(int* ptr, int size) {\n    for(int i = 0; i < size; i++) {\n        *ptr += i;\n        ptr++;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int>& vec) {\n    for(int i : vec) {\n        std::cout << i << ' ';\n    }\n}\n\nvoid cpp_function2(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        *arr += i;\n        arr++;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid c_function3(struct c_struct* s) {\n    printf(\"%d %s\\n\", s->id, s->name);\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function3(const cpp_struct& s) {\n    std::cout << s.id << ' ' << s.name << '\\n';\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function4(int size) {\n    return malloc(size * sizeof(int));\n}\n\nvoid c_function5(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nvoid cpp_function5(int* ptr) {\n    delete[] ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function6(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nvoid c_function7(int* arr1, int* arr2, int size) {\n    for(int i = 0; i < size; i++) {\n        arr2[i] = arr1[i] + 5;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function6(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i * 2;\n    }\n}\n\nvoid cpp_function7(const std::vector<int>& vec1, std::vector<int>& vec2) {\n    for(int i = 0; i < vec1.size(); i++) {\n        vec2.push_back(vec1[i] + 5);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function8(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i * 3;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function8(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i * 3;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(struct Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    struct Rectangle rect = {4, 5};\n    printf(\"Area: %d\\n\", area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr;\n    arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> arr(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *array, int length) {\n    for (int i = 0; i < length; i++) {\n        array[i] += 1;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    addOneToArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addOneToArray(std::vector<int> &array) {\n    for (int i = 0; i < array.size(); i++) {\n        array[i] += 1;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    addOneToArray(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle rect;\n    rect.length = 5;\n    rect.width = 3;\n    printf(\"Area of rectangle: %d\\n\", area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect;\n    rect.length = 5;\n    rect.width = 3;\n    std::cout << \"Area of rectangle: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nPoint* create_point(int x, int y) {\n    return new Point(x, y);\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    std::cout << \"Point: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\ntemplate <typename T>\nvoid print_vector(const std::vector<T>& vec) {\n    for (const T& elem : vec) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n} Student;\n\nint main() {\n    Student s;\n    s.id = 1;\n    strcpy(s.name, \"Alice\");\n    printf(\"Student ID: %d, Name: %s\\n\", s.id, s.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Student {\npublic:\n    int id;\n    std::string name;\n};\n\nint main() {\n    Student s;\n    s.id = 1;\n    s.name = \"Alice\";\n    std::cout << \"Student ID: \" << s.id << \", Name: \" << s.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nRectangle* create_rectangle(int width, int height) {\n    Rectangle* r = (Rectangle*)malloc(sizeof(Rectangle));\n    r->width = width;\n    r->height = height;\n    return r;\n}\n\nint main() {\n    Rectangle* r = create_rectangle(10, 5);\n    printf(\"Rectangle: width=%d, height=%d\\n\", r->width, r->height);\n    free(r);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <memory>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n    Rectangle(int w, int h) : width(w), height(h) {}\n};\n\nstd::unique_ptr<Rectangle> create_rectangle(int width, int height) {\n    return std::make_unique<Rectangle>(width, height);\n}\n\nint main() {\n    std::unique_ptr<Rectangle> r = create_rectangle(10, 5);\n    std::cout << \"Rectangle: width=\" << r->width << \", height=\" << r->height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\ntemplate <typename T>\nvoid increment_vector(std::vector<T>& vec) {\n    for (T& elem : vec) {\n        elem++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (const int& num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int value;\n    int* ptr = &value;\n    c_function1(ptr);\n    printf(\"C - Value: %d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int value;\n    cpp_function1(value);\n    std::cout << \"C++ - Value: \" << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_function2(arr, size);\n    printf(\"C - Array: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    std::cout << \"C++ - Vector: \";\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point* pt) {\n    pt->x = 5;\n    pt->y = 10;\n}\n\nint main() {\n    Point* pt = (Point*)malloc(sizeof(Point));\n    c_function3(pt);\n    printf(\"C - Point: (%d, %d)\\n\", pt->x, pt->y);\n    free(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point& pt) {\n    pt.x = 5;\n    pt.y = 10;\n}\n\nint main() {\n    Point pt;\n    cpp_function3(pt);\n    std::cout << \"C++ - Point: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_function4(Person* person) {\n    person->id = 1;\n    sprintf(person->name, \"John\");\n}\n\nint main() {\n    Person* person = (Person*)malloc(sizeof(Person));\n    c_function4(person);\n    printf(\"C - Person: ID %d, Name %s\\n\", person->id, person->name);\n    free(person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function4(Person& person) {\n    person.id = 1;\n    person.name = \"John\";\n}\n\nint main() {\n    Person person;\n    cpp_function4(person);\n    std::cout << \"C++ - Person: ID \" << person.id << \", Name \" << person.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function5(int size) {\n    return malloc(size);\n}\n\nvoid c_function5_free(void* ptr) {\n    free(ptr);\n}\n\nint main() {\n    int* ptr = (int*)c_function5(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"C - %d \", ptr[i]);\n    }\n    printf(\"\\n\");\n    c_function5_free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function5(int size) {\n    return new int[size];\n}\n\nvoid cpp_function5_free(int* ptr) {\n    delete[] ptr;\n}\n\nint main() {\n    int* ptr = cpp_function5(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << \"C++ - \" << ptr[i] << \" \";\n    }\n    std::cout << std::endl;\n    cpp_function5_free(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_function_swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_function_swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_function_create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid c_function_fill_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nint main() {\n    int *array = c_function_create_array(5);\n    c_function_fill_array(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* cpp_function_create_vector(int size) {\n    std::vector<int> *vec = new std::vector<int>(size);\n    return vec;\n}\n\nvoid cpp_function_fill_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i * 2;\n    }\n}\n\nint main() {\n    std::vector<int> *vector = cpp_function_create_vector(5);\n    cpp_function_fill_vector(*vector);\n    for (int i = 0; i < vector->size(); i++) {\n        std::cout << (*vector)[i] << \" \";\n    }\n    delete vector;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct c_struct_point {\n    int x;\n    int y;\n};\n\nvoid c_function_print_point(struct c_struct_point *point) {\n    printf(\"Point coordinates: (%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    struct c_struct_point point = {3, 5};\n    c_function_print_point(&point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct_point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_print_point(const cpp_struct_point &point) {\n    std::cout << \"Point coordinates: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    cpp_struct_point point = {3, 5};\n    cpp_function_print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct c_struct_person {\n    char name[20];\n    int age;\n};\n\nvoid c_function_print_person(struct c_struct_person *person) {\n    printf(\"Person: %s, Age: %d\\n\", person->name, person->age);\n}\n\nint main() {\n    struct c_struct_person person = {\"Alice\", 30};\n    c_function_print_person(&person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct_person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_function_print_person(const cpp_struct_person &person) {\n    std::cout << \"Person: \" << person.name << \", Age: \" << person.age << std::endl;\n}\n\nint main() {\n    cpp_struct_person person = {\"Alice\", 30};\n    cpp_function_print_person(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint c_function_add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = c_function_add(3, 5);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint cpp_function_add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = cpp_function_add(3, 5);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n    return newNode;\n}\n\nvoid freeNode(struct Node* node) {\n    free(node);\n}\n\nint main() {\n    struct Node* n = createNode(10);\n    freeNode(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n    Node(int value) : data(value), next(nullptr) {}\n};\n\nint main() {\n    Node* n = new Node(10);\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { temp[i] = arr[size - 1 - i]; } for(int i = 0; i < size; i++) { arr[i] = temp[i]; } free(temp); }", "target_code": "void reverseArray(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point{x, y}; } void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiplyMatrix(int** mat1, int** mat2, int** result, int rows1, int cols1, int cols2) { for(int i = 0; i < rows1; i++) { for(int j = 0; j < cols2; j++) { result[i][j] = 0; for(int k = 0; k < cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }", "target_code": "void multiplyMatrix(const std::vector<std::vector<int>>& mat1, const std::vector<std::vector<int>>& mat2, std::vector<std::vector<int>>& result) { int rows1 = mat1.size(), cols1 = mat1[0].size(), cols2 = mat2[0].size(); result.resize(rows1, std::vector<int>(cols2, 0)); for(int i = 0; i < rows1; i++) { for(int j = 0; j < cols2; j++) { for(int k = 0; k < cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void insertionSort(int* arr, int size) { for(int i = 1; i < size; i++) { int key = arr[i]; int j = i - 1; while(j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } }", "target_code": "void insertionSort(std::vector<int>& arr) { for(int i = 1; i < arr.size(); i++) { int key = arr[i]; int j = i - 1; while(j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    while (head != NULL) {\n        printf(\"%d\\n\", head->data);\n        head = head->next;\n    }\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = NULL;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_list(const Node *head) {\n    while (head != nullptr) {\n        std::cout << head->data << std::endl;\n        head = head->next;\n    }\n}\n\nint main() {\n    Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = nullptr;\n    print_list(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    set_point(&p, 1, 2);\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 1, 2);\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* double_array(int *arr, int size) {\n    int *new_arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *new_arr = double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> double_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    std::vector<int> new_arr = double_array(arr);\n    for (int i = 0; i < new_arr.size(); i++) {\n        std::cout << new_arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumar(int a, int b, int *resultado) {\n    *resultado = a + b;\n}\n\nint main() {\n    int a = 5, b = 3, resultado;\n    sumar(a, b, &resultado);\n    printf(\"La suma es: %d\\n\", resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sumar(int a, int b, int &resultado) {\n    resultado = a + b;\n}\n\nint main() {\n    int a = 5, b = 3, resultado;\n    sumar(a, b, resultado);\n    std::cout << \"La suma es: \" << resultado << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid duplicarArray(int *array, int n) {\n    for(int i = 0; i < n; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int n = 5;\n    int *array = (int *) malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        array[i] = i + 1;\n    }\n    duplicarArray(array, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicarVector(std::vector<int> &vec) {\n    for(int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    duplicarVector(vec);\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimirPunto(struct Punto p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Punto punto = {3, 5};\n    imprimirPunto(punto);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimirPunto(const Punto &p) {\n    std::cout << '(' << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto punto = {3, 5};\n    imprimirPunto(punto);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *crearArray(int n) {\n    int *array = (int *) malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        array[i] = i * 2;\n    }\n    return array;\n}\n\nint main() {\n    int n = 5;\n    int *array = crearArray(n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> crearVector(int n) {\n    std::vector<int> vec;\n    for(int i = 0; i < n; i++) {\n        vec.push_back(i * 2);\n    }\n    return vec;\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> vec = crearVector(n);\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(x, y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;\n\nvoid print_person(const Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}", "target_code": "struct Person {\n    int id;\n    std::string name;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}", "target_code": "std::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int cube(int num) {\n    return num * num * num;\n}", "target_code": "int cube(const int &num) {\n    return num * num * num;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_numbers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap_numbers(int &a, int &b) {\n    std::swap(a, b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\nint main() {\n\tint x = 5, y = 10;\n\tswap(&x, &y);\n\tprintf(\"x: %d, y: %d\\n\", x, y);\n\treturn 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n\tint temp = a;\n\ta = b;\n\tb = temp;\n}\n\nint main() {\n\tint x = 5, y = 10;\n\tswap(x, y);\n\tstd::cout << \"x: \" << x << \", y: \" << y << std::endl;\n\treturn 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n\tint *arr = (int *)malloc(size * sizeof(int));\n\treturn arr;\n}\n\nint main() {\n\tint *myArray = createArray(5);\n\tfree(myArray);\n\treturn 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n\tstd::vector<int> arr(size);\n\treturn arr;\n}\n\nint main() {\n\tstd::vector<int> myArray = createArray(5);\n\treturn 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n\tint x;\n\tint y;\n};\n\nvoid printPoint(struct Point p) {\n\tprintf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n\tstruct Point p;\n\tp.x = 3;\n\tp.y = 5;\n\tprintPoint(p);\n\treturn 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n\tint x;\n\tint y;\n};\n\nvoid printPoint(const Point &p) {\n\tstd::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n\tPoint p;\n\tp.x = 3;\n\tp.y = 5;\n\tprintPoint(p);\n\treturn 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n\tint data;\n\tstruct Node *next;\n};\n\nint main() {\n\tstruct Node n1, n2;\n\tn1.data = 5;\n\tn2.data = 10;\n\tn1.next = &n2;\n\treturn 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n\tint data;\n\tNode *next;\n};\n\nint main() {\n\tNode n1, n2;\n\tn1.data = 5;\n\tn2.data = 10;\n\tn1.next = &n2;\n\treturn 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyMatrix(int **mat1, int **mat2, int **result, int rows, int cols) {\n\tfor(int i = 0; i < rows; i++) {\n\t\tfor(int j = 0; j < cols; j++) {\n\t\t\tresult[i][j] = 0;\n\t\t\tfor(int k = 0; k < cols; k++) {\n\t\t\t\tresult[i][j] += mat1[i][k] * mat2[k][j];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint rows = 2, cols = 2;\n\tint **mat1, **mat2, **result;\n\tmat1 = (int **)malloc(rows * sizeof(int *));\n\tmat2 = (int **)malloc(rows * sizeof(int *));\n\tresult = (int **)malloc(rows * sizeof(int *));\n\n\tfor(int i = 0; i < rows; i++) {\n\t\tmat1[i] = (int *)malloc(cols * sizeof(int));\n\t\tmat2[i] = (int *)malloc(cols * sizeof(int));\n\t\tresult[i] = (int *)malloc(cols * sizeof(int));\n\t}\n\n\tmultiplyMatrix(mat1, mat2, result, rows, cols);\n\n\tfor(int i = 0; i < rows; i++) {\n\t\tfree(mat1[i]);\n\t\tfree(mat2[i]);\n\t\tfree(result[i]);\n\t}\n\n\tfree(mat1);\n\tfree(mat2);\n\tfree(result);\n\n\treturn 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(std::vector<std::vector<int>> &mat1, std::vector<std::vector<int>> &mat2, std::vector<std::vector<int>> &result) {\n\tint rows = mat1.size();\n\tint cols = mat2[0].size();\n\n\tresult.resize(rows, std::vector<int>(cols, 0));\n\n\tfor(int i = 0; i < rows; i++) {\n\t\tfor(int j = 0; j < cols; j++) {\n\t\t\tfor(int k = 0; k < mat1[0].size(); k++) {\n\t\t\t\tresult[i][j] += mat1[i][k] * mat2[k][j];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tstd::vector<std::vector<int>> mat1 = {{1, 2}, {3, 4}};\n\tstd::vector<std::vector<int>> mat2 = {{1, 0}, {0, 1}};\n\tstd::vector<std::vector<int>> result;\n\n\tmultiplyMatrix(mat1, mat2, result);\n\n\treturn 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num = 0;\n    c_function1(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int num = 0;\n    cpp_function1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->x = 10;\n    s->y = 20;\n}\n\nint main() {\n    struct c_struct obj;\n    c_function3(&obj);\n    printf(\"%d %d\\n\", obj.x, obj.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.x = 10;\n    s.y = 20;\n}\n\nint main() {\n    cpp_struct obj;\n    cpp_function3(obj);\n    std::cout << obj.x << \" \" << obj.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int **ptr) {\n    *ptr = (int *)malloc(sizeof(int));\n    **ptr = 50;\n}\n\nint main() {\n    int *num;\n    c_function4(&num);\n    printf(\"%d\\n\", *num);\n    free(num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function4(int *&ptr) {\n    ptr = new int;\n    *ptr = 50;\n}\n\nint main() {\n    int *num;\n    cpp_function4(num);\n    std::cout << *num << std::endl;\n    delete num;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    c_function5(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    cpp_function5(vec);\n    for (int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addArray(int *arr, int n, int val) { for (int i = 0; i < n; i++) arr[i] += val; }", "target_code": "void addVector(std::vector<int> &vec, int val) { for (int &num : vec) num += val; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void movePoint(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void movePoint(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int n) { return (int *)malloc(n * sizeof(int)); } void freeArray(int *arr) { free(arr); }", "target_code": "std::vector<int> createVector(int n) { return std::vector<int>(n); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printMessage(const char *message) { printf(\"%s\\n\", message); }", "target_code": "void printMessage(const std::string &message) { std::cout << message << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int getArea(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 5;\n    p.y = 10;\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementArray(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    incrementArray(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* copyArray(int *arr, int size) {\n    int *copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *arrCopy = copyArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arrCopy[i]);\n    }\n    printf(\"\\n\");\n    free(arrCopy);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> copyArray(std::vector<int> &arr) {\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    std::vector<int> arrCopy = copyArray(arr);\n    for (int num : arrCopy) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementar(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 10;\n    incrementar(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid incrementar(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 10;\n    incrementar(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicar_array(int *arr, int size) {\n    int *new_arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *new_arr = duplicar_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicar_vector(const std::vector<int> &vec) {\n    std::vector<int> new_vec;\n    for(int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    return new_vec;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::vector<int> new_vec = duplicar_vector(vec);\n    for(int num : new_vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid imprimir_persona(struct Persona p) {\n    printf(\"Nombre: %s, Edad: %d\\n\", p.nombre, p.edad);\n}\n\nint main() {\n    struct Persona p = {\"Juan\", 30};\n    imprimir_persona(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid imprimir_persona(const Persona &p) {\n    std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl;\n}\n\nint main() {\n    Persona p = {\"Juan\", 30};\n    imprimir_persona(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* crear_arreglo(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid liberar_arreglo(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = crear_arreglo(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    liberar_arreglo(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* crear_vector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid liberar_vector(std::vector<int> *vec) {\n    delete vec;\n}\n\nint main() {\n    std::vector<int> *vec = crear_vector(5);\n    for(int i = 0; i < 5; i++) {\n        (*vec)[i] = i + 1;\n    }\n    for(int num : *vec) {\n        std::cout << num << \" \";\n    }\n    liberar_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid intercambiar(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_1(int *a) {\n    *a = 10;\n}\n\nint main() {\n    int x = 0;\n    c_function_1(&x);\n    printf(\"%d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_1(int &a) {\n    a = 10;\n}\n\nint main() {\n    int x = 0;\n    cpp_function_1(x);\n    std::cout << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_2(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int n = 5;\n    int *arr = (int *)malloc(n * sizeof(int));\n    c_function_2(arr, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_2(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> arr(n);\n    cpp_function_2(arr);\n    for(int i = 0; i < n; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function_3(Point *p) {\n    p->x = 1;\n    p->y = 2;\n}\n\nint main() {\n    Point *point = (Point *)malloc(sizeof(Point));\n    c_function_3(point);\n    printf(\"%d %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_3(Point &p) {\n    p.x = 1;\n    p.y = 2;\n}\n\nint main() {\n    Point point;\n    cpp_function_3(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function_4(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point *point = (Point *)malloc(sizeof(Point));\n    c_function_4(point, 3, 4);\n    printf(\"%d %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_4(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point point;\n    cpp_function_4(point, 3, 4);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_5(int **matrix, int rows, int cols) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n}\n\nint main() {\n    int rows = 2, cols = 3;\n    int **matrix = (int **)malloc(rows * sizeof(int *));\n    for(int i = 0; i < rows; i++) {\n        matrix[i] = (int *)malloc(cols * sizeof(int));\n    }\n    c_function_5(matrix, rows, cols);\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for(int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_5(std::vector<std::vector<int>> &matrix) {\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[0].size(); j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n}\n\nint main() {\n    int rows = 2, cols = 3;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    cpp_function_5(matrix);\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\n// C++\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// C\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// C++\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\n// C++\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// C\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    freeIntArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// C++\nstd::vector<int>* createIntArray(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid freeIntArray(std::vector<int>* arr) {\n    delete arr;\n}\n\nint main() {\n    std::vector<int>* arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        (*arr)[i] = i;\n    }\n    freeIntArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\nvoid printArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// C++\nvoid printArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    printArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPerson(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    printPerson(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    printPerson(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    reverseArray(arr, size);\n\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n\n    reverseVector(vec);\n\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << '(' << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for(int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printArray(arr, size);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumarArrays(int *a, int *b, int *c, int size) { for(int i = 0; i < size; i++) { c[i] = a[i] + b[i]; } }", "target_code": "void sumarArrays(int* a, int* b, int* c, int size) { for(int i = 0; i < size; i++) { c[i] = a[i] + b[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Persona { char nombre[50]; int edad; }; void imprimirPersona(struct Persona *p) { printf(\"%s tiene %d años\\n\", p->nombre, p->edad); }", "target_code": "struct Persona { std::string nombre; int edad; }; void imprimirPersona(const Persona& p) { std::cout << p.nombre << \" tiene \" << p.edad << \" años\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicarArray(int *arr, int size) { int *newArr = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { newArr[i] = 2 * arr[i]; } return newArr; }", "target_code": "std::vector<int> duplicarArray(const std::vector<int>& arr) { std::vector<int> newArr; for(int i = 0; i < arr.size(); i++) { newArr.push_back(2 * arr[i]); } return newArr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void* allocateIntArray(int size) { return malloc(size * sizeof(int)); } void freeIntArray(int *arr) { free(arr); }", "target_code": "int* allocateIntArray(int size) { return new int[size]; } void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int* arr, int size) { for(int i=0, j=size-1; i<j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }", "target_code": "void reverse(std::vector<int>& arr) { int size = arr.size(); for(int i=0, j=size-1; i<j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroy_point(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; } void destroy_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiply_matrix(int** A, int** B, int** result, int m, int n, int p) { for(int i=0; i<m; i++) { for(int j=0; j<p; j++) { result[i][j] = 0; for(int k=0; k<n; k++) { result[i][j] += A[i][k] * B[k][j]; } } } }", "target_code": "void multiply_matrix(std::vector<std::vector<int>>& A, std::vector<std::vector<int>>& B, std::vector<std::vector<int>>& result) { int m = A.size(); int n = A[0].size(); int p = B[0].size(); for(int i=0; i<m; i++) { for(int j=0; j<p; j++) { result[i][j] = 0; for(int k=0; k<n; k++) { result[i][j] += A[i][k] * B[k][j]; } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* merge_sorted_arrays(int* arr1, int size1, int* arr2, int size2) { int* result = (int*)malloc((size1+size2) * sizeof(int)); int i=0, j=0, k=0; while(i < size1 && j < size2) { if(arr1[i] < arr2[j]) result[k++] = arr1[i++]; else result[k++] = arr2[j++]; } while(i < size1) result[k++] = arr1[i++]; while(j < size2) result[k++] = arr2[j++]; return result; }", "target_code": "std::vector<int> merge_sorted_vectors(std::vector<int>& vec1, std::vector<int>& vec2) { std::vector<int> result; int i=0, j=0; while(i < vec1.size() && j < vec2.size()) { if(vec1[i] < vec2[j]) result.push_back(vec1[i++]); else result.push_back(vec2[j++]); } while(i < vec1.size()) result.push_back(vec1[i++]; while(j < vec2.size()) result.push_back(vec2[j++]); return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid insertNode(struct Node** head, int data) {\n    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct Node* head = NULL;\n    insertNode(&head, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid insertNode(Node*& head, int data) {\n    Node* new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node* head = nullptr;\n    insertNode(head, 5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int arr[], int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& vec) {\n    int total = 0;\n    for (int num : vec) {\n        total += num;\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum(vec);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    printf(\"Sum is %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 5);\n    std::cout << \"Sum is \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int n) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createArray(int n) {\n    return new int[n];\n}\n\nint main() {\n    int *arr = createArray(5);\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nint main() {\n    struct Node *n = (struct Node *)malloc(sizeof(struct Node));\n    n->data = 5;\n    n->next = NULL;\n    free(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nint main() {\n    Node *n = new Node;\n    n->data = 5;\n    n->next = nullptr;\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverseArray(int *arr, int size) {\n    int left = 0, right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverseVector(std::vector<int> &vec) {\n    int left = 0, right = vec.size() - 1;\n    while (left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\ntypedef struct {\n    int id;\n    char name[50];\n} Person;\nint main() {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = 1;\n    strcpy(p->name, \"Alice\");\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\nclass Person {\npublic:\n    int id;\n    std::string name;\n};\nint main() {\n    Person *p = new Person;\n    p->id = 1;\n    p->name = \"Alice\";\n    std::cout << \"ID: \" << p->id << \", Name: \" << p->name << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\nint main() {\n    Point p;\n    p.x = 1;\n    p.y = 2;\n    movePoint(&p, 3, 4);\n    printf(\"New position: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    void move(int dx, int dy) {\n        x += dx;\n        y += dy;\n    }\n};\nint main() {\n    Point p;\n    p.x = 1;\n    p.y = 2;\n    p.move(3, 4);\n    std::cout << \"New position: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    printArray(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid printVector(const std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    std::cout << std::endl;\n}\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n    }\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_with_pointers(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_with_references(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { int *start = arr; int *end = arr + size - 1; while (start < end) { int temp = *start; *start = *end; *end = temp; start++; end--; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point p) { printf(\"(%d, %d)\\n\", p.x, p.y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_dynamic_array(int size) { return (int *) malloc(size * sizeof(int)); } void free_dynamic_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_dynamic_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; void update_student_name(Student *s, const char *new_name) { strcpy(s->name, new_name); }", "target_code": "struct Student { int id; std::string name; }; void update_student_name(Student &s, const std::string &new_name) { s.name = new_name; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "void swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\n", "target_code": "void reverse_array(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size()/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size()-1-i];\n        arr[arr.size()-1-i] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nint sum_points(Point p1, Point p2) {\n    return p1.x + p2.y;\n}\n", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nint sum_points(const Point &p1, const Point &p2) {\n    return p1.x + p2.y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n", "target_code": "int *create_array(int size) {\n    return new int[size];\n}\n\nvoid delete_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    arr[0] = 1;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    vec[0] = 1;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[3] = {2, 3, 4};\n    square_array(arr, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {2, 3, 4};\n    square_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str[10];\n    copy_string(str, \"Hello\");\n    printf(\"Copied string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(std::string& dest, const std::string& src) {\n    dest = src;\n}\n\nint main() {\n    std::string str;\n    copy_string(str, \"Hello\");\n    std::cout << \"Copied string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swapPointers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del intercambio: x=%d, y=%d\\n\", x, y);\n    swapPointers(&x, &y);\n    printf(\"Después del intercambio: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapPointers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    swapPointers(x, y);\n    std::cout << \"Después del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point *p = (struct Point *)malloc(sizeof(struct Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr1) / sizeof(arr1[0]);\n    int *arr2 = (int *)malloc(size * sizeof(int));\n    copyArray(arr1, arr2, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    free(arr2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2;\n    copyVector(vec1, vec2);\n    for(int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid printLinkedList(struct Node *head) {\n    struct Node *current = head;\n    while(current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node *n1 = (struct Node *)malloc(sizeof(struct Node));\n    struct Node *n2 = (struct Node *)malloc(sizeof(struct Node));\n    struct Node *n3 = (struct Node *)malloc(sizeof(struct Node));\n    n1->data = 1;\n    n1->next = n2;\n    n2->data = 2;\n    n2->next = n3;\n    n3->data = 3;\n    n3->next = NULL;\n    printLinkedList(n1);\n    free(n1);\n    free(n2);\n    free(n3);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Node {\npublic:\n    int data;\n    Node *next;\n    Node(int d) : data(d), next(nullptr) {}\n};\n\nvoid printLinkedList(Node *head) {\n    Node *current = head;\n    while(current != nullptr) {\n        std::cout << current->data << \" \";\n        current = current->next;\n    }\n}\n\nint main() {\n    Node *n1 = new Node(1);\n    Node *n2 = new Node(2);\n    Node *n3 = new Node(3);\n    n1->next = n2;\n    n2->next = n3;\n    printLinkedList(n1);\n    delete n1;\n    delete n2;\n    delete n3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapInt(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInt(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInt(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInt(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int i, j;\n    for (i = 0, j = size - 1; i < j; i++, j--) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0, j = vec.size() - 1; i < j; i++, j--) {\n        int temp = vec[i];\n        vec[i] = vec[j];\n        vec[j] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* point = createPoint(3, 7);\n    printf(\"Point: (%d, %d)\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* point = createPoint(3, 7);\n    std::cout << \"Point: (\" << point->x << \", \" << point->y << \")\" << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sumArray(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sumVector(vec);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementarC(int *num) {\n    (*num)++;\n}\n\nvoid duplicarC(int *num) {\n    *num *= 2;\n}", "target_code": "#include <iostream>\n\nvoid incrementarCpp(int &num) {\n    num++;\n}\n\nvoid duplicarCpp(int &num) {\n    num *= 2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *crearArrayC(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid liberarArrayC(int *array) {\n    free(array);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> crearVectorCpp(int size) {\n    return std::vector<int>(size);\n}\n\nvoid liberarVectorCpp(std::vector<int> &vec) {\n    vec.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct PuntoC {\n    int x;\n    int y;\n};\n\nvoid moverPuntoC(struct PuntoC *punto, int dx, int dy) {\n    punto->x += dx;\n    punto->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct PuntoCpp {\n    int x;\n    int y;\n};\n\nvoid moverPuntoCpp(PuntoCpp &punto, int dx, int dy) {\n    punto.x += dx;\n    punto.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct RectanguloC {\n    int base;\n    int altura;\n};\n\nint areaRectanguloC(struct RectanguloC *rect) {\n    return rect->base * rect->altura;\n}", "target_code": "#include <iostream>\n\nstruct RectanguloCpp {\n    int base;\n    int altura;\n};\n\nint areaRectanguloCpp(RectanguloCpp &rect) {\n    return rect.base * rect.altura;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *crearEnteroC() {\n    int *num = (int *)malloc(sizeof(int));\n    *num = 0;\n    return num;\n}\n\nvoid liberarEnteroC(int *num) {\n    free(num);\n}", "target_code": "#include <iostream>\n\nint *crearEnteroCpp() {\n    int *num = new int;\n    *num = 0;\n    return num;\n}\n\nvoid liberarEnteroCpp(int *num) {\n    delete num;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *myArray = createArray(size);\n    for (int i = 0; i < size; i++) {\n        myArray[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", myArray[i]);\n    }\n    deleteArray(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> myArray = createArray(size);\n    for (int i = 0; i < size; i++) {\n        myArray[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        std::cout << myArray[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int size = 3;\n    int myArray[] = {1, 2, 3};\n    addOneToArray(myArray, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", myArray[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addOneToArray(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    std::vector<int> myArray = {1, 2, 3};\n    addOneToArray(myArray);\n    for (int i = 0; i < myArray.size(); i++) {\n        std::cout << myArray[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    printf(\"Area of rectangle: %d\\n\", calculateArea(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    std::cout << \"Area of rectangle: \" << calculateArea(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(struct Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    struct Rectangle rect = {4, 6};\n    int result = area(rect);\n    printf(\"Area: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {4, 6};\n    int result = area(rect);\n    std::cout << \"Area: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void* create_array(int size) {\n    return malloc(size * sizeof(int));\n}", "target_code": "int* create_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) {\n    for (int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "void reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_person(const Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}", "target_code": "void print_person(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *array, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", array[i]); } }", "target_code": "void print_array(const std::vector<int> &array) { for (int num : array) { std::cout << num << \" \"; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *array) { free(array); }", "target_code": "void free_array(int *array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const struct Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle r = {4, 5};\n    printf(\"Area: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArrays(int* arr1, int* arr2, int* result, int size) { for(int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void sumVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) { for(size_t i = 0; i < vec1.size(); i++) { result.push_back(vec1[i] + vec2[i]); } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroyPoint(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point{x, y}; } void destroyPoint(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapInts(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapInts(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(sizeof(int) * size); } void destroyIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void destroyIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void setDimensions(Rectangle* rect, int width, int height) { rect->width = width; rect->height = height; }", "target_code": "struct Rectangle { int width; int height; }; void setDimensions(Rectangle& rect, int width, int height) { rect.width = width; rect.height = height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    print_array(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n    }\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"Point: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nvoid print_employee(const Employee *emp) {\n    printf(\"Employee ID: %d, Name: %s\\n\", emp->id, emp->name);\n}\n\nint main() {\n    Employee e = {1, \"Alice\"};\n    print_employee(&e);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nvoid print_employee(const Employee &emp) {\n    std::cout << \"Employee ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n}\n\nint main() {\n    Employee e = {1, \"Alice\"};\n    print_employee(e);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insertNode(struct Node **head, int data) {\n    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = *head;\n    *head = newNode;\n}\n\nint main() {\n    struct Node *head = NULL;\n    insertNode(&head, 5);\n    insertNode(&head, 10);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insertNode(Node* &head, int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = head;\n    head = newNode;\n}\n\nint main() {\n    Node *head = nullptr;\n    insertNode(head, 5);\n    insertNode(head, 10);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid* allocateMemory(int size) {\n    void *ptr = malloc(size);\n    return ptr;\n}\n\nint main() {\n    int *ptr = (int*)allocateMemory(sizeof(int));\n    *ptr = 10;\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* allocateMemory(int size) {\n    int *ptr = new int[size];\n    return ptr;\n}\n\nint main() {\n    int *ptr = allocateMemory(1);\n    *ptr = 10;\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *p = createPoint(3, 5);\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(3, 5);\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createIntArray(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    int *arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createIntArray(size);\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid printRectangle(Rectangle r) {\n    printf(\"Width: %d, Height: %d\\n\", r.width, r.height);\n}\n\nint main() {\n    Rectangle r = {10, 20};\n    printRectangle(r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangle(const Rectangle &r) {\n    std::cout << \"Width: \" << r.width << \", Height: \" << r.height << std::endl;\n}\n\nint main() {\n    Rectangle r = {10, 20};\n    printRectangle(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_funcion1(int *a) {\n    *a = 10;\n}\n\nint main() {\n    int num = 0;\n    c_funcion1(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_funcion1(int &a) {\n    a = 10;\n}\n\nint main() {\n    int num = 0;\n    cpp_funcion1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_funcion2(int array[], int size) {\n    for(int i = 0; i < size; i++) {\n        array[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = (int*)malloc(size * sizeof(int));\n    c_funcion2(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_funcion2(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec(size);\n    cpp_funcion2(vec);\n    for(int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_funcion3(Point *p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    Point *point = (Point*)malloc(sizeof(Point));\n    c_funcion3(point);\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_funcion3(Point &p) {\n    p.x = 5;\n    p.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_funcion3(point);\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_funcion4(Point *p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    Point *point = (Point*)malloc(sizeof(Point));\n    c_funcion4(point);\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_funcion4(Point *p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    Point *point = new Point;\n    cpp_funcion4(point);\n    std::cout << \"(\" << point->x << \", \" << point->y << \")\" << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_funcion5(Point *p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    Point point;\n    Point *ptr = &point;\n    c_funcion5(ptr);\n    printf(\"(%d, %d)\\n\", ptr->x, ptr->y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_funcion5(Point &p) {\n    p.x = 5;\n    p.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_funcion5(point);\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = create_array(5);\n    free_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    p.age = 25;\n    printf(\"Age: %d\\n\", p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.age = 25;\n    std::cout << \"Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x = %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x = \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    print_array(array, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int>& vec) {\n    for (int i : vec) {\n        std::cout << i << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add_arrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    add_arrays(arr1, arr2, result, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid add_vectors(std::vector<int>& vec1, std::vector<int>& vec2, std::vector<int>& result) {\n    for(size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    add_vectors(vec1, vec2, result);\n    for(size_t i = 0; i < result.size(); i++) {\n        std::cout << result[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = create_point(5, 10);\n    printf(\"Point coordinates: %d, %d\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    return new Point{x, y};\n}\n\nint main() {\n    Point* p = create_point(5, 10);\n    std::cout << \"Point coordinates: \" << p->x << \", \" << p->y << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid print_person(const Person* p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid print_person(const Person& p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int* arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    for(size_t i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(size_t i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p1;\n    p1.age = 25;\n    strcpy(p1.name, \"John\");\n    printf(\"Name: %s, Age: %d\\n\", p1.name, p1.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p1;\n    p1.age = 25;\n    p1.name = \"John\";\n    std::cout << \"Name: \" << p1.name << \", Age: \" << p1.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* doubleArray(int* arr, int size) {\n    int* newArr = (int*)malloc(size * 2 * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    free(arr);\n    return newArr;\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int* newArr = doubleArray(arr, 3);\n    free(newArr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(std::vector<int>& arr) {\n    std::vector<int> newArr(arr.begin(), arr.end());\n    newArr.insert(newArr.end(), arr.begin(), arr.end());\n    return newArr;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3};\n    std::vector<int> newArr = doubleArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid translate(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(&p, 3, 4);\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid translate(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(p, 3, 4);\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}", "target_code": "int* create_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    char name[50];\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "void print_array(const std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) {\n    free(arr);\n}", "target_code": "void free_array(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int* src, int* dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copyArray(src, dest, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int>& src, std::vector<int>& dest) {\n    for(int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest;\n    copyVector(src, dest);\n    for(int i = 0; i < dest.size(); i++) {\n        std::cout << dest[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swapValues(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapValues(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapValues(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapValues(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntVector(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createIntVector(5);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArrays(int* arr1, int* arr2, int* result, int size) { for(int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void sumVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) { result.resize(vec1.size()); for(int i = 0; i < vec1.size(); i++) { result[i] = vec1[i] + vec2[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void setPointCoordinates(Point* pt, int x, int y) { pt->x = x; pt->y = y; }", "target_code": "class Point { public: int x; int y; void setCoordinates(int x, int y) { this->x = x; this->y = y; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person; void printPerson(const Person* p) { printf(\"ID: %d, Name: %s\\n\", p->id, p->name); }", "target_code": "struct Person { int id; std::string name; void printPerson() { std::cout << \"ID: \" << id << \", Name: \" << name << std::endl; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapValues(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapValues(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nPoint* create_point(int x, int y) {\n    return new Point(x, y);\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int left = 0;\n    int right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    int left = 0;\n    int right = vec.size() - 1;\n    while (left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i : vec) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student(Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student(&s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Student {\npublic:\n    int id;\n    std::string name;\n    Student(int id, std::string name) : id(id), name(name) {}\n};\n\nvoid print_student(const Student &s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student s(1, \"Alice\");\n    print_student(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nEmployee* create_employee(int id, const char* name) {\n    Employee* emp = (Employee*)malloc(sizeof(Employee));\n    emp->id = id;\n    strcpy(emp->name, name);\n    return emp;\n}\n\nint main() {\n    Employee* emp = create_employee(101, \"John Doe\");\n    printf(\"Employee ID: %d, Name: %s\\n\", emp->id, emp->name);\n    free(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Employee {\npublic:\n    int id;\n    std::string name;\n    Employee(int id, const std::string& name) : id(id), name(name) {}\n};\n\nEmployee* create_employee(int id, const std::string& name) {\n    return new Employee(id, name);\n}\n\nint main() {\n    Employee* emp = create_employee(101, \"John Doe\");\n    std::cout << \"Employee ID: \" << emp->id << \", Name: \" << emp->name << std::endl;\n    delete emp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addOne(int* num) { (*num)++; }", "target_code": "void addOne(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sumVector(const std::vector<int>& vec) { int sum = 0; for(const auto& num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) { free(arr); }", "target_code": "void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid squareArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    squareArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareVector(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    squareVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint sumCoordinates(const Point* p) {\n    return p->x + p->y;\n}\n\nint main() {\n    Point p = {3, 4};\n    printf(\"Sum of coordinates: %d\\n\", sumCoordinates(&p));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint sumCoordinates(const Point& p) {\n    return p.x + p.y;\n}\n\nint main() {\n    Point p = {3, 4};\n    std::cout << \"Sum of coordinates: \" << sumCoordinates(p) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    printf(\"Area of rectangle: %d\\n\", calculateArea(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area of rectangle: \" << calculateArea(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicateArray(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    duplicateArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicateVector(std::vector<int>& vec) {\n    std::vector<int> temp = vec;\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    duplicateVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumarArrays(int* arr1, int* arr2, int* resultado, int size) {\n    for(int i = 0; i < size; i++) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* resultado = (int*)malloc(size * sizeof(int));\n    sumarArrays(arr1, arr2, resultado, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", resultado[i]);\n    }\n    free(resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(const std::vector<int>& arr1, const std::vector<int>& arr2, std::vector<int>& resultado) {\n    for(int i = 0; i < arr1.size(); i++) {\n        resultado.push_back(arr1[i] + arr2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2 = {4, 5, 6};\n    std::vector<int> resultado;\n    sumarArrays(arr1, arr2, resultado);\n    for(int i = 0; i < resultado.size(); i++) {\n        std::cout << resultado[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int id;\n    char nombre[50];\n} Cliente;\n\nvoid imprimirCliente(Cliente* cliente) {\n    printf(\"ID: %d, Nombre: %s\\n\", cliente->id, cliente->nombre);\n}\n\nint main() {\n    Cliente* cliente = (Cliente*)malloc(sizeof(Cliente));\n    cliente->id = 1;\n    strcpy(cliente->nombre, \"Juan\");\n    imprimirCliente(cliente);\n    free(cliente);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Cliente {\n    int id;\n    std::string nombre;\n};\n\nvoid imprimirCliente(const Cliente& cliente) {\n    std::cout << \"ID: \" << cliente.id << \", Nombre: \" << cliente.nombre << std::endl;\n}\n\nint main() {\n    Cliente cliente;\n    cliente.id = 1;\n    cliente.nombre = \"Juan\";\n    imprimirCliente(cliente);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicarArray(int* arr, int size) {\n    int* nuevoArray = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        nuevoArray[i] = arr[i] * 2;\n    }\n    return nuevoArray;\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int size = 3;\n    int* nuevoArray = duplicarArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", nuevoArray[i]);\n    }\n    free(nuevoArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicarArray(const std::vector<int>& arr) {\n    std::vector<int> nuevoArray;\n    for(int i = 0; i < arr.size(); i++) {\n        nuevoArray.push_back(arr[i] * 2);\n    }\n    return nuevoArray;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3};\n    std::vector<int> nuevoArray = duplicarArray(arr);\n    for(int i = 0; i < nuevoArray.size(); i++) {\n        std::cout << nuevoArray[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    printf(\"Antes del intercambio: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"Después del intercambio: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    std::cout << \"Antes del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"Después del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid invertirArray(int* arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    invertirArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid invertirArray(std::vector<int>& arr) {\n    for(int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    invertirArray(arr);\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addArrays(int *arr1, int *arr2, int *result, int size) { for (int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2, std::vector<int> &result) { result.resize(vec1.size()); for (size_t i = 0; i < vec1.size(); i++) { result[i] = vec1[i] + vec2[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point *p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void freeArray(int *arr) { free(arr); }", "target_code": "int *createArray(int size) { return new int[size]; } void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { int *temp = (int *)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) { temp[i] = arr[size - 1 - i]; } for (int i = 0; i < size; i++) { arr[i] = temp[i]; } free(temp); }", "target_code": "void reverseVector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void printPerson(Person *p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void printPerson(const Person &p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementarArray(int* arr, int size) { for(int i = 0; i < size; i++) arr[i]++; }", "target_code": "void incrementarVector(std::vector<int> &vec) { for(int &num : vec) num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* crearArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* crearArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Persona { char nombre[50]; int edad; }; void imprimirPersona(struct Persona p) { printf(\"Nombre: %s, Edad: %d\\n\", p.nombre, p.edad); }", "target_code": "struct Persona { std::string nombre; int edad; }; void imprimirPersona(const Persona &p) { std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberarMemoria(int* arr) { free(arr); }", "target_code": "void liberarMemoria(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumarValores(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumarValores(const std::vector<int> &vec) { int sum = 0; for(const int &num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_1(int *ptr) {\n    *ptr += 10;\n}\n\nint main() {\n    int num = 5;\n    c_function_1(&num);\n    printf(\"Value after calling c_function_1: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_1(int &num) {\n    num += 10;\n}\n\nint main() {\n    int num = 5;\n    cpp_function_1(num);\n    std::cout << \"Value after calling cpp_function_1: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    c_function_2(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_2(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function_2(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_Struct {\n    int x;\n};\n\nvoid c_function_3(struct c_Struct *s) {\n    s->x = 100;\n}\n\nint main() {\n    struct c_Struct c_s;\n    c_function_3(&c_s);\n    printf(\"Value of x after calling c_function_3: %d\\n\", c_s.x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_Struct {\n    int x;\n};\n\nvoid cpp_function_3(cpp_Struct &s) {\n    s.x = 100;\n}\n\nint main() {\n    cpp_Struct cpp_s;\n    cpp_function_3(cpp_s);\n    std::cout << \"Value of x after calling cpp_function_3: \" << cpp_s.x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_Struct {\n    int x;\n};\n\nstruct c_Struct *c_function_4() {\n    struct c_Struct *s = (struct c_Struct*)malloc(sizeof(struct c_Struct));\n    s->x = 50;\n    return s;\n}\n\nint main() {\n    struct c_Struct *c_s = c_function_4();\n    printf(\"Value of x returned from c_function_4: %d\\n\", c_s->x);\n    free(c_s);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_Struct {\n    int x;\n};\n\ncpp_Struct* cpp_function_4() {\n    cpp_Struct* s = new cpp_Struct;\n    s->x = 50;\n    return s;\n}\n\nint main() {\n    cpp_Struct* cpp_s = cpp_function_4();\n    std::cout << \"Value of x returned from cpp_function_4: \" << cpp_s->x << std::endl;\n    delete cpp_s;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_Struct {\n    int x;\n};\n\nvoid c_function_5(struct c_Struct *s, int val) {\n    s->x = val;\n}\n\nint main() {\n    struct c_Struct c_s;\n    c_function_5(&c_s, 75);\n    printf(\"Value of x after calling c_function_5: %d\\n\", c_s.x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_Struct {\n    int x;\n};\n\nvoid cpp_function_5(cpp_Struct &s, int val) {\n    s.x = val;\n}\n\nint main() {\n    cpp_Struct cpp_s;\n    cpp_function_5(cpp_s, 75);\n    std::cout << \"Value of x after calling cpp_function_5: \" << cpp_s.x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArrayC(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArrayC(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVectorCPP(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVectorCPP(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPointC(int x, int y) {\n    Point* pt = (Point*)malloc(sizeof(Point));\n    pt->x = x;\n    pt->y = y;\n    return pt;\n}\n\nint main() {\n    Point* pt = createPointC(3, 5);\n    printf(\"%d %d\\n\", pt->x, pt->y);\n    free(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPointCPP(int x, int y) {\n    Point* pt = new Point;\n    pt->x = x;\n    pt->y = y;\n    return pt;\n}\n\nint main() {\n    Point* pt = createPointCPP(3, 5);\n    std::cout << pt->x << ' ' << pt->y << std::endl;\n    delete pt;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArrayC(int* arr, int size) {\n    int temp;\n    for (int i = 0; i < size / 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArrayC(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVectorCPP(std::vector<int>& vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVectorCPP(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid printRectangleC(Rectangle* rect) {\n    printf(\"Width: %d, Height: %d\\n\", rect->width, rect->height);\n}\n\nint main() {\n    Rectangle r = {10, 20};\n    printRectangleC(&r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangleCPP(const Rectangle& rect) {\n    std::cout << \"Width: \" << rect.width << \", Height: \" << rect.height << std::endl;\n}\n\nint main() {\n    Rectangle r = {10, 20};\n    printRectangleCPP(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArraysC(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {5, 4, 3, 2, 1};\n    int result[5];\n    addArraysC(arr1, arr2, result, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> addVectorsCPP(const std::vector<int>& vec1, const std::vector<int>& vec2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    std::vector<int> result = addVectorsCPP(vec1, vec2);\n    for (int num : result) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *arr, int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += *(arr + i);\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& vec) {\n    int result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) {\n    int temp;\n    for (int i = 0; i < size / 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "void reverseVector(std::vector<int>& vec) {\n    std::reverse(vec.begin(), vec.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;\n\nPerson* createPerson(int id, const char* name) {\n    Person* p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}", "target_code": "struct Person {\n    int id;\n    std::string name;\n};\n\nPerson* createPerson(int id, const std::string& name) {\n    Person* p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteIntArray(int* arr) {\n    free(arr);\n}", "target_code": "std::vector<int> createIntVector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumArray(int* arr, int size, int* sum) {\n    *sum = 0;\n    for(int i = 0; i < size; i++) {\n        *sum += arr[i];\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum;\n    sumArray(arr, 5, &sum);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumVector(const std::vector<int>& vec, int& sum) {\n    sum = 0;\n    for(int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int sum;\n    sumVector(vec, sum);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid initializePoint(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    initializePoint(p, 1, 2);\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    void initialize(int x, int y) {\n        this->x = x;\n        this->y = y;\n    }\n};\n\nint main() {\n    Point* p = new Point();\n    p->initialize(1, 2);\n    std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for(int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid initializeRectangle(Rectangle* rect, int w, int h) {\n    rect->width = w;\n    rect->height = h;\n}\n\nint area(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle* rect = (Rectangle*)malloc(sizeof(Rectangle));\n    initializeRectangle(rect, 5, 10);\n    printf(\"Area: %d\\n\", area(rect));\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    void initialize(int w, int h) {\n        width = w;\n        height = h;\n    }\n\n    int area() const {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle* rect = new Rectangle();\n    rect->initialize(5, 10);\n    std::cout << \"Area: \" << rect->area() << std::endl;\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for(int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(const Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 5;\n    p->y = 10;\n    print_point(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 5;\n    p->y = 10;\n    print_point(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = create_array(size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = create_vector(size);\n    for(int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student(const Student* s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student* s = (Student*)malloc(sizeof(Student));\n    s->id = 1;\n    strcpy(s->name, \"Alice\");\n    print_student(s);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student(const Student& s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student* s = new Student;\n    s->id = 1;\n    s->name = \"Alice\";\n    print_student(*s);\n    delete s;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int arr[], int n) { for(int i=0; i<n/2; i++) { int temp = arr[i]; arr[i] = arr[n-1-i]; arr[n-1-i] = temp; } }", "target_code": "void reverse(std::vector<int> &arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void* create_array(int n) { return malloc(sizeof(int) * n); }", "target_code": "int* create_array(int n) { return new int[n]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(void* ptr) { free(ptr); }", "target_code": "void free_array(int* ptr) { delete[] ptr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid printVector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    return new Point{ x, y };\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printStruct(Point *p) {\n    printf(\"x: %d, y: %d\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printStruct(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    printf(\"Area: %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[3] = {1, 2, 3};\n    int arr2[3];\n    copyArray(arr1, arr2, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2;\n    copyVector(vec1, vec2);\n    for (int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int result = factorial(5);\n    printf(\"Factorial of 5 is %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int result = factorial(5);\n    std::cout << \"Factorial of 5 is \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void initialize_point(Point *p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void initialize_point(Point &p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid fill_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 10;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_array(size);\n    fill_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nvoid fill_array(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] = i * 10;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr = create_array(size);\n    fill_array(arr);\n    for (int i = 0; i < size; i++) {\n        std::cout << \"arr[\" << i << \"] = \" << arr[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = NULL;\n    return new_node;\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    printf(\"Node data: %d\\n\", node->data);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = nullptr;\n    return new_node;\n}\n\nint main() {\n    Node *node = create_node(10);\n    std::cout << \"Node data: \" << node->data << std::endl;\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 3);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 3);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int n) {\n    int *arr = (int*)malloc(n * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int n) {\n    return std::vector<int>(n);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    set_point(&p, 10, 20);\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 10, 20);\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *source, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = source[i];\n    }\n}\n\nint main() {\n    int source[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(source, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(std::vector<int> &source, std::vector<int> &dest) {\n    dest = source;\n}\n\nint main() {\n    std::vector<int> source = {1, 2, 3, 4, 5};\n    std::vector<int> dest;\n    copy_vector(source, dest);\n    for (int i = 0; i < dest.size(); i++) {\n        std::cout << dest[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 10);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 10);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int* arr1, int* arr2, int size, int* result) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* result = (int*)malloc(size * sizeof(int));\n    addArrays(arr1, arr2, size, result);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(3, 5);\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nint main() {\n    Point* p = new Point(3, 5);\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    std::vector<int> temp = vec;\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = temp[vec.size() - i - 1];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid doubleArray(Array* arr) {\n    for (int i = 0; i < arr->size; i++) {\n        arr->data[i] *= 2;\n    }\n}\n\nint main() {\n    Array arr;\n    arr.size = 3;\n    arr.data = (int*)malloc(arr.size * sizeof(int));\n    arr.data[0] = 1;\n    arr.data[1] = 2;\n    arr.data[2] = 3;\n    doubleArray(&arr);\n    for (int i = 0; i < arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid doubleVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    doubleVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid freeArray(Array* arr) {\n    free(arr->data);\n}\n\nint main() {\n    Array arr;\n    arr.size = 3;\n    arr.data = (int*)malloc(arr.size * sizeof(int));\n    // Trabajo con el array\n    freeArray(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    // Trabajo con el vector\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addOne(int *a) { *a = *a + 1; }", "target_code": "void addOne(int &a) { a = a + 1; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { int *temp = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) temp[i] = arr[size - 1 - i]; for(int i = 0; i < size; i++) arr[i] = temp[i]; free(temp); }", "target_code": "void reverseVector(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void movePoint(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void movePoint(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void deleteArray(int *arr) { free(arr); }", "target_code": "int *createArray(int size) { return new int[size]; } void deleteArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int> &arr) { for(int num : arr) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid c_reverse(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    c_reverse(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid cpp_reverse(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    cpp_reverse(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_point {\n    int x;\n    int y;\n};\n\nvoid c_translate(struct c_point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct c_point pt = {1, 2};\n    c_translate(&pt, 3, 4);\n    printf(\"Translated point: (%d, %d)\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_point {\n    int x;\n    int y;\n};\n\nvoid cpp_translate(cpp_point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    cpp_point pt = {1, 2};\n    cpp_translate(pt, 3, 4);\n    std::cout << \"Translated point: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_reverse_vector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *c_create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = c_create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = cpp_create_vector(5);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_person {\n    char name[20];\n    int age;\n};\n\nvoid c_print_person(struct c_person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct c_person p = {\"Alice\", 30};\n    c_print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_print_person(const cpp_person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    cpp_person p = {\"Alice\", 30};\n    cpp_print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { int start = 0; int end = size - 1; while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; } void delete_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(int a, int b) { return a > b ? a : b; }", "target_code": "int get_max(int a, int b) { return std::max(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 10;\n    c_swap(&num1, &num2);\n    printf(\"%d %d\\n\", num1, num2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 10;\n    cpp_swap(num1, num2);\n    std::cout << num1 << \" \" << num2 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid c_fill_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = c_create_array(size);\n    c_fill_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nvoid cpp_fill_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = cpp_create_vector(size);\n    cpp_fill_vector(vec);\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_point {\n    int x;\n    int y;\n};\n\nvoid c_translate(struct c_point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct c_point point = {1, 1};\n    c_translate(&point, 2, 3);\n    printf(\"%d %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_point {\n    int x;\n    int y;\n};\n\nvoid cpp_translate(cpp_point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    cpp_point point = {1, 1};\n    cpp_translate(point, 2, 3);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_person {\n    char name[20];\n    int age;\n};\n\nvoid c_print_person(struct c_person* person) {\n    printf(\"Name: %s, Age: %d\\n\", person->name, person->age);\n}\n\nint main() {\n    struct c_person person = {\"Alice\", 25};\n    c_print_person(&person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_print_person(const cpp_person &person) {\n    std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl;\n}\n\nint main() {\n    cpp_person person = {\"Alice\", 25};\n    cpp_print_person(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint c_factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * c_factorial(n - 1);\n}\n\nint main() {\n    int result = c_factorial(5);\n    printf(\"Factorial: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint cpp_factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * cpp_factorial(n - 1);\n}\n\nint main() {\n    int result = cpp_factorial(5);\n    std::cout << \"Factorial: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h> \n\nvoid swap(int* a, int* b) { \n    int temp = *a; \n    *a = *b; \n    *b = temp; \n} \n\nint* createIntArray(int size) { \n    return (int*)malloc(size * sizeof(int)); \n} \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid setPoint(Point* p, int x, int y) { \n    p->x = x; \n    p->y = y; \n}", "target_code": "#include <iostream> \n#include <vector> \n\nvoid swap(int& a, int& b) { \n    int temp = a; \n    a = b; \n    b = temp; \n} \n\nstd::vector<int> createIntArray(int size) { \n    return std::vector<int>(size); \n} \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid setPoint(Point& p, int x, int y) { \n    p.x = x; \n    p.y = y; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nvoid reverseArray(int* arr, int size) { \n    int temp; \n    for(int i = 0; i < size/2; i++) { \n        temp = arr[i]; \n        arr[i] = arr[size-1-i]; \n        arr[size-1-i] = temp; \n    } \n} \n\nint* createDynamicArray(int size) { \n    return (int*)malloc(size * sizeof(int)); \n}", "target_code": "#include <iostream> \n#include <vector> \n\nvoid reverseArray(std::vector<int>& arr) { \n    for(int i = 0; i < arr.size()/2; i++) { \n        int temp = arr[i]; \n        arr[i] = arr[arr.size()-1-i]; \n        arr[arr.size()-1-i] = temp; \n    } \n} \n\nstd::vector<int> createDynamicArray(int size) { \n    return std::vector<int>(size); \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h> \n\nint* mergeArrays(int* arr1, int size1, int* arr2, int size2) { \n    int* merged = (int*)malloc((size1 + size2) * sizeof(int)); \n    for(int i = 0; i < size1; i++) { \n        merged[i] = arr1[i]; \n    } \n    for(int i = 0; i < size2; i++) { \n        merged[size1 + i] = arr2[i]; \n    } \n    return merged; \n}", "target_code": "#include <iostream> \n#include <vector> \n\nstd::vector<int> mergeArrays(std::vector<int>& arr1, std::vector<int>& arr2) { \n    std::vector<int> merged; \n    merged.reserve(arr1.size() + arr2.size()); \n    merged.insert(merged.end(), arr1.begin(), arr1.end()); \n    merged.insert(merged.end(), arr2.begin(), arr2.end()); \n    return merged; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nvoid printArray(int* arr, int size) { \n    for(int i = 0; i < size; i++) { \n        printf(\"%d \", arr[i]); \n    } \n    printf(\"\\n\"); \n} \n\nvoid freeArray(int* arr) { \n    free(arr); \n}", "target_code": "#include <iostream> \n#include <vector> \n\nvoid printArray(const std::vector<int>& arr) { \n    for(int num : arr) { \n        std::cout << num << \" \"; \n    } \n    std::cout << std::endl; \n} \n\n// No es necesario liberar memoria en C++ usando std::vector y smart pointers"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nstruct Rectangle { \n    int length; \n    int width; \n}; \n\nint calculateArea(Rectangle* rect) { \n    return rect->length * rect->width; \n}", "target_code": "#include <iostream> \n\nstruct Rectangle { \n    int length; \n    int width; \n}; \n\nint calculateArea(const Rectangle& rect) { \n    return rect.length * rect.width; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\";\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for(const auto &elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid deleteLinkedList(struct Node* head) {\n    struct Node* current = head;\n    struct Node* next;\n    while(current != NULL) {\n        next = current->next;\n        free(current);\n        current = next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid deleteLinkedList(Node* head) {\n    Node* current = head;\n    Node* next;\n    while(current != nullptr) {\n        next = current->next;\n        delete current;\n        current = next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int value) {\n    struct Node *new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = value;\n    new_node->next = NULL;\n    return new_node;\n}\n\nvoid free_node(struct Node *node) {\n    free(node);\n}\n\nint main() {\n    struct Node *head = create_node(10);\n    free_node(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int value) {\n    Node *new_node = new Node;\n    new_node->data = value;\n    new_node->next = nullptr;\n    return new_node;\n}\n\nvoid free_node(Node *node) {\n    delete node;\n}\n\nint main() {\n    Node *head = create_node(10);\n    free_node(head);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2;\n    copy_vector(vec1, vec2);\n    for (int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_arrays(int* arr1, int* arr2, int size, int* result) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = sizeof(arr1) / sizeof(arr1[0]);\n    int* result = (int*)malloc(size * sizeof(int));\n    sum_arrays(arr1, arr2, size, result);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vectors(const std::vector<int>& v1, const std::vector<int>& v2, std::vector<int>& result) {\n    for(int i = 0; i < v1.size(); i++) {\n        result.push_back(v1[i] + v2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> v1 = {1, 2, 3};\n    std::vector<int> v2 = {4, 5, 6};\n    std::vector<int> result;\n    sum_vectors(v1, v2, result);\n    for(int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\";\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_dynamic_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_dynamic_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int* arr = create_dynamic_array(size);\n    arr[0] = 1;\n    arr[1] = 2;\n    printf(\"%d %d\\n\", arr[0], arr[1]);\n    free_dynamic_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* create_dynamic_array(int size) {\n    return new int[size];\n}\n\nvoid free_dynamic_array(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = create_dynamic_array(size);\n    arr[0] = 1;\n    arr[1] = 2;\n    std::cout << arr[0] << \" \" << arr[1] << \"\\n\";\n    free_dynamic_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const struct Rectangle* r) {\n    printf(\"Width: %d, Height: %d\\n\", r->width, r->height);\n}\n\nint main() {\n    struct Rectangle r = {10, 5};\n    print_rectangle(&r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle& r) {\n    std::cout << \"Width: \" << r.width << \", Height: \" << r.height << \"\\n\";\n}\n\nint main() {\n    Rectangle r = {10, 5};\n    print_rectangle(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_values(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap_values(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_values(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << \"\\n\";\n    swap_values(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << \"\\n\";\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x after increment: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x after increment: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char *dest, const char *src) {\n    while(*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char src[] = \"Hello, World!\";\n    char dest[20];\n    copy_string(dest, src);\n    printf(\"Copied string: %s\\n\", dest);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(char *dest, const char *src) {\n    while(*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char* src = \"Hello, World!\";\n    char dest[20];\n    copy_string(dest, src);\n    std::cout << \"Copied string: \" << dest << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverseArray(std::vector<int> &arr) { for(int i = 0; i < arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroyPoint(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point{ x, y }; } void destroyPoint(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* squareArray(int *arr, int size) { int* result = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { result[i] = arr[i] * arr[i]; } return result; }", "target_code": "std::vector<int> squareArray(const std::vector<int> &arr) { std::vector<int> result; for(int num : arr) { result.push_back(num * num); } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->next = NULL;\n    return node;\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *node = new Node;\n    node->data = data;\n    node->next = nullptr;\n    return node;\n}\n\nint main() {\n    Node *node = create_node(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest(5);\n    copy_vector(src, dest);\n    for (int i = 0; i < 5; i++) {\n        std::cout << dest[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumarArrays(int *arr1, int *arr2, int n) {\n    for (int i = 0; i < n; i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    sumarArrays(arr1, arr2, 3);\n\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(std::vector<int> &arr1, std::vector<int> &arr2) {\n    for (int i = 0; i < arr1.size(); i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2 = {4, 5, 6};\n    sumarArrays(arr1, arr2);\n\n    for (int i = 0; i < 3; i++) {\n        std::cout << arr1[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid moverPunto(Punto *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Punto *p = (Punto*)malloc(sizeof(Punto));\n    p->x = 10;\n    p->y = 20;\n\n    moverPunto(p, 5, 5);\n\n    printf(\"%d %d\\n\", p->x, p->y);\n\n    free(p);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid moverPunto(Punto &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Punto p;\n    p.x = 10;\n    p.y = 20;\n\n    moverPunto(p, 5, 5);\n\n    std::cout << p.x << \" \" << p.y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copiarArray(int *origen, int *destino, int n) {\n    for (int i = 0; i < n; i++) {\n        destino[i] = origen[i];\n    }\n}\n\nint main() {\n    int *arr1 = (int*)malloc(3 * sizeof(int));\n    int arr2[3];\n\n    arr1[0] = 1;\n    arr1[1] = 2;\n    arr1[2] = 3;\n\n    copiarArray(arr1, arr2, 3);\n\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n\n    free(arr1);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copiarArray(std::vector<int> &origen, std::vector<int> &destino) {\n    for (int i = 0; i < origen.size(); i++) {\n        destino[i] = origen[i];\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2(3);\n\n    copiarArray(arr1, arr2);\n\n    for (int i = 0; i < 3; i++) {\n        std::cout << arr2[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicarArray(int *arr, int n) {\n    for (int i = 0; i < n; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *arr = (int*)malloc(3 * sizeof(int));\n\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n\n    duplicarArray(arr, 3);\n\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicarArray(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3};\n\n    duplicarArray(arr);\n\n    for (int i = 0; i < 3; i++) {\n        std::cout << arr[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid liberarMemoria(int *puntero) {\n    free(puntero);\n}\n\nint main() {\n    int *p = (int*)malloc(sizeof(int));\n    *p = 5;\n\n    printf(\"%d\\n\", *p);\n\n    liberarMemoria(p);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid liberarMemoria(int *puntero) {\n    delete puntero;\n}\n\nint main() {\n    int *p = new int;\n    *p = 5;\n\n    std::cout << *p << std::endl;\n\n    liberarMemoria(p);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int* arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& vec) {\n    int total = 0;\n    for (int num : vec) {\n        total += num;\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum(vec);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n} Person;\n\nPerson* create_person(int id, const char* name) {\n    Person* p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nvoid free_person(Person* p) {\n    free(p);\n}\n\nint main() {\n    Person* p = create_person(1, \"Alice\");\n    free_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n    Person(int _id, const std::string& _name) : id(_id), name(_name) {}\n};\n\nint main() {\n    Person p(1, \"Alice\");\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i=0; i<size/2; ++i) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { for(int i=0; i<arr.size()/2; ++i) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{ x, y }; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* merge_arrays(int *arr1, int size1, int *arr2, int size2) { int *result = (int*)malloc((size1 + size2) * sizeof(int)); memcpy(result, arr1, size1 * sizeof(int)); memcpy(result + size1, arr2, size2 * sizeof(int)); return result; }", "target_code": "std::vector<int> merge_arrays(std::vector<int> &arr1, std::vector<int> &arr2) { std::vector<int> result; result.reserve(arr1.size() + arr2.size()); result.insert(result.end(), arr1.begin(), arr1.end()); result.insert(result.end(), arr2.begin(), arr2.end()); return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i=0; i<size; ++i) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_int(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_int_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_int_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_int_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_int_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    struct Node *current = head;\n    while(current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node n1 = {1, NULL};\n    struct Node n2 = {2, NULL};\n    n1.next = &n2;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_list(const Node *head) {\n    const Node *current = head;\n    while(current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node n1 = {1, nullptr};\n    Node n2 = {2, nullptr};\n    n1.next = &n2;\n    print_list(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumar(int a, int b, int *resultado) {\n    *resultado = a + b;\n}", "target_code": "void sumar(int a, int b, int &resultado) {\n    resultado = a + b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicar(int *array, int size) {\n    int *nuevo_array = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        nuevo_array[i] = array[i] * 2;\n    }\n    return nuevo_array;\n}", "target_code": "std::vector<int> duplicar(std::vector<int> &array) {\n    std::vector<int> nuevo_array;\n    for(int i = 0; i < array.size(); i++) {\n        nuevo_array.push_back(array[i] * 2);\n    }\n    return nuevo_array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid mover(Punto *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "struct Punto {\n    int x;\n    int y;\n};\n\nvoid mover(Punto &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void imprimir(int *array, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n}", "target_code": "void imprimir(const std::vector<int> &array) {\n    for(int i = 0; i < array.size(); i++) {\n        std::cout << array[i] << \" \";\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberar_memoria(int *puntero) {\n    free(puntero);\n}", "target_code": "void liberar_memoria(int* puntero) {\n    delete puntero;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { temp[i] = arr[size - 1 - i]; } for(int i = 0; i < size; i++) { arr[i] = temp[i]; } free(temp); }", "target_code": "void reverseArray(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* point) { printf(\"(%d, %d)\\n\", point->x, point->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& point) { std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { int* arr = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { arr[i] = i + 1; } return arr; }", "target_code": "std::vector<int> createArray(int size) { std::vector<int> arr; for(int i = 0; i < size; i++) { arr.push_back(i + 1); } return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_pointers(int *a, int *b) {\n    *b = *a + 1;\n}\n\nint main() {\n    int x = 5;\n    int y;\n    c_function_with_pointers(&x, &y);\n    printf(\"%d\\n\", y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_with_references(int &a, int &b) {\n    b = a + 1;\n}\n\nint main() {\n    int x = 5;\n    int y;\n    cpp_function_with_references(x, y);\n    std::cout << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_arrays(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_function_with_arrays(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_with_vectors(std::vector<int> &v) {\n    for (int &num : v) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    cpp_function_with_vectors(v);\n    for (int num : v) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function_with_structs(Point *p) {\n    p->x = 10;\n    p->y = 20;\n}\n\nint main() {\n    Point point;\n    c_function_with_structs(&point);\n    printf(\"%d %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_with_structs(Point &p) {\n    p.x = 10;\n    p.y = 20;\n}\n\nint main() {\n    Point point;\n    cpp_function_with_structs(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function_with_malloc(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int *)c_function_with_malloc(sizeof(int));\n    *ptr = 100;\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function_with_new() {\n    return new int;\n}\n\nint main() {\n    int* ptr = cpp_function_with_new();\n    *ptr = 100;\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_pointers_and_structs(Point *p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    Point *point = (Point *)malloc(sizeof(Point));\n    c_function_with_pointers_and_structs(point);\n    printf(\"%d %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_with_references_and_new(Point &p) {\n    p.x = 5;\n    p.y = 10;\n}\n\nint main() {\n    Point* point = new Point;\n    cpp_function_with_references_and_new(*point);\n    std::cout << point->x << \" \" << point->y << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 10, sum;\n    add(&x, &y, &sum);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 10, sum;\n    add(x, y, sum);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *array) {\n    free(array);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    set_point(&p, 3, 5);\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 3, 5);\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *array, int size) {\n    int i, temp;\n    for (i = 0; i < size / 2; i++) {\n        temp = array[i];\n        array[i] = array[size - i - 1];\n        array[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    int i, temp;\n    for (i = 0; i < vec.size() / 2; i++) {\n        temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int *array, int size, int *result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += array[i];\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(array, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    p->x = 3;\n    p->y = 5;\n    print_point(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 3;\n    p->y = 5;\n    print_point(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *array, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = array[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        array[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    reverse_array(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid print_rectangle(const Rectangle *rect) {\n    printf(\"Rectangle: width=%d, height=%d\\n\", rect->width, rect->height);\n}\n\nint main() {\n    Rectangle *rect = (Rectangle *)malloc(sizeof(Rectangle));\n    rect->width = 10;\n    rect->height = 5;\n    print_rectangle(rect);\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle& rect) {\n    std::cout << \"Rectangle: width=\" << rect.width << \", height=\" << rect.height << std::endl;\n}\n\nint main() {\n    Rectangle *rect = new Rectangle;\n    rect->width = 10;\n    rect->height = 5;\n    print_rectangle(*rect);\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid print_array(const Array *arr) {\n    for (int i = 0; i < arr->size; i++) {\n        printf(\"%d \", arr->data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.data = (int *)malloc(arr.size * sizeof(int));\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i + 1;\n    }\n    print_array(&arr);\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    Array(int size) : data(size) {}\n};\n\nvoid print_array(const Array& arr) {\n    for (int num : arr.data) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    Array arr(5);\n    for (int i = 0; i < 5; i++) {\n        arr.data[i] = i + 1;\n    }\n    print_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int n) {\n    int* arr = (int*)malloc(n * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int n) {\n    return std::vector<int>(n);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {1, 2};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {1, 2};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nint main() {\n    struct Node* node = createNode(5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nint main() {\n    Node* node = createNode(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copyArray(src, dest, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyArray(const int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    const int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copyArray(src, dest, 5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* array = createArray(5);\n    freeArray(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> array = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point* p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point pt = {3, 4};\n    printPoint(&pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 4};\n    printPoint(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid squareArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int array[5] = {1, 2, 3, 4, 5};\n    squareArray(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareArray(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n    squareArray(array);\n    for (int i = 0; i < array.size(); i++) {\n        std::cout << array[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nvoid concatenateStrings(char* dest, const char* src) {\n    strcat(dest, src);\n}\n\nint main() {\n    char str1[20] = \"Hello \";\n    char str2[10] = \"World!\";\n    concatenateStrings(str1, str2);\n    printf(\"Concatenated string: %s\\n\", str1);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid concatenateStrings(std::string& dest, const std::string& src) {\n    dest += src;\n}\n\nint main() {\n    std::string str1 = \"Hello \";\n    std::string str2 = \"World!\";\n    concatenateStrings(str1, str2);\n    std::cout << \"Concatenated string: \" << str1 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_dynamic_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_dynamic_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int> &vec) { for(int num : vec) { std::cout << num << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    struct Rectangle r = {4, 5};\n    printf(\"Area: %d\\n\", area(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle& rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->next = NULL;\n    return node;\n}\n\nvoid free_node(struct Node *node) {\n    free(node);\n}\n\nint main() {\n    struct Node *n = create_node(10);\n    free_node(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *node = new Node;\n    node->data = data;\n    node->next = nullptr;\n    return node;\n}\n\nint main() {\n    Node *n = create_node(10);\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int source[5] = {1, 2, 3, 4, 5};\n    int destination[5];\n    copy_array(source, destination, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", destination[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int> &src, std::vector<int> &dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    std::vector<int> source = {1, 2, 3, 4, 5};\n    std::vector<int> destination(5);\n    copy_vector(source, destination);\n    for (int i = 0; i < 5; i++) {\n        std::cout << destination[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int> &arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee;", "target_code": "struct Employee { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << \"vec[\" << i << \"] = \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 5;\n    p.y = 10;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr2[%d] = %d\\n\", i, arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copy_vector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2(5);\n    copy_vector(vec1, vec2);\n    for (int i = 0; i < 5; i++) {\n        std::cout << \"vec2[\" << i << \"] = \" << vec2[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle rect;\n    rect.length = 5;\n    rect.width = 10;\n    printf(\"Area of rectangle: %d\\n\", area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect;\n    rect.length = 5;\n    rect.width = 10;\n    std::cout << \"Area of rectangle: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid printPerson(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person person1;\n    strcpy(person1.name, \"Alice\");\n    person1.age = 25;\n    printPerson(person1);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person person1;\n    person1.name = \"Alice\";\n    person1.age = 25;\n    printPerson(person1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid printList(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node node1, node2, node3;\n    node1.data = 1;\n    node1.next = &node2;\n    node2.data = 2;\n    node2.next = &node3;\n    node3.data = 3;\n    node3.next = NULL;\n    printList(&node1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid printList(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* node1 = new Node;\n    Node* node2 = new Node;\n    Node* node3 = new Node;\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = node3;\n    node3->data = 3;\n    node3->next = nullptr;\n    printList(node1);\n    delete node1;\n    delete node2;\n    delete node3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid updatePoint(struct Point* p, int new_x, int new_y) {\n    p->x = new_x;\n    p->y = new_y;\n}\n\nint main() {\n    struct Point point;\n    point.x = 1;\n    point.y = 2;\n    updatePoint(&point, 5, 5);\n    printf(\"Point: (%d, %d)\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid updatePoint(Point& p, int new_x, int new_y) {\n    p.x = new_x;\n    p.y = new_y;\n}\n\nint main() {\n    Point point;\n    point.x = 1;\n    point.y = 2;\n    updatePoint(point, 5, 5);\n    std::cout << \"Point: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Point {\n    int x;\n    int y;\n};\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\nint main() {\n    struct Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\nstruct Point {\n    int x;\n    int y;\n};\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Node {\n    int data;\n    struct Node *next;\n};\nvoid printLinkedList(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n}\nint main() {\n    struct Node a = {1, NULL};\n    struct Node b = {2, NULL};\n    struct Node c = {3, NULL};\n    a.next = &b;\n    b.next = &c;\n    printLinkedList(&a);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Node {\npublic:\n    int data;\n    Node *next;\n    Node(int data) : data(data), next(nullptr) {}\n};\nvoid printLinkedList(const Node *head) {\n    const Node *temp = head;\n    while (temp != nullptr) {\n        std::cout << temp->data << \" \";\n        temp = temp->next;\n    }\n}\nint main() {\n    Node *a = new Node(1);\n    Node *b = new Node(2);\n    Node *c = new Node(3);\n    a->next = b;\n    b->next = c;\n    printLinkedList(a);\n    delete a;\n    delete b;\n    delete c;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createIntArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\nint main() {\n    int *arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nstd::vector<int> createIntVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\nint main() {\n    std::vector<int> vec = createIntVector(5);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_array(int *arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void double_vector(std::vector<int> &vec) { for (int &num : vec) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "int *create_array(int size) { return new int[size]; } void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_sum(const Point *p) { return p->x + p->y; }", "target_code": "int get_sum(const Point &p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {10, 20};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {10, 20};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 30};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 30};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sum(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    sum(&x, &y, &res);\n    printf(\"Sum: %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sum(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    sum(x, y, res);\n    std::cout << \"Sum: \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {2, 3};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {2, 3};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p = {\"Alice\", 25};\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for (int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum_array(arr, 5);\n    printf(\"Suma: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int x : vec) {\n        sum += x;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum_vector(vec);\n    std::cout << \"Suma: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nvoid print_employee(const Employee *emp) {\n    printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name);\n}\n\nint main() {\n    Employee emp = {1, \"Alice\"};\n    print_employee(&emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nvoid print_employee(const Employee &emp) {\n    std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n}\n\nint main() {\n    Employee emp = {1, \"Alice\"};\n    print_employee(emp);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int total = 0; for (int i = 0; i < size; i++) { total += arr[i]; } return total; }", "target_code": "int sum(const std::vector<int>& arr) { int total = 0; for (int num : arr) { total += num; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumarArrays(int *arr1, int *arr2, int *resultado, int tam) {\n    for (int i = 0; i < tam; i++) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}", "target_code": "void sumarArrays(const std::vector<int> &arr1, const std::vector<int> &arr2, std::vector<int> &resultado) {\n    for (int i = 0; i < arr1.size(); i++) {\n        resultado.push_back(arr1[i] + arr2[i]);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;", "target_code": "struct Punto {\n    int x;\n    int y;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int *crearArray(int tam) {\n    return (int *)malloc(tam * sizeof(int));\n}", "target_code": "int* crearArray(int tam) {\n    return new int[tam];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberarArray(int *arr) {\n    free(arr);\n}", "target_code": "void liberarArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}", "target_code": "void intercambiar(int &a, int &b) {\n    std::swap(a, b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumar(int *a, int *b, int *resultado) {\n    *resultado = *a + *b;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    int res;\n    sumar(&num1, &num2, &res);\n    printf(\"La suma es: %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sumar(int &a, int &b, int &resultado) {\n    resultado = a + b;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    int res;\n    sumar(num1, num2, res);\n    std::cout << \"La suma es: \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid imprimir_punto(Punto *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Punto *p = (Punto *)malloc(sizeof(Punto));\n    p->x = 3;\n    p->y = 5;\n    imprimir_punto(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Punto {\npublic:\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto *p = new Punto;\n    p->x = 3;\n    p->y = 5;\n    imprimir_punto(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *datos;\n    int tam;\n} ArrayInt;\n\nvoid inicializar(ArrayInt *arr, int tam) {\n    arr->datos = (int *)malloc(tam * sizeof(int));\n    arr->tam = tam;\n}\n\nvoid liberar(ArrayInt *arr) {\n    free(arr->datos);\n}\n\nint main() {\n    ArrayInt arr;\n    inicializar(&arr, 5);\n    liberar(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass ArrayInt {\npublic:\n    std::vector<int> datos;\n\n    void inicializar(int tam) {\n        datos.resize(tam);\n    }\n};\n\nint main() {\n    ArrayInt arr;\n    arr.inicializar(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    swap(&num1, &num2);\n    printf(\"num1: %d, num2: %d\\n\", num1, num2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    swap(num1, num2);\n    std::cout << \"num1: \" << num1 << \", num2: \" << num2 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int dia;\n    int mes;\n    int anio;\n} Fecha;\n\nvoid imprimir_fecha(Fecha *f) {\n    printf(\"%d/%d/%d\\n\", f->dia, f->mes, f->anio);\n}\n\nint main() {\n    Fecha fecha = {10, 4, 2021};\n    imprimir_fecha(&fecha);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Fecha {\npublic:\n    int dia;\n    int mes;\n    int anio;\n};\n\nvoid imprimir_fecha(const Fecha &f) {\n    std::cout << f.dia << \"/\" << f.mes << \"/\" << f.anio << std::endl;\n}\n\nint main() {\n    Fecha fecha = {10, 4, 2021};\n    imprimir_fecha(fecha);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    int* arr = new int[size];\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar_array(int* arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    incrementar_array(arr, size);\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid asignar_edad(struct Persona* p, int edad) {\n    p->edad = edad;\n}\n\nint main() {\n    struct Persona persona;\n    asignar_edad(&persona, 30);\n    printf(\"Edad: %d\\n\", persona.edad);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid asignar_edad(Persona& p, int edad) {\n    p.edad = edad;\n}\n\nint main() {\n    Persona persona;\n    asignar_edad(persona, 30);\n    std::cout << \"Edad: \" << persona.edad << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicar_valor(int* x) {\n    *x *= 2;\n}\n\nint main() {\n    int num = 5;\n    duplicar_valor(&num);\n    printf(\"Valor duplicado: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid duplicar_valor(int& x) {\n    x *= 2;\n}\n\nint main() {\n    int num = 5;\n    duplicar_valor(num);\n    std::cout << \"Valor duplicado: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* crear_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = crear_array(size);\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> crear_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; ++i) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = crear_vector(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid modificar_punto(Punto* p, int nx, int ny) {\n    p->x = nx;\n    p->y = ny;\n}\n\nint main() {\n    Punto punto = {2, 3};\n    modificar_punto(&punto, 5, 6);\n    printf(\"Punto: (%d, %d)\\n\", punto.x, punto.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid modificar_punto(Punto& p, int nx, int ny) {\n    p.x = nx;\n    p.y = ny;\n}\n\nint main() {\n    Punto punto = {2, 3};\n    modificar_punto(punto, 5, 6);\n    std::cout << \"Punto: (\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void* create_array(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(void* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *array = (int*)malloc(size * sizeof(int));\n    return array;\n}\n\nint main() {\n    int *arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    // no need to free in C++\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 5};\n    printPoint(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 5};\n    printPoint(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n    return newNode;\n}\n\nint main() {\n    struct Node* node = createNode(10);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int value) {\n    Node* newNode = new Node;\n    newNode->data = value;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nint main() {\n    Node* node = createNode(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[3] = {1, 2, 3};\n    int arr2[3] = {0};\n    copyArray(arr1, arr2, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyArray(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2(3, 0);\n    copyArray(arr1, arr2);\n    for (int i = 0; i < 3; i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}", "target_code": "void incrementVector(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num++;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "std::vector<int> createIntVector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) {\n    free(arr);\n}", "target_code": "No es necesario, el vector se libera automáticamente al salir de su ámbito."}
{"source_language": "C", "target_language": "C++", "source_code": "void swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    int* arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const struct Rectangle *r) {\n    return r->length * r->width;\n}\n\nint main() {\n    struct Rectangle rect = {4, 5};\n    printf(\"Area of rectangle: %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area of rectangle: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *my_array = create_array(5);\n    free_array(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> my_array = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: x = %d, y = %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p1 = {3, 5};\n    print_point(p1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: x = \" << p.x << \", y = \" << p.y << std::endl;\n}\n\nint main() {\n    Point p1 = {3, 5};\n    print_point(p1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(struct Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    struct Rectangle my_rect = {4, 6};\n    int area = calculate_area(my_rect);\n    printf(\"Rectangle area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle my_rect = {4, 6};\n    int area = calculate_area(my_rect);\n    std::cout << \"Rectangle area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *dest, int *src, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(dest, src, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(std::vector<int> &dest, const std::vector<int> &src) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest(5);\n    copy_vector(dest, src);\n    for (int i = 0; i < 5; i++) {\n        std::cout << dest[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sum_array(int* arr, int size, int* result) {\n  *result = 0;\n  for(int i = 0; i < size; i++) {\n    *result += arr[i];\n  }\n}", "target_code": "void sum_array(const std::vector<int>& arr, int& result) {\n  result = 0;\n  for(const auto& num : arr) {\n    result += num;\n  }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n  return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* create_array(int size) {\n  return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n  int x;\n  int y;\n} Point;", "target_code": "struct Point {\n  int x;\n  int y;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n  int temp = a;\n  a = b;\n  b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) {\n  free(arr);\n}", "target_code": "void free_array(int* arr) {\n  delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nvoid subtract(int *a, int *b, int *result) {\n    *result = *a - *b;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nvoid subtract(int &a, int &b, int &result) {\n    result = a - b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nvoid free_array(std::vector<int> &arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_int(int value) {\n    int *ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}\n\nvoid free_int(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nint* create_int(int value) {\n    return new int(value);\n}\n\nvoid free_int(int* ptr) {\n    delete ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function2(struct c_struct* s) {\n    s->x *= 2;\n    s->y *= 2;\n}\n\nint main() {\n    struct c_struct my_struct = {3, 4};\n    c_function2(&my_struct);\n    printf(\"%d %d\\n\", my_struct.x, my_struct.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function2(cpp_struct& s) {\n    s.x *= 2;\n    s.y *= 2;\n}\n\nint main() {\n    cpp_struct my_struct = {3, 4};\n    cpp_function2(my_struct);\n    std::cout << my_struct.x << \" \" << my_struct.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int** mat, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            mat[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    int** matrix = (int**)malloc(3 * sizeof(int*));\n    for (int i = 0; i < 3; i++) {\n        matrix[i] = (int*)malloc(3 * sizeof(int));\n        for (int j = 0; j < 3; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    c_function3(matrix, 3, 3);\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function3(std::vector<std::vector<int>>& mat) {\n    for (int i = 0; i < mat.size(); i++) {\n        for (int j = 0; j < mat[i].size(); j++) {\n            mat[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{0, 1, 2}, {1, 2, 3}, {2, 3, 4}};\n    cpp_function3(matrix);\n    for (int i = 0; i < matrix.size(); i++) {\n        for (int j = 0; j < matrix[i].size(); j++) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 3;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    c_function4(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function4(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 3;\n    }\n}\n\nint main() {\n    int* arr = new int[5];\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    cpp_function4(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 5;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(4 * sizeof(int));\n    for (int i = 0; i < 4; i++) {\n        arr[i] = i;\n    }\n    c_function5(arr, 4);\n    for (int i = 0; i < 4; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 5;\n    }\n}\n\nint main() {\n    int* arr = new int[4];\n    for (int i = 0; i < 4; i++) {\n        arr[i] = i;\n    }\n    cpp_function5(arr, 4);\n    for (int i = 0; i < 4; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int a = 5;\n    increment(&a);\n    printf(\"%d\\n\", a);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int a = 5;\n    increment(a);\n    std::cout << a << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *allocateArray(int size) {\n    return malloc(size * sizeof(int));\n}\n\nvoid freeArray(void *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *arr = (int *)allocateArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *allocateArray(int size) {\n    return new int[size];\n}\n\nvoid freeArray(int *ptr) {\n    delete[] ptr;\n}\n\nint main() {\n    int *arr = allocateArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    freeArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addVectors(int *vec1, int *vec2, int *result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = vec1[i] + vec2[i];\n    }\n}\n\nint main() {\n    int vec1[] = {1, 2, 3, 4, 5};\n    int vec2[] = {5, 4, 3, 2, 1};\n    int size = sizeof(vec1) / sizeof(vec1[0]);\n    int *result = (int *)malloc(size * sizeof(int));\n    addVectors(vec1, vec2, result, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2, std::vector<int> &result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nvoid printArea(struct Rectangle *rect) {\n    printf(\"Area: %d\\n\", rect->length * rect->width);\n}\n\nint main() {\n    struct Rectangle r = {3, 5};\n    printArea(&r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nvoid printArea(const Rectangle &rect) {\n    std::cout << \"Area: \" << rect.length * rect.width << std::endl;\n}\n\nint main() {\n    Rectangle r = {3, 5};\n    printArea(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementByOne(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    incrementByOne(&number);\n    printf(\"Number after increment: %d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid incrementByOne(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    incrementByOne(number);\n    std::cout << \"Number after increment: \" << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid printPersonInfo(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person person = {.name = \"John Doe\", .age = 30};\n    printPersonInfo(&person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPersonInfo(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person person = {.name = \"John Doe\", .age = 30};\n    printPersonInfo(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createIntArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeIntArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    freeIntArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createIntArray(int size) {\n    return new int[size];\n}\n\nvoid freeIntArray(int *arr) {\n    delete[] arr;\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    freeIntArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct Point point = {.x = 0, .y = 0};\n    movePoint(&point, 5, -3);\n    printf(\"New coordinates: (%d, %d)\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point point = {.x = 0, .y = 0};\n    movePoint(point, 5, -3);\n    std::cout << \"New coordinates: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& vec) {\n    int result = 0;\n    for(int num : vec) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "void reverse_array(std::vector<int>& vec) {\n    std::reverse(vec.begin(), vec.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* create_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) {\n    free(arr);\n}", "target_code": "void free_array(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    print_array(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid double_values(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    double_values(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid double_values(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    double_values(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct Point p = {1, 2};\n    move_point(&p, 3, 4);\n    printf(\"New coordinates: x=%d, y=%d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    move_point(p, 3, 4);\n    std::cout << \"New coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint *create_point(int x, int y) {\n    Point *p = (Point *)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *p = create_point(3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint *create_point(int x, int y) {\n    Point *p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *p = create_point(3, 4);\n    std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    int *arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    float real;\n    float imag;\n} Complex;\n\nvoid display_complex(Complex c) {\n    printf(\"%.2f + %.2fi\\n\", c.real, c.imag);\n}\n\nint main() {\n    Complex num = {1.5, 2.5};\n    display_complex(num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Complex {\n    float real;\n    float imag;\n};\n\nvoid display_complex(const Complex &c) {\n    std::cout << c.real << \" + \" << c.imag << \"i\" << std::endl;\n}\n\nint main() {\n    Complex num = {1.5, 2.5};\n    display_complex(num);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid printVector(std::vector<int> &vec) {\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\ntypedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "#include <iostream>\n#include <vector>\n\nint *createVector(int size) {\n    return new int[size];\n}\n\nclass Person {\npublic:\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n    void move(int dx, int dy) {\n        x += dx;\n        y += dy;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle *rect) {\n    return rect->width * rect->height;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n    int calculateArea() {\n        return width * height;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *value) {\n    (*value)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &value) {\n    value++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *point, int dx, int dy) {\n    point->x += dx;\n    point->y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    movePoint(&p, 3, 4);\n    printf(\"%d, %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &point, int dx, int dy) {\n    point.x += dx;\n    point.y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    movePoint(p, 3, 4);\n    std::cout << p.x << \", \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d, %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << x << \", \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid setDimensions(Rectangle *rect, int w, int h) {\n    rect->width = w;\n    rect->height = h;\n}\n\nint main() {\n    Rectangle r;\n    setDimensions(&r, 10, 20);\n    printf(\"%d, %d\\n\", r.width, r.height);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setDimensions(Rectangle &rect, int w, int h) {\n    rect.width = w;\n    rect.height = h;\n}\n\nint main() {\n    Rectangle r;\n    setDimensions(r, 10, 20);\n    std::cout << r.width << \", \" << r.height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_pointer(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int n = 5;\n    int *ptr = (int *)malloc(sizeof(int));\n    c_function_pointer(ptr);\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_reference(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int n = 5;\n    int &ref = n;\n    cpp_function_reference(ref);\n    std::cout << n << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_array(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int size = 3;\n    int arr[] = {1, 2, 3};\n    c_function_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    cpp_function_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function_struct(Point *p) {\n    p->x = 3;\n    p->y = 5;\n}\n\nint main() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    c_function_struct(p);\n    printf(\"%d %d\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_struct(Point &p) {\n    p.x = 3;\n    p.y = 5;\n}\n\nint main() {\n    Point p;\n    cpp_function_struct(p);\n    std::cout << p.x << \" \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function_malloc() {\n    int *ptr = (int *)malloc(sizeof(int));\n    *ptr = 7;\n    return (void *)ptr;\n}\n\nint main() {\n    int *ptr = (int *)c_function_malloc();\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *cpp_function_new() {\n    int *ptr = new int;\n    *ptr = 7;\n    return ptr;\n}\n\nint main() {\n    int *ptr = cpp_function_new();\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid c_function_struct_ptr(Node *head) {\n    head->data = 10;\n    head->next = NULL;\n}\n\nint main() {\n    Node *head = (Node *)malloc(sizeof(Node));\n    c_function_struct_ptr(head);\n    printf(\"%d\\n\", head->data);\n    free(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid cpp_function_struct_ptr(Node *head) {\n    head->data = 10;\n    head->next = nullptr;\n}\n\nint main() {\n    Node *head = new Node;\n    cpp_function_struct_ptr(head);\n    std::cout << head->data << std::endl;\n    delete head;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i : vec) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPerson(const struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 30};\n    printPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 30};\n    printPerson(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = createArray(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n    for (int i : vec) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyMatrix(int matrix1[2][2], int matrix2[2][2], int result[2][2]) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                result[i][j] += matrix1[i][k] * matrix2[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int matrix1[2][2] = {{1, 2}, {3, 4}};\n    int matrix2[2][2] = {{5, 6}, {7, 8}};\n    int result[2][2];\n    multiplyMatrix(matrix1, matrix2, result);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <array>\n\nvoid multiplyMatrix(const std::array<std::array<int, 2>, 2>& matrix1, const std::array<std::array<int, 2>, 2>& matrix2, std::array<std::array<int, 2>, 2>& result) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                result[i][j] += matrix1[i][k] * matrix2[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::array<std::array<int, 2>, 2> matrix1 = {{1, 2}, {3, 4}};\n    std::array<std::array<int, 2>, 2> matrix2 = {{5, 6}, {7, 8}};\n    std::array<std::array<int, 2>, 2> result;\n    multiplyMatrix(matrix1, matrix2, result);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            std::cout << result[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void duplicateArray(int* arr, int size, int* result) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr[i] * 2;\n    }\n}", "target_code": "void duplicateVector(const std::vector<int>& arr, std::vector<int>& result) {\n    for(int i = 0; i < arr.size(); i++) {\n        result.push_back(arr[i] * 2);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nint sumCoordinates(const Point* p) {\n    return p->x + p->y;\n}", "target_code": "class Point {\npublic:\n    int x;\n    int y;\n\n    int sumCoordinates() {\n        return x + y;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapValues(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swapValues(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*) malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *array) { free(array); }", "target_code": "void freeArray(int *array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *array, int size) { for (int i = 0; i < size; i++) { printf('%d ', array[i]); } }", "target_code": "void printArray(std::vector<int> &array) { for (int num : array) { std::cout << num << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* array = createArray(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nint main() {\n    struct Node* n = createNode(10);\n    printf(\"Node data: %d\\n\", n->data);\n    free(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nint main() {\n    Node* n = createNode(10);\n    std::cout << \"Node data: \" << n->data << std::endl;\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyMatrix(int A[][2], int B[][2], int C[][2]) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            C[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int A[2][2] = {{1, 2}, {3, 4}};\n    int B[2][2] = {{1, 0}, {0, 1}};\n    int C[2][2];\n    multiplyMatrix(A, B, C);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", C[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(const std::vector<std::vector<int>>& A, const std::vector<std::vector<int>>& B, std::vector<std::vector<int>>& C) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            C[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> A = {{1, 2}, {3, 4}};\n    std::vector<std::vector<int>> B = {{1, 0}, {0, 1}};\n    std::vector<std::vector<int>> C(2, std::vector<int>(2));\n    multiplyMatrix(A, B, C);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            std::cout << C[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_ptr(int* x) {\n    *x = *x * 2;\n}\n\nint main() {\n    int num = 5;\n    c_function_ptr(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_ref(int& x) {\n    x = x * 2;\n}\n\nint main() {\n    int num = 5;\n    cpp_function_ref(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_array(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_function_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_vector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num = num * 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid c_function_struct(struct c_struct* s) {\n    s->id = 100;\n    strcpy(s->name, \"John\");\n}\n\nint main() {\n    struct c_struct my_struct;\n    c_function_struct(&my_struct);\n    printf(\"%d, %s\\n\", my_struct.id, my_struct.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function_struct(cpp_struct& s) {\n    s.id = 100;\n    s.name = \"John\";\n}\n\nint main() {\n    cpp_struct my_struct;\n    cpp_function_struct(my_struct);\n    std::cout << my_struct.id << \", \" << my_struct.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function_malloc(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int* ptr = (int*)c_function_malloc(sizeof(int));\n    *ptr = 10;\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function_new() {\n    return new int;\n}\n\nint main() {\n    int* ptr = cpp_function_new();\n    *ptr = 10;\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_ptr_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    c_function_ptr_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_vector(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nint main() {\n    int* arr = new int[5];\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    cpp_function_vector(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_ptr_struct(int* id, char* name) {\n    *id = 100;\n    sprintf(name, \"John\");\n}\n\nint main() {\n    int id;\n    char name[20];\n    c_function_ptr_struct(&id, name);\n    printf(\"%d, %s\\n\", id, name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid cpp_function_struct(int& id, std::string& name) {\n    id = 100;\n    name = \"John\";\n}\n\nint main() {\n    int id;\n    std::string name;\n    cpp_function_struct(id, name);\n    std::cout << id << \", \" << name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 10;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    arr[0] = 10;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exp) {\n    int result = 1;\n    while (exp > 0) {\n        result *= base;\n        exp--;\n    }\n    return result;\n}\n\nint main() {\n    int res = power(2, 3);\n    printf(\"2^3 = %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint power(int base, int exp) {\n    int result = 1;\n    while (exp > 0) {\n        result *= base;\n        exp--;\n    }\n    return result;\n}\n\nint main() {\n    int res = power(2, 3);\n    std::cout << \"2^3 = \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nint main() {\n    Student s;\n    s.id = 1;\n    strcpy(s.name, \"John\");\n    printf(\"Student: ID=%d, Name=%s\\n\", s.id, s.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nint main() {\n    Student s;\n    s.id = 1;\n    s.name = \"John\";\n    std::cout << \"Student: ID=\" << s.id << \", Name=\" << s.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid squareArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    squareArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    squareVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p1 = createPoint(10, 20);\n    printPoint(p1);\n    free(p1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p1 = createPoint(10, 20);\n    printPoint(*p1);\n    delete p1;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    freeIntArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    freeIntArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nvoid printEmployee(const Employee* emp) {\n    printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name);\n}\n\nint main() {\n    Employee* emp = (Employee*)malloc(sizeof(Employee));\n    emp->id = 1;\n    strcpy(emp->name, \"John\");\n    printEmployee(emp);\n    free(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nvoid printEmployee(const Employee& emp) {\n    std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n}\n\nint main() {\n    Employee* emp = new Employee;\n    emp->id = 1;\n    emp->name = \"John\";\n    printEmployee(*emp);\n    delete emp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = NULL;\n    return new_node;\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = nullptr;\n    return new_node;\n}\n\nint main() {\n    Node *node = create_node(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_array(const std::vector<int> &src, std::vector<int> &dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2;\n    copy_array(arr1, arr2);\n    for (int i = 0; i < arr2.size(); i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumArray(int *arr, int size, int *result) {\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int result = 0;\n    sumArray(array, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumVector(const std::vector<int> &vec, int &result) {\n    for(int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = 0;\n    sumVector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const struct Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseString(char *str) {\n    int start = 0;\n    int end = strlen(str) - 1;\n    while (start < end) {\n        char temp = str[start];\n        str[start] = str[end];\n        str[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    int start = 0;\n    int end = str.length() - 1;\n    while (start < end) {\n        char temp = str[start];\n        str[start] = str[end];\n        str[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *array = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createArray(int size) {\n    int *arr = new int[size];\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *array = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << array[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] array;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid doubleValue(int *num) {\n    *num *= 2;\n}\n\nint main() {\n    int value = 5;\n    doubleValue(&value);\n    printf(\"Doubled value: %d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid doubleValue(int &num) {\n    num *= 2;\n}\n\nint main() {\n    int value = 5;\n    doubleValue(value);\n    std::cout << \"Doubled value: \" << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int calculate_distance(Point* p1, Point* p2) { return sqrt(pow((p2->x - p1->x), 2) + pow((p2->y - p1->y), 2)); }", "target_code": "struct Point { int x; int y; }; int calculate_distance(const Point& p1, const Point& p2) { return sqrt(pow((p2.x - p1.x), 2) + pow((p2.y - p1.y), 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - 1 - i]; arr[size - 1 - i] = temp; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for (int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *a, int *b) { return *a + *b; }", "target_code": "int sum(int &a, int &b) { return a + b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { for(int i = 0; i < size/2; ++i) { int temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverseVector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; void setPoint(Point *pt, int x, int y) { pt->x = x; pt->y = y; }", "target_code": "struct Point { int x; int y; }; void setPoint(Point &pt, int x, int y) { pt.x = x; pt.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *) malloc(size * sizeof(int)); } void freeArray(int *arr) { free(arr); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max(int *arr, int size) { int maxVal = arr[0]; for(int i = 1; i < size; ++i) { if(arr[i] > maxVal) { maxVal = arr[i]; } } return maxVal; }", "target_code": "int max(std::vector<int> &vec) { return *std::max_element(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid printStudent(Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student student = {1, \"Alice\"};\n    printStudent(&student);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid printStudent(const Student &s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student student = {1, \"Alice\"};\n    printStudent(student);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point *p) {\n    printf(\"x: %d, y: %d\\n\", p->x, p->y);\n}\n\nint main() {\n    Point point = {3, 5};\n    printPoint(&point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point point = {3, 5};\n    printPoint(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *create_vector(int size) {\n    int *arr = new int[size];\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_vector(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const struct Rectangle *r) {\n    return r->length * r->width;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    int result = area(&rect);\n    printf(\"Area: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    int result = area(rect);\n    std::cout << \"Area: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = create_array(5);\n    free_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> array = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int result = sum_array(array, 5);\n    printf(\"Sum = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n    int result = sum_array(array);\n    std::cout << \"Sum = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Función en C que suma dos enteros\nint sum(int a, int b) {\n    return a + b;\n}\n\n// Función equivalente en C++ que suma dos enteros\nint sum(int a, int b) {\n    return a + b;\n}", "target_code": "#include <iostream>\n\n// Función en C++ que suma dos enteros\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout << sum(3, 4) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Función en C que duplica un número usando punteros\nvoid duplicate(int *num) {\n    *num *= 2;\n}\n\n// Función equivalente en C++ que duplica un número usando referencias\nvoid duplicate(int &num) {\n    num *= 2;\n}", "target_code": "#include <iostream>\n\n// Función en C++ que duplica un número usando referencias\nvoid duplicate(int &num) {\n    num *= 2;\n}\n\nint main() {\n    int num = 5;\n    duplicate(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Función en C que suma los elementos de un array\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n// Función equivalente en C++ que suma los elementos de un vector\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// Función en C++ que suma los elementos de un vector\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::cout << sum_vector(vec) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Estructura en C que representa un punto en 2D\nstruct Point {\n    int x;\n    int y;\n};\n\n// Función en C que calcula la distancia entre dos puntos\nfloat distance(struct Point *p1, struct Point *p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}\n\n// Estructura equivalente en C++ que representa un punto en 2D\nstruct Point {\n    int x;\n    int y;\n};\n\n// Función equivalente en C++ que calcula la distancia entre dos puntos\nfloat distance(struct Point &p1, struct Point &p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}", "target_code": "#include <iostream>\n#include <cmath>\n\n// Estructura en C++ que representa un punto en 2D\nstruct Point {\n    int x;\n    int y;\n};\n\n// Función en C++ que calcula la distancia entre dos puntos\nfloat distance(struct Point &p1, struct Point &p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}\n\nint main() {\n    Point p1 = {0, 0};\n    Point p2 = {3, 4};\n    std::cout << distance(p1, p2) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Función en C que crea un array dinámico e inicializa sus elementos\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\n// Función equivalente en C++ que crea un vector dinámico e inicializa sus elementos\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// Función en C++ que crea un vector dinámico e inicializa sus elementos\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size()/2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size()-1-i];\n        vec[vec.size()-1-i] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createVector(int size) {\n    int *arr = new int[size];\n    for(int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createVector(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid initializeArray(Array *arr, int size) {\n    arr->data = (int *)malloc(size * sizeof(int));\n    arr->size = size;\n}\n\nvoid freeArray(Array *arr) {\n    free(arr->data);\n    arr->size = 0;\n}\n\nint main() {\n    Array arr;\n    initializeArray(&arr, 5);\n    for(int i = 0; i < arr.size; i++) {\n        arr.data[i] = i;\n        printf(\"%d \", arr.data[i]);\n    }\n    printf(\"\\n\");\n    freeArray(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n    Array(int size) : size(size) {\n        data.resize(size);\n    }\n};\n\nint main() {\n    Array arr(5);\n    for(int i = 0; i < arr.size; i++) {\n        arr.data[i] = i;\n        std::cout << arr.data[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumarArrays(int* arr1, int* arr2, int* resultado, int size) {\n    for (int i = 0; i < size; ++i) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}", "target_code": "void sumarArrays(const std::vector<int>& arr1, const std::vector<int>& arr2, std::vector<int>& resultado) {\n    for (int i = 0; i < arr1.size(); ++i) {\n        resultado.push_back(arr1[i] + arr2[i]);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid imprimirPunto(Punto* punto) {\n    printf(\"(%d, %d)\\n\", punto->x, punto->y);\n}", "target_code": "struct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimirPunto(const Punto& punto) {\n    std::cout << \"(\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicarArray(int* arr, int size) {\n    int* nuevoArr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        nuevoArr[i] = arr[i] * 2;\n    }\n    return nuevoArr;\n}", "target_code": "std::vector<int> duplicarArray(const std::vector<int>& arr) {\n    std::vector<int> nuevoArr;\n    for (int i = 0; i < arr.size(); ++i) {\n        nuevoArr.push_back(arr[i] * 2);\n    }\n    return nuevoArr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void intercambiarValores(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void intercambiarValores(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char nombre[50];\n} Estudiante;\n\nEstudiante* crearEstudiante(int id, const char* nombre) {\n    Estudiante* est = (Estudiante*)malloc(sizeof(Estudiante));\n    est->id = id;\n    strcpy(est->nombre, nombre);\n    return est;\n}", "target_code": "struct Estudiante {\n    int id;\n    std::string nombre;\n};\n\nEstudiante* crearEstudiante(int id, const std::string& nombre) {\n    Estudiante* est = new Estudiante;\n    est->id = id;\n    est->nombre = nombre;\n    return est;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for (int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{ x, y }; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_ints(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_ints(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void print_rectangle(Rectangle* rect) { printf(\"Width: %d, Height: %d\\n\", rect->width, rect->height); }", "target_code": "struct Rectangle { int width; int height; }; void print_rectangle(const Rectangle& rect) { std::cout << \"Width: \" << rect.width << \", Height: \" << rect.height << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyArray(int* arr, int size, int multiplier) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= multiplier;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n    multiplyArray(array, size, 2);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyVector(std::vector<int>& vec, int multiplier) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= multiplier;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    multiplyVector(vec, 2);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* array = createArray(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    printf(\"Area: %d\\n\", calculateArea(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    std::cout << \"Area: \" << calculateArea(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_integers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_integers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_integers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_integers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* square_array(int *arr, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * arr[i];\n    }\n    return result;\n}\n\nint main() {\n    int original[] = {1, 2, 3, 4};\n    int *squared = square_array(original, 4);\n    for (int i = 0; i < 4; i++) {\n        printf(\"%d\\n\", squared[i]);\n    }\n    free(squared);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> square_array(const std::vector<int> &arr) {\n    std::vector<int> result(arr.size());\n    for (size_t i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * arr[i];\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> original = {1, 2, 3, 4};\n    std::vector<int> squared = square_array(original);\n    for (int num : squared) {\n        std::cout << num << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(struct Rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    struct Rectangle r = {5, 10};\n    int area = area_rectangle(r);\n    printf(\"Area of rectangle: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = area_rectangle(r);\n    std::cout << \"Area of rectangle: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* arr, int size){\n    for(int i = 0; i < size; i++){\n        arr[i] *= 2;\n    }\n}\n\nint main(){\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    for(int i = 0; i < 5; i++){\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int>& vec){\n    for(int i = 0; i < vec.size(); i++){\n        vec[i] *= 2;\n    }\n}\n\nint main(){\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for(int i = 0; i < vec.size(); i++){\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct C_Struct{\n    int x;\n    int y;\n};\n\nvoid c_function2(struct C_Struct* s){\n    s->x *= 2;\n    s->y *= 2;\n}\n\nint main(){\n    struct C_Struct s = {1, 2};\n    c_function2(&s);\n    printf(\"%d %d\\n\", s.x, s.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Cpp_Struct{\n    int x;\n    int y;\n};\n\nvoid cpp_function2(Cpp_Struct& s){\n    s.x *= 2;\n    s.y *= 2;\n}\n\nint main(){\n    Cpp_Struct s = {1, 2};\n    cpp_function2(s);\n    std::cout << s.x << \" \" << s.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int** matrix, int rows, int cols){\n    for(int i = 0; i < rows; i++){\n        for(int j = 0; j < cols; j++){\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main(){\n    int** matrix = (int**)malloc(3 * sizeof(int*));\n    for(int i = 0; i < 3; i++){\n        matrix[i] = (int*)malloc(3 * sizeof(int));\n        for(int j = 0; j < 3; j++){\n            matrix[i][j] = i + j;\n        }\n    }\n    c_function3(matrix, 3, 3);\n    for(int i = 0; i < 3; i++){\n        for(int j = 0; j < 3; j++){\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function3(std::vector<std::vector<int>>& matrix){\n    for(int i = 0; i < matrix.size(); i++){\n        for(int j = 0; j < matrix[i].size(); j++){\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main(){\n    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    cpp_function3(matrix);\n    for(int i = 0; i < matrix.size(); i++){\n        for(int j = 0; j < matrix[i].size(); j++){\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int* arr, int size){\n    for(int i = 0; i < size; i++){\n        arr[i] *= 3;\n    }\n}\n\nint main(){\n    int* arr = (int*)malloc(5 * sizeof(int));\n    for(int i = 0; i < 5; i++){\n        arr[i] = i + 1;\n    }\n    c_function4(arr, 5);\n    for(int i = 0; i < 5; i++){\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function4(std::vector<int>& vec){\n    for(int i = 0; i < vec.size(); i++){\n        vec[i] *= 3;\n    }\n}\n\nint main(){\n    std::vector<int> vec(5);\n    for(int i = 0; i < 5; i++){\n        vec[i] = i + 1;\n    }\n    cpp_function4(vec);\n    for(int i = 0; i < 5; i++){\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size){\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++){\n        new_arr[i] = arr[i] * 4;\n    }\n    for(int i = 0; i < size; i++){\n        arr[i] = new_arr[i];\n    }\n    free(new_arr);\n}\n\nint main(){\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function5(arr, 5);\n    for(int i = 0; i < 5; i++){\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<int>& vec){\n    std::vector<int> new_vec(vec.size());\n    for(int i = 0; i < vec.size(); i++){\n        new_vec[i] = vec[i] * 4;\n    }\n    vec = new_vec;\n}\n\nint main(){\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function5(vec);\n    for(int i = 0; i < vec.size(); i++){\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int arr[], int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point p) { printf(\"(%d, %d)\\n\", p.x, p.y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; } void free_array(int *arr) { free(arr); }", "target_code": "int *create_vector(int size) { return new int[size]; } void free_vector(int *vec) { delete[] vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle rect) { return rect.width * rect.height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int arr[], int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { for(int i = 0; i < arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int n) {\n    int *arr = (int*)malloc(n * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int n) {\n    std::vector<int> vec(n);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid display_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    display_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid display_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    display_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char *dest, const char *src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char src[] = \"Hello\";\n    char dest[10];\n    copy_string(dest, src);\n    printf(\"Copied string: %s\\n\", dest);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(char *dest, const char *src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char *src = \"Hello\";\n    char dest[10];\n    copy_string(dest, src);\n    std::cout << \"Copied string: \" << dest << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle r = {5, 10};\n    printf(\"Area: %d\\n\", area(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\nint main() {\n    int *arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\nint* createArray(int size) {\n    return new int[size];\n}\nint main() {\n    int *arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\nvoid printPoint(Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\nint main() {\n    Point a = {3, 4};\n    printPoint(a);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int _x, int _y) : x(_x), y(_y) {}\n};\nvoid printPoint(const Point& p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\nint main() {\n    Point a(3, 4);\n    printPoint(a);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\nvoid copyArray(const std::vector<int>& src, std::vector<int>& dest) {\n    for(int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2;\n    copyArray(arr1, arr2);\n    for(int i = 0; i < arr2.size(); i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "std::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;", "target_code": "struct Point {\n    int x;\n    int y;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_memory(int *ptr) {\n    free(ptr);\n}", "target_code": "void free_memory(int *ptr) {\n    delete ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "void print_array(const std::vector<int> &arr) {\n    for (int x : arr) {\n        std::cout << x << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int val : arr) std::cout << val << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *array, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += array[i]; return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for(int i = 0; i < vec.size(); i++) sum += vec[i]; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void delete_array(int *array) { free(array); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *array, int size) { for(int i = 0; i < size; i++) printf(\"%d \", array[i]); printf(\"\\n\"); }", "target_code": "void print_vector(std::vector<int> &vec) { for(int i = 0; i < vec.size(); i++) std::cout << vec[i] << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    return 0;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse(arr, 5);\n    return 0;\n}", "target_code": "void reverse(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Student;\n\nvoid printStudent(Student* s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student student;\n    student.id = 1;\n    strcpy(student.name, \"John\");\n    printStudent(&student);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid printStudent(const Student& s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student student;\n    student.id = 1;\n    student.name = \"John\";\n    printStudent(student);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "int* createArray(int size) {\n    int* arr = new int[size];\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addOneToArray(int* arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    addOneToArray(arr, 5);\n    return 0;\n}", "target_code": "void addOneToArray(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size(); ++i) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    addOneToArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; ++i) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    return 0;\n}", "target_code": "int sum(const std::vector<int>& arr) {\n    int total = 0;\n    for (int i = 0; i < arr.size(); ++i) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_pointers(int *a, int *b) {\n    *b = *a + 5;\n}\n\nint main() {\n    int num1 = 10;\n    int num2;\n    c_function_pointers(&num1, &num2);\n    printf(\"%d\\n\", num2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_references(int &a, int &b) {\n    b = a + 5;\n}\n\nint main() {\n    int num1 = 10;\n    int num2;\n    cpp_function_references(num1, num2);\n    std::cout << num2 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function_arrays(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d\\n\", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function_arrays(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_vector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << std::endl;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function_structs(struct c_struct *s) {\n    s->x = 5;\n    s->y = 10;\n}\n\nint main() {\n    struct c_struct my_struct;\n    c_function_structs(&my_struct);\n    printf(\"%d, %d\\n\", my_struct.x, my_struct.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function_structs(cpp_struct &s) {\n    s.x = 5;\n    s.y = 10;\n}\n\nint main() {\n    cpp_struct my_struct;\n    cpp_function_structs(my_struct);\n    std::cout << my_struct.x << \", \" << my_struct.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function_malloc(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int *)c_function_malloc(sizeof(int));\n    *ptr = 10;\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function_new() {\n    return new int;\n}\n\nint main() {\n    int *ptr = cpp_function_new();\n    *ptr = 10;\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_pointers_struct(struct c_struct *s) {\n    s->x = 5;\n    s->y = 10;\n}\n\nint main() {\n    struct c_struct *my_struct = (struct c_struct *)malloc(sizeof(struct c_struct));\n    c_function_pointers_struct(my_struct);\n    printf(\"%d, %d\\n\", my_struct->x, my_struct->y);\n    free(my_struct);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function_references_struct(cpp_struct &s) {\n    s.x = 5;\n    s.y = 10;\n}\n\nint main() {\n    cpp_struct *my_struct = new cpp_struct;\n    cpp_function_references_struct(*my_struct);\n    std::cout << my_struct->x << \", \" << my_struct->y << std::endl;\n    delete my_struct;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapPointers(int **ptr1, int **ptr2) {\n    int *temp = *ptr1;\n    *ptr1 = *ptr2;\n    *ptr2 = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int *ptrA = &a, *ptrB = &b;\n    printf(\"Before swap: a = %d, b = %d\\n\", *ptrA, *ptrB);\n    swapPointers(&ptrA, &ptrB);\n    printf(\"After swap: a = %d, b = %d\\n\", *ptrA, *ptrB);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapPointers(int *&ptr1, int *&ptr2) {\n    int *temp = ptr1;\n    ptr1 = ptr2;\n    ptr2 = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int *ptrA = &a, *ptrB = &b;\n    std::cout << \"Before swap: a = \" << *ptrA << \", b = \" << *ptrB << std::endl;\n    swapPointers(ptrA, ptrB);\n    std::cout << \"After swap: a = \" << *ptrA << \", b = \" << *ptrB << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr = createArray(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        std::cout << \"arr[\" << i << \"] = \" << arr[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseString(char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    int length = str.length();\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    printArray(arr, size);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << \"arr[\" << i << \"] = \" << arr[i] << std::endl;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    printArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverseArray(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid displayPerson(Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    displayPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid displayPerson(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    displayPerson(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid fillArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n}\n\nint main() {\n    int *arr = createArray(5);\n    fillArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nvoid fillVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i + 1;\n    }\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    fillVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint calculateDistance(Point *p1, Point *p2) {\n    int dx = p1->x - p2->x;\n    int dy = p1->y - p2->y;\n    return sqrt(dx*dx + dy*dy);\n}\n\nint main() {\n    Point p1 = {0, 0};\n    Point p2 = {3, 4};\n    int distance = calculateDistance(&p1, &p2);\n    printf(\"Distance: %d\\n\", distance);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <cmath>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint calculateDistance(const Point &p1, const Point &p2) {\n    int dx = p1.x - p2.x;\n    int dy = p1.y - p2.y;\n    return std::sqrt(dx*dx + dy*dy);\n}\n\nint main() {\n    Point p1 = {0, 0};\n    Point p2 = {3, 4};\n    int distance = calculateDistance(p1, p2);\n    std::cout << \"Distance: \" << distance << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = calculateArea(&r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = calculateArea(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {2, 3};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point pt = {2, 3};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid duplicate_array(int *arr, int size) {\n    int *new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    // Do something with new_arr\n    free(new_arr);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    duplicate_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid duplicate_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr(arr.begin(), arr.end());\n    // Do something with new_arr\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    duplicate_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap_int(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student_info(Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student_info(&s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student_info(Student &s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student_info(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculate_area(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    printf(\"Area: %d\\n\", calculate_area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area: \" << calculate_area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    int *arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPointInfo(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    printPointInfo(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPointInfo(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    printPointInfo(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(struct Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    struct Rectangle rect;\n    rect.width = 10;\n    rect.height = 5;\n    printf(\"Area of rectangle: %d\\n\", getArea(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect;\n    rect.width = 10;\n    rect.height = 5;\n    std::cout << \"Area of rectangle: \" << getArea(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(const Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int>* create_vector(int size) { return new std::vector<int>(size); } void free_vector(std::vector<int>* vec) { delete vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person(const Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int temp; for(int i = 0; i < size/2; i++) { temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_sum(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n", "target_code": "#include <iostream>\n\nvoid cpp_sum(int &a, int &b, int &result) {\n    result = a + b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_multiply(int *a, int *b, int *result) {\n    *result = *a * *b;\n}\n", "target_code": "#include <iostream>\n\nvoid cpp_multiply(int &a, int &b, int &result) {\n    result = a * b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse(int *array, int length) {\n    int *temp = (int *)malloc(length * sizeof(int));\n    for (int i = 0; i < length; i++) {\n        temp[i] = array[length - 1 - i];\n    }\n    for (int i = 0; i < length; i++) {\n        array[i] = temp[i];\n    }\n    free(temp);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_reverse(std::vector<int> &array) {\n    std::vector<int> temp;\n    for (int i = array.size() - 1; i >= 0; i--) {\n        temp.push_back(array[i]);\n    }\n    array = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_translate(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_translate(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_square(int *array, int length) {\n    for (int i = 0; i < length; i++) {\n        array[i] *= array[i];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_square(std::vector<int> &array) {\n    for (int i = 0; i < array.size(); i++) {\n        array[i] *= array[i];\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sum_arrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    sum_arrays(arr1, arr2, result, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    sum_vectors(vec1, vec2, result);\n    for(int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    if(p != NULL) {\n        p->x = x;\n        p->y = y;\n    }\n    return p;\n}\n\nint main() {\n    Point* point = create_point(3, 4);\n    printf(\"Point coordinates: %d, %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* point = create_point(3, 4);\n    std::cout << \"Point coordinates: \" << point->x << \", \" << point->y << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    char name[20];\n    int age;\n} Person;\n\nvoid print_person(const Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point pt) {\n    printf(\"(%d, %d)\\n\", pt.x, pt.y);\n}\n\nint main() {\n    struct Point p = {1, 2};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &pt) {\n    std::cout << \"(\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {1, 2};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid* allocate_memory(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int*)allocate_memory(sizeof(int));\n    *ptr = 10;\n    printf(\"Value: %d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* allocate_memory() {\n    return new int;\n}\n\nint main() {\n    int *ptr = allocate_memory();\n    *ptr = 10;\n    std::cout << \"Value: \" << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add_two_arrays(int *arr1, int *arr2, int size) {\n    for (int i = 0; i < size; i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    add_two_arrays(arr1, arr2, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add_two_vectors(std::vector<int> &vec1, const std::vector<int> &vec2) {\n    for (int i = 0; i < vec1.size(); i++) {\n        vec1[i] += vec2[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    add_two_vectors(vec1, vec2);\n    for (int i = 0; i < 3; i++) {\n        std::cout << vec1[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* array, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += array[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person; Person* create_person(int id, const char* name) { Person* p = (Person*)malloc(sizeof(Person)); p->id = id; strcpy(p->name, name); return p; } void delete_person(Person* p) { free(p); }", "target_code": "struct Person { int id; std::string name; }; Person* create_person(int id, const std::string& name) { Person* p = new Person; p->id = id; p->name = name; return p; } void delete_person(Person* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* multiply_by_scalar(int* array, int size, int scalar) { int* result = (int*)malloc(sizeof(int) * size); for(int i = 0; i < size; i++) { result[i] = array[i] * scalar; } return result; }", "target_code": "std::vector<int> multiply_by_scalar(const std::vector<int>& vec, int scalar) { std::vector<int> result; for(int i = 0; i < vec.size(); i++) { result.push_back(vec[i] * scalar); } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* r) { return r->width * r->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& r) { return r.width * r.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid c_function1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int* array = (int*)malloc(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        array[i] = i + 1;\n    }\n    c_function1(array, 5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_function2(Person* p) {\n    p->id = 100;\n    strcpy(p->name, \"John\");\n}\n\nint main() {\n    Person* person = (Person*)malloc(sizeof(Person));\n    c_function2(person);\n    free(person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function2(Person& p) {\n    p.id = 100;\n    p.name = \"John\";\n}\n\nint main() {\n    Person person;\n    cpp_function2(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int** ptr) {\n    *ptr = (int*)malloc(sizeof(int));\n    **ptr = 42;\n}\n\nint main() {\n    int* pointer = NULL;\n    c_function3(&pointer);\n    free(pointer);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function3(int*& ptr) {\n    ptr = new int;\n    *ptr = 42;\n}\n\nint main() {\n    int* pointer = nullptr;\n    cpp_function3(pointer);\n    delete pointer;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 3;\n    }\n}\n\nint main() {\n    int* array = (int*)malloc(3 * sizeof(int));\n    for(int i = 0; i < 3; i++) {\n        array[i] = i + 1;\n    }\n    c_function4(array, 3);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function4(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num *= 3;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    cpp_function4(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int* array = (int*)malloc(4 * sizeof(int));\n    for(int i = 0; i < 4; i++) {\n        array[i] = i + 1;\n    }\n    c_function5(array, 4);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(const std::vector<int>& vec) {\n    int sum = 0;\n    for(const int& num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4};\n    cpp_function5(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* source, int* target, int size) { for(int i = 0; i < size; i++) { target[i] = source[i]; } }", "target_code": "void copyVector(const std::vector<int>& source, std::vector<int>& target) { target = source; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeArray(int* array) { free(array); }", "target_code": "int* createArray(int size) { return new int[size]; } void freeArray(int* array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void setPoint(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void setPoint(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int* array, int size) { for(int i = 0; i < size; i++) { array[i] *= 2; } }", "target_code": "void doubleVector(std::vector<int>& vec) { for(int& num : vec) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", array[i]); } printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int>& vec) { for(const int& num : vec) { std::cout << num << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; ++i) {\n        *result += arr[i];\n    }\n}", "target_code": "void sum_array(const std::vector<int>& arr, int& result) {\n    result = 0;\n    for (int num : arr) {\n        result += num;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "int* create_array(int size) {\n    return new int[size];\n}\n\nvoid free_array(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap_values(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_values(int* arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] *= 2;\n    }\n}", "target_code": "void double_values(std::vector<int>& arr) {\n    for (int& num : arr) {\n        num *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArray(int* arr, int size, int* result) { \n    int sum = 0; \n    for(int i = 0; i < size; i++) { \n        sum += arr[i]; \n    } \n    *result = sum; \n} \n", "target_code": "void sumArray(const std::vector<int>& arr, int& result) { \n    int sum = 0; \n    for(int i = 0; i < arr.size(); i++) { \n        sum += arr[i]; \n    } \n    result = sum; \n} \n"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { \n    int id; \n    char name[50]; \n} Person; \n", "target_code": "struct Person { \n    int id; \n    std::string name; \n}; \n"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { \n    int* arr = (int*)malloc(size * sizeof(int)); \n    return arr; \n} \n", "target_code": "std::vector<int> createIntArray(int size) { \n    return std::vector<int>(size); \n} \n"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { \n    int temp = *a; \n    *a = *b; \n    *b = temp; \n} \n", "target_code": "void swap(int& a, int& b) { \n    int temp = a; \n    a = b; \n    b = temp; \n} \n"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { \n    for(int i = 0; i < size; i++) { \n        printf(\"%d \", arr[i]); \n    } \n    printf(\"\\n\"); \n} \n", "target_code": "void printArray(const std::vector<int>& arr) { \n    for(int num : arr) { \n        std::cout << num << ' '; \n    } \n    std::cout << std::endl; \n} \n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    incrementar_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementar_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec(size);\n    for (int i = 0; i < size; i++) {\n        vec[i] = i;\n    }\n    incrementar_vector(vec);\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(struct Punto p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Punto punto = {3, 4};\n    imprimir_punto(punto);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto punto = {3, 4};\n    imprimir_punto(punto);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid intercambiar(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid intercambiar(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiar(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicar_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}\n\nint main() {\n    int size = 3;\n    int arr[] = {1, 2, 3};\n    int* new_arr = duplicar_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicar_vector(const std::vector<int>& vec) {\n    std::vector<int> new_vec(vec.size());\n    for (int i = 0; i < vec.size(); i++) {\n        new_vec[i] = vec[i] * 2;\n    }\n    return new_vec;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    std::vector<int> new_vec = duplicar_vector(vec);\n    for (int i = 0; i < new_vec.size(); i++) {\n        std::cout << new_vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint suma(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 7;\n    printf(\"La suma es: %d\\n\", suma(x, y));\n    return 0;\n}", "target_code": "#include <iostream>\n\nint suma(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 7;\n    std::cout << \"La suma es: \" << suma(x, y) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int n) { return (int*) malloc(n * sizeof(int)); }", "target_code": "int* createArray(int n) { return new int[n]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; ++i) { printf(\"%d \", arr[i]); } }", "target_code": "void printArray(const std::vector<int>& arr) { for(const auto& elem : arr) { std::cout << elem << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(const auto& elem : vec) { sum += elem; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroy_point(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; } void destroy_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* values; int size; } Array; void init_array(Array* arr, int size) { arr->values = (int*)malloc(size * sizeof(int)); arr->size = size; } void free_array(Array* arr) { free(arr->values); }", "target_code": "class Array { public: std::vector<int> values; void init_array(int size) { values.resize(size); } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int square(int x) { return x * x; }", "target_code": "int square(const int& x) { return x * x; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void destroy_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void destroy_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_array(size);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr = create_array(size);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int result = sum_array(arr, size);\n    printf(\"Sum of array: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for(int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum of array: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_list(struct Node* head) {\n    while(head != NULL) {\n        printf(\"%d -> \", head->data);\n        head = head->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n    struct Node* second = NULL;\n    struct Node* third = NULL;\n\n    head = (struct Node*)malloc(sizeof(struct Node));\n    second = (struct Node*)malloc(sizeof(struct Node));\n    third = (struct Node*)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = second;\n\n    second->data = 2;\n    second->next = third;\n\n    third->data = 3;\n    third->next = NULL;\n\n    print_list(head);\n\n    free(head);\n    free(second);\n    free(third);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_list(const Node* head) {\n    while(head != NULL) {\n        std::cout << head->data << \" -> \";\n        head = head->next;\n    }\n    std::cout << \"NULL\" << std::endl;\n}\n\nint main() {\n    Node* head = nullptr;\n    Node* second = nullptr;\n    Node* third = nullptr;\n\n    head = new Node;\n    second = new Node;\n    third = new Node;\n\n    head->data = 1;\n    head->next = second;\n\n    second->data = 2;\n    second->next = third;\n\n    third->data = 3;\n    third->next = nullptr;\n\n    print_list(head);\n\n    delete head;\n    delete second;\n    delete third;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for (int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point& p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_dynamic_array(int size) { return (int *)malloc(size * sizeof(int)); } void delete_dynamic_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_dynamic_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_struct_sum(const Point *p) { return p->x + p->y; }", "target_code": "int get_struct_sum(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumArrays(int *arr1, int *arr2, int *result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    sumArrays(arr1, arr2, result, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    sumVectors(vec1, vec2, result);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nstruct Person* createPerson(const char* name, int age) {\n    struct Person* newPerson = (struct Person*)malloc(sizeof(struct Person));\n    strcpy(newPerson->name, name);\n    newPerson->age = age;\n    return newPerson;\n}\n\nvoid printPerson(struct Person* person) {\n    printf(\"Name: %s, Age: %d\\n\", person->name, person->age);\n}\n\nint main() {\n    struct Person* p = createPerson(\"Alice\", 25);\n    printPerson(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nPerson* createPerson(const std::string& name, int age) {\n    Person* newPerson = new Person;\n    newPerson->name = name;\n    newPerson->age = age;\n    return newPerson;\n}\n\nvoid printPerson(const Person* person) {\n    std::cout << \"Name: \" << person->name << \", Age: \" << person->age << std::endl;\n}\n\nint main() {\n    Person* p = createPerson(\"Alice\", 25);\n    printPerson(p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid printIntArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int* array = createIntArray(5);\n    printIntArray(array, 5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    int* arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid printIntArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n}\n\nint main() {\n    int* array = createIntArray(5);\n    printIntArray(array, 5);\n    delete[] array;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *ptr) {\n    (*ptr)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"num: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << \"num: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_function2(struct Point *p) {\n    p->x = 10;\n    p->y = 20;\n}\n\nint main() {\n    struct Point p;\n    c_function2(&p);\n    printf(\"%d %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function2(Point &p) {\n    p.x = 10;\n    p.y = 20;\n}\n\nint main() {\n    Point p;\n    cpp_function2(p);\n    std::cout << p.x << ' ' << p.y << '\\n';\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function3(int size) {\n    return malloc(size * sizeof(int));\n}\n\nint main() {\n    int *ptr = (int*)c_function3(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function3(int size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_function3(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << ptr[i] << ' ';\n    }\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid c_function4(struct Person *p) {\n    sprintf(p->name, \"John\");\n    p->age = 30;\n}\n\nint main() {\n    struct Person p;\n    c_function4(&p);\n    printf(\"%s %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_function4(Person &p) {\n    p.name = \"John\";\n    p.age = 30;\n}\n\nint main() {\n    Person p;\n    cpp_function4(p);\n    std::cout << p.name << ' ' << p.age << '\\n';\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int **matrix, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] = i * j;\n        }\n    }\n}\n\nint main() {\n    int rows = 3;\n    int cols = 3;\n    int **matrix = (int**)malloc(rows * sizeof(int*));\n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n    }\n    c_function5(matrix, rows, cols);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<std::vector<int>> &matrix) {\n    for (int i = 0; i < matrix.size(); i++) {\n        for (int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] = i * j;\n        }\n    }\n}\n\nint main() {\n    int rows = 3;\n    int cols = 3;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    cpp_function5(matrix);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            std::cout << matrix[i][j] << ' ';\n        }\n        std::cout << '\\n';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int> &arr) {\n    for(int &num : arr) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node *create_node(int data) {\n    struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n    node->data = data;\n    node->next = NULL;\n    return node;\n}\n\nvoid delete_node(struct Node *node) {\n    free(node);\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    delete_node(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n    Node(int d) : data(d), next(nullptr) {}\n    ~Node() { std::cout << \"Node deleted\" << std::endl; }\n};\n\nint main() {\n    Node *node = new Node(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;", "target_code": "struct Point {\n    int x;\n    int y;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "void printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) {\n    free(arr);\n}", "target_code": "void freeArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle *r) {\n    return r->length * r->width;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    printf(\"Area: %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    std::cout << \"Area: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 30};\n    print_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 30};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for (int x : arr) sum += x; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_and_initialize_array(int size, int value) { int* arr = (int*)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) arr[i] = value; return arr; }", "target_code": "std::vector<int> create_and_initialize_array(int size, int value) { return std::vector<int>(size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum of array: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum of array: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    printf(\"Area of rectangle: %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    std::cout << \"Area of rectangle: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; void setCoordinates(struct Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void setCoordinates(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void* customMalloc(int size) { return malloc(size); } void customFree(void* ptr) { free(ptr); }", "target_code": "void* customMalloc(int size) { return new char[size]; } void customFree(void* ptr) { delete[] static_cast<char*>(ptr); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function1(int *array, int size) {\n    for(int i=0; i<size; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    for(int i=0; i<5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int> &vec) {\n    for(int i=0; i<vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int data;\n};\n\nc_struct* c_function2() {\n    c_struct* ptr = (c_struct*) malloc(sizeof(c_struct));\n    ptr->data = 10;\n    return ptr;\n}\n\nint main() {\n    c_struct* ptr = c_function2();\n    printf(\"%d\\n\", ptr->data);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int data;\n};\n\ncpp_struct* cpp_function2() {\n    cpp_struct* ptr = new cpp_struct;\n    ptr->data = 10;\n    return ptr;\n}\n\nint main() {\n    cpp_struct* ptr = cpp_function2();\n    std::cout << ptr->data << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function3(int* a, int* b) {\n    *b = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_function3(&x, &y);\n    printf(\"%d\\n\", y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function3(int& a, int& b) {\n    b = a + b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_function3(x, y);\n    std::cout << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function4(int size) {\n    int* dynamic_array = (int*) malloc(size * sizeof(int));\n    for(int i=0; i<size; i++) {\n        dynamic_array[i] = i + 1;\n    }\n    for(int i=0; i<size; i++) {\n        printf(\"%d \", dynamic_array[i]);\n    }\n    free(dynamic_array);\n}\n\nint main() {\n    c_function4(5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function4(int size) {\n    int* dynamic_array = new int[size];\n    for(int i=0; i<size; i++) {\n        dynamic_array[i] = i + 1;\n    }\n    for(int i=0; i<size; i++) {\n        std::cout << dynamic_array[i] << \" \";\n    }\n    delete[] dynamic_array;\n}\n\nint main() {\n    cpp_function4(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function5(int* array, int size) {\n    for(int i=0; i<size; i++) {\n        array[i] += 10;\n    }\n}\n\nint main() {\n    int* arr = (int*) malloc(5 * sizeof(int));\n    for(int i=0; i<5; i++) {\n        arr[i] = i;\n    }\n    c_function5(arr, 5);\n    for(int i=0; i<5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(std::vector<int> &vec) {\n    for(int &num : vec) {\n        num += 10;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for(int i=0; i<5; i++) {\n        vec[i] = i;\n    }\n    cpp_function5(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int elem : vec) { sum += elem; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int start = 0; int end = size - 1; while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { int start = 0; int end = vec.size() - 1; while (start < end) { int temp = vec[start]; vec[start] = vec[end]; vec[end] = temp; start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void print_employee(const Employee* emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "struct Employee { int id; std::string name; }; void print_employee(const Employee& emp) { std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { int* arr = (int*)malloc(size * sizeof(int)); return arr; } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int>* create_vector(int size) { return new std::vector<int>(size); } void free_vector(std::vector<int>* vec) { delete vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_array(Employee* emp_arr, int size) { int total = 0; for(int i=0; i<size; i++) { total += emp_arr[i].id; } return total; }", "target_code": "int sum_struct_vector(const std::vector<Employee>& emp_vec) { int total = 0; for(const Employee& emp : emp_vec) { total += emp.id; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    c_swap(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    cpp_swap(x, y);\n    std::cout << x << \" \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse_array(int *arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_reverse_array(arr, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_reverse_vector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_reverse_vector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point point = {3, 4};\n    c_print_point(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point = {3, 4};\n    cpp_print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = c_create_array(size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_create_vector(int size) {\n    std::vector<int> vec;\n    for(int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = cpp_create_vector(size);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint c_area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    int area = c_area(&r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint cpp_area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    int area = cpp_area(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int *arr1, int *arr2, int *result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {5, 4, 3, 2, 1};\n    int size = 5;\n    int *result = (int *)malloc(size * sizeof(int));\n    addArrays(arr1, arr2, result, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2, std::vector<int> &result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (size_t i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {10, 20};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {10, 20};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swapIntegers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swapIntegers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createDynamicArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeDynamicArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *arr = createDynamicArray(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    freeDynamicArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createDynamicVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createDynamicVector(size);\n    for (int i = 0; i < size; i++) {\n        vec[i] = i + 1;\n    }\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printString(const char *str) {\n    while (*str) {\n        printf(\"%c\", *str);\n        str++;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char str[] = \"Hello, World!\";\n    printString(str);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid printString(const std::string &str) {\n    for (char c : str) {\n        std::cout << c;\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::string str = \"Hello, World!\";\n    printString(str);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumVector(const std::vector<int>& vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* createPoint(int x, int y) { return new Point {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeIntArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createIntVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printIntVector(const std::vector<int>& vec) { for (int num : vec) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += *(arr + i);\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    sum_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    sum_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        *(temp + i) = *(arr + size - 1 - i);\n    }\n    for (int i = 0; i < size; i++) {\n        *(arr + i) = *(temp + i);\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    while (head != NULL) {\n        printf(\"%d \", head->data);\n        head = head->next;\n    }\n}\n\nint main() {\n    struct Node *node1 = (struct Node*)malloc(sizeof(struct Node));\n    struct Node *node2 = (struct Node*)malloc(sizeof(struct Node));\n    struct Node *node3 = (struct Node*)malloc(sizeof(struct Node));\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = node3;\n    node3->data = 3;\n    node3->next = NULL;\n    print_list(node1);\n    free(node1);\n    free(node2);\n    free(node3);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_list(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" \";\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* node1 = new Node;\n    Node* node2 = new Node;\n    Node* node3 = new Node;\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = node3;\n    node3->data = 3;\n    node3->next = nullptr;\n    print_list(node1);\n    delete node1;\n    delete node2;\n    delete node3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle *rect = (struct Rectangle*)malloc(sizeof(struct Rectangle));\n    rect->width = 5;\n    rect->height = 3;\n    printf(\"Area: %d\\n\", area(rect));\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle* rect = new Rectangle;\n    rect->width = 5;\n    rect->height = 3;\n    std::cout << \"Area: \" << area(*rect) << std::endl;\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid translate(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(&p, 3, 4);\n    printf(\"Translated point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nvoid translate(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(p, 3, 4);\n    std::cout << \"Translated point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int temp;\n    for(int i = 0; i < size/2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nEmployee* createEmployee(int id, const char* name) {\n    Employee *emp = (Employee*) malloc(sizeof(Employee));\n    emp->id = id;\n    strcpy(emp->name, name);\n    return emp;\n}\n\nvoid deleteEmployee(Employee *emp) {\n    free(emp);\n}\n\nint main() {\n    Employee *emp = createEmployee(1, \"Alice\");\n    printf(\"Employee: %d, %s\\n\", emp->id, emp->name);\n    deleteEmployee(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Employee {\npublic:\n    int id;\n    std::string name;\n\n    Employee(int id, const std::string &name) : id(id), name(name) {}\n};\n\nint main() {\n    Employee *emp = new Employee(1, \"Alice\");\n    std::cout << \"Employee: \" << emp->id << \", \" << emp->name << std::endl;\n    delete emp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    printf(\"Area of rectangle: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    int area() {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r = {3, 4};\n    std::cout << \"Area of rectangle: \" << r.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid copyStudent(Student *dest, const Student *src) {\n    dest->id = src->id;\n    strcpy(dest->name, src->name);\n}\n\nint main() {\n    Student s1 = {1, \"Bob\"};\n    Student s2;\n    copyStudent(&s2, &s1);\n    printf(\"Copied student: %d, %s\\n\", s2.id, s2.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Student {\npublic:\n    int id;\n    std::string name;\n};\n\nvoid copyStudent(Student &dest, const Student &src) {\n    dest.id = src.id;\n    dest.name = src.name;\n}\n\nint main() {\n    Student s1 = {1, \"Bob\"};\n    Student s2;\n    copyStudent(s2, s1);\n    std::cout << \"Copied student: \" << s2.id << \", \" << s2.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(const Point* pt) {\n    printf(\"(%d, %d)\\n\", pt->x, pt->y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& pt) {\n    std::cout << \"(\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    arr[3] = 4;\n    arr[4] = 5;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint* create_array(int size) {\n    return new int[size];\n}\n\nvoid free_array(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    arr[3] = 4;\n    arr[4] = 5;\n    free_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area_rectangle(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = area_rectangle(&r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int area = area_rectangle(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *customMalloc(size_t size) {\n    void *ptr = malloc(size);\n    return ptr;\n}\n\nvoid customFree(void *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *ptr = (int *)customMalloc(sizeof(int));\n    *ptr = 42;\n    printf(\"%d\\n\", *ptr);\n    customFree(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid *customMalloc(size_t size) {\n    void *ptr = new char[size];\n    return ptr;\n}\n\nvoid customFree(void *ptr) {\n    delete[] static_cast<char*>(ptr);\n}\n\nint main() {\n    int *ptr = static_cast<int*>(customMalloc(sizeof(int)));\n    *ptr = 42;\n    std::cout << *ptr << std::endl;\n    customFree(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copyArray(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest;\n    copyVector(src, dest);\n    for (int num : dest) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i * 2;\n        std::cout << \"vec[\" << i << \"] = \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << \"vec[\" << i << \"] = \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(5, 10);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(5, 10);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void printIntArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) { free(arr); }", "target_code": "void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square(int* a) {\n    *a = (*a) * (*a);\n}\n\nint main() {\n    int x = 5;\n    square(&x);\n    printf(\"Square: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int& a) {\n    a = a * a;\n}\n\nint main() {\n    int x = 5;\n    square(x);\n    std::cout << \"Square: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPerson(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    printPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    printPerson(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumarArrays(int* array1, int* array2, int* resultado, int tam) {\n    for(int i = 0; i < tam; i++) {\n        resultado[i] = array1[i] + array2[i];\n    }\n}", "target_code": "void sumarArrays(const std::vector<int>& array1, const std::vector<int>& array2, std::vector<int>& resultado) {\n    for(int i = 0; i < array1.size(); i++) {\n        resultado.push_back(array1[i] + array2[i]);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;", "target_code": "struct Punto {\n    int x;\n    int y;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicarArray(int* array, int tam) {\n    int* nuevoArray = (int*) malloc(tam * sizeof(int));\n    for(int i = 0; i < tam; i++) {\n        nuevoArray[i] = array[i] * 2;\n    }\n    return nuevoArray;\n}", "target_code": "std::vector<int> duplicarArray(const std::vector<int>& array) {\n    std::vector<int> nuevoArray;\n    for(int i = 0; i < array.size(); i++) {\n        nuevoArray.push_back(array[i] * 2);\n    }\n    return nuevoArray;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumar(int a, int b) {\n    return a + b;\n}", "target_code": "int sumar(int a, int b) {\n    return a + b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int i, j; for(i=0, j=size-1; i<j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { int i, j; for(i=0, j=arr.size()-1; i<j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { Point* p = new Point; p->x = x; p->y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int i=0; i<arr.size(); i++) { std::cout << arr[i] << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumArrays(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {6, 7, 8, 9, 10};\n    int size = 5;\n    int* result = (int*)malloc(size * sizeof(int));\n\n    sumArrays(arr1, arr2, result, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumVectors(std::vector<int>& vec1, std::vector<int>& vec2, std::vector<int>& result) {\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {6, 7, 8, 9, 10};\n    std::vector<int> result;\n\n    sumVectors(vec1, vec2, result);\n\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point* point = (Point*)malloc(sizeof(Point));\n    setPoint(point, 5, 10);\n\n    printf(\"Point coordinates: %d, %d\\n\", point->x, point->y);\n\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point& p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point point;\n    setPoint(point, 5, 10);\n\n    std::cout << \"Point coordinates: \" << point.x << \", \" << point.y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = createArray(size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapValues(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 10;\n\n    swapValues(&num1, &num2);\n\n    printf(\"num1: %d, num2: %d\\n\", num1, num2);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapValues(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 10;\n\n    swapValues(num1, num2);\n\n    std::cout << \"num1: \" << num1 << \", num2: \" << num2 << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printMessage(char* message) {\n    printf(\"Message: %s\\n\", message);\n}\n\nint main() {\n    char* message = \"Hello, World!\";\n    printMessage(message);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid printMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}\n\nint main() {\n    std::string message = \"Hello, World!\";\n    printMessage(message);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid dynamic_array() {\n    int *arr = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n}\n\nint main() {\n    dynamic_array();\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid dynamic_array() {\n    std::vector<int> arr(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n}\n\nint main() {\n    dynamic_array();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle r = {5, 10};\n    printf(\"Area: %d\\n\", area(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    print_vector(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar(int *num) {\n    (*num)++;\n}\n\nvoid imprimir_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementar(int &num) {\n    num++;\n}\n\nvoid imprimir_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid imprimir_persona(struct Persona p) {\n    printf(\"Nombre: %s, Edad: %d\\n\", p.nombre, p.edad);\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid imprimir_persona(const Persona &p) {\n    std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *crear_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid liberar_array(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint *crear_vector(int size) {\n    return new int[size];\n}\n\nvoid liberar_vector(int *vec) {\n    delete[] vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid intercambiar(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(struct Punto *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; Student* create_student(int id, const char* name) { Student* new_student = (Student*)malloc(sizeof(Student)); new_student->id = id; strcpy(new_student->name, name); return new_student; }", "target_code": "struct Student { int id; std::string name; }; Student* create_student(int id, const std::string& name) { return new Student{id, name}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_student(Student* student) { printf(\"ID: %d, Name: %s\\n\", student->id, student->name); }", "target_code": "void print_student(const Student& student) { std::cout << \"ID: \" << student.id << \", Name: \" << student.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *array, int size) { int result = 0; for(int i = 0; i < size; i++) { result += *(array + i); } return result; }", "target_code": "int sum(const std::vector<int> &array) { int result = 0; for(int num : array) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *array, int size) { int *temp = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { *(temp + i) = *(array + size - 1 - i); } for(int i = 0; i < size; i++) { *(array + i) = *(temp + i); } free(temp); }", "target_code": "void reverse_array(std::vector<int> &array) { std::reverse(array.begin(), array.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void delete_array(int *array) { free(array); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", *(array + i)); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &array) { for(int num : array) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* result = (int*) malloc(size * sizeof(int));\n    addArrays(arr1, arr2, result, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n\nvoid fillArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = createIntArray(size);\n    fillArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* createIntArray(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid fillArray(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i + 1;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int>* vec = createIntArray(size);\n    fillArray(*vec);\n    for (int num : *vec) {\n        std::cout << num << \" \";\n    }\n    delete vec;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swapInts(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swapInts(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPerson(const struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    printPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    printPerson(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyArray(int* arr, int size, int factor) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= factor;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    multiplyArray(arr, 5, 2);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyVector(std::vector<int>& vec, int factor) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= factor;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    multiplyVector(vec, 2);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << '(' << p.x << ',' << p.y << ')' << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid deleteIntArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    deleteIntArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n\nvoid deleteIntArray(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    deleteIntArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint areaRectangle(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    printf(\"Area: %d\\n\", areaRectangle(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint areaRectangle(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    std::cout << \"Area: \" << areaRectangle(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, sum;\n    add(&x, &y, &sum);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, sum;\n    add(x, y, sum);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 3, y = 5;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 3, y = 5;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect;\n    rect.width = 4;\n    rect.height = 3;\n    printf(\"Area: %d\\n\", area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect;\n    rect.width = 4;\n    rect.height = 3;\n    std::cout << \"Area: \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementarArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    incrementarArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementarVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementarVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid incrementarPoint(Point* p) {\n    p->x++;\n    p->y++;\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 1;\n    p->y = 2;\n    incrementarPoint(p);\n    printf(\"%d %d\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid incrementarPoint(Point& p) {\n    p.x++;\n    p.y++;\n}\n\nint main() {\n    Point p;\n    p.x = 1;\n    p.y = 2;\n    incrementarPoint(p);\n    std::cout << p.x << \" \" << p.y;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicarString(char** str) {\n    char* new_str = (char*)malloc(strlen(*str) * 2 + 1);\n    strcpy(new_str, *str);\n    strcat(new_str, *str);\n    free(*str);\n    *str = new_str;\n}\n\nint main() {\n    char* str = (char*)malloc(6);\n    strcpy(str, \"Hello\");\n    duplicarString(&str);\n    printf(\"%s\", str);\n    free(str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid duplicarString(std::string& str) {\n    str += str;\n}\n\nint main() {\n    std::string str = \"Hello\";\n    duplicarString(str);\n    std::cout << str;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swapInts(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swapInts(x, y);\n    std::cout << x << \" \" << y;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int i = 0, j = size - 1;\n    while (i < j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    int i = 0, j = vec.size() - 1;\n    while (i < j) {\n        int temp = vec[i];\n        vec[i] = vec[j];\n        vec[j] = temp;\n        i++;\n        j--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(int* arr, int size) { int max = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) max = arr[i]; } return max; }", "target_code": "int get_max(const std::vector<int>& vec) { int max = vec[0]; for (int num : vec) { if (num > max) max = num; } return max; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point* p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[3] = {1, 2, 3};\n    int arr2[3];\n    copy_array(arr1, arr2, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int>& src, std::vector<int>& dest) {\n    for (size_t i = 0; i < src.size(); i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2(3);\n    copy_vector(vec1, vec2);\n    for (int num : vec2) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(sizeof(int) * size);\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1; n1.next = &n2;\n    n2.data = 2; n2.next = &n3;\n    n3.data = 3; n3.next = NULL;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n    Node(int d) : data(d), next(nullptr) {}\n};\n\nvoid print_list(Node *head) {\n    Node *current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" \";\n        current = current->next;\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    Node n1(1), n2(2), n3(3);\n    n1.next = &n2;\n    n2.next = &n3;\n    print_list(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* double_numbers(int *arr, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n\nint main() {\n    int input[] = {1, 2, 3, 4, 5};\n    int *output = double_numbers(input, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", output[i]);\n    }\n    free(output);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> double_numbers(const std::vector<int> &arr) {\n    std::vector<int> result(arr.size());\n    for(int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> input = {1, 2, 3, 4, 5};\n    std::vector<int> output = double_numbers(input);\n    for(int i = 0; i < output.size(); i++) {\n        std::cout << output[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {\"Alice\", 25};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student_info(Student* student) {\n    printf(\"ID: %d, Name: %s\\n\", student->id, student->name);\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student_info(&s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student_info(const Student& student) {\n    std::cout << \"ID: \" << student.id << \", Name: \" << student.name << std::endl;\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student_info(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n\nvoid fill_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n}\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = create_array(size);\n    fill_array(arr, size);\n    print_array(arr, size);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* create_vector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid fill_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i + 1;\n    }\n}\n\nvoid print_vector(const std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int>* vec = create_vector(size);\n    fill_vector(*vec);\n    print_vector(*vec);\n    delete vec;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {0, 0};\n    move_point(&p, 2, 3);\n    printf(\"New coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {0, 0};\n    move_point(p, 2, 3);\n    std::cout << \"New coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    double real;\n    double imag;\n} Complex;\n\nvoid add_complex(Complex* a, Complex* b, Complex* result) {\n    result->real = a->real + b->real;\n    result->imag = a->imag + b->imag;\n}\n\nint main() {\n    Complex a = {1.0, 2.0};\n    Complex b = {3.0, 4.0};\n    Complex result;\n    add_complex(&a, &b, &result);\n    printf(\"Sum: %.2f + %.2fi\\n\", result.real, result.imag);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Complex {\n    double real;\n    double imag;\n};\n\nvoid add_complex(const Complex& a, const Complex& b, Complex& result) {\n    result.real = a.real + b.real;\n    result.imag = a.imag + b.imag;\n}\n\nint main() {\n    Complex a = {1.0, 2.0};\n    Complex b = {3.0, 4.0};\n    Complex result;\n    add_complex(a, b, result);\n    std::cout << \"Sum: \" << result.real << \" + \" << result.imag << \"i\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid c_free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = c_create_array(5);\n    c_free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = cpp_create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nstruct c_point {\n    int x;\n    int y;\n};\n\nbool c_compare_points(struct c_point p1, struct c_point p2) {\n    return p1.x == p2.x && p1.y == p2.y;\n}\n\nint main() {\n    struct c_point point1 = {1, 2};\n    struct c_point point2 = {1, 2};\n    bool result = c_compare_points(point1, point2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_point {\n    int x;\n    int y;\n};\n\nbool cpp_compare_points(const cpp_point &p1, const cpp_point &p2) {\n    return p1.x == p2.x && p1.y == p2.y;\n}\n\nint main() {\n    cpp_point point1 = {1, 2};\n    cpp_point point2 = {1, 2};\n    bool result = cpp_compare_points(point1, point2);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_node {\n    int data;\n    struct c_node *next;\n};\n\nvoid c_insert_node(struct c_node **head, int value) {\n    struct c_node *new_node = (struct c_node*)malloc(sizeof(struct c_node));\n    new_node->data = value;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct c_node *list = NULL;\n    c_insert_node(&list, 5);\n    c_insert_node(&list, 10);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_node {\n    int data;\n    cpp_node *next;\n};\n\nvoid cpp_insert_node(cpp_node *&head, int value) {\n    cpp_node *new_node = new cpp_node;\n    new_node->data = value;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    cpp_node *list = nullptr;\n    cpp_insert_node(list, 5);\n    cpp_insert_node(list, 10);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} c_rectangle;\n\nint c_area(c_rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    c_rectangle rect = {5, 10};\n    int area = c_area(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_rectangle {\n    int width;\n    int height;\n};\n\nint cpp_area(const cpp_rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    cpp_rectangle rect = {5, 10};\n    int area = cpp_area(rect);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid freeArray(Array* arr) {\n    free(arr->data);\n    arr->data = NULL;\n    arr->size = 0;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n};\n\nvoid freeArray(Array& arr) {\n    arr.data.clear();\n    arr.size = 0;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int* array, int size) {\n    for(int i = 0; i < size; ++i) {\n        array[i]++;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementArray(std::vector<int>& array) {\n    for(int& num : array) {\n        num++;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void addArrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; ++i) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}", "target_code": "void addArrays(std::vector<int>& arr1, std::vector<int>& arr2, std::vector<int>& result) {\n    for(int i = 0; i < arr1.size(); ++i) {\n        result.push_back(arr1[i] + arr2[i]);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    return (int*)malloc(sizeof(int) * size);\n}", "target_code": "int* createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeIntArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n  int x;\n  int y;\n} Point;\n\nvoid swap(Point* p) {\n  int temp = p->x;\n  p->x = p->y;\n  p->y = temp;\n}\n\nint main() {\n  Point* p = (Point*)malloc(sizeof(Point));\n  p->x = 10;\n  p->y = 20;\n\n  swap(p);\n\n  printf(\"%d %d\\n\", p->x, p->y);\n\n  free(p);\n  return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Point {\n  int x;\n  int y;\n};\n\nvoid swap(Point& p) {\n  int temp = p.x;\n  p.x = p.y;\n  p.y = temp;\n}\n\nint main() {\n  Point* p = new Point;\n  p->x = 10;\n  p->y = 20;\n\n  swap(*p);\n\n  std::cout << p->x << ' ' << p->y << std::endl;\n\n  delete p;\n  return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n  int i, j, temp;\n  for(i = 0, j = size - 1; i < j; i++, j--) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nint main() {\n  int arr[] = {1, 2, 3, 4, 5};\n  int size = sizeof(arr) / sizeof(arr[0]);\n\n  reverseArray(arr, size);\n\n  for(int i = 0; i < size; i++) {\n    printf(\"%d \", arr[i]);\n  }\n\n  return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n  std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n  std::vector<int> vec = {1, 2, 3, 4, 5};\n\n  reverseVector(vec);\n\n  for(int num : vec) {\n    std::cout << num << ' ';\n  }\n\n  std::cout << std::endl;\n  return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n  int id;\n  char name[20];\n} Person;\n\nvoid printPerson(Person* p) {\n  printf(\"%d %s\\n\", p->id, p->name);\n}\n\nint main() {\n  Person* p = (Person*)malloc(sizeof(Person));\n  p->id = 1;\n  strcpy(p->name, \"Alice\");\n\n  printPerson(p);\n\n  free(p);\n  return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n  int id;\n  std::string name;\n};\n\nvoid printPerson(const Person& p) {\n  std::cout << p.id << ' ' << p.name << std::endl;\n}\n\nint main() {\n  Person* p = new Person;\n  p->id = 1;\n  p->name = \"Alice\";\n\n  printPerson(*p);\n\n  delete p;\n  return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n  int* arr;\n  int size;\n} Array;\n\nint sumArray(const Array* a) {\n  int sum = 0;\n  for(int i = 0; i < a->size; i++) {\n    sum += a->arr[i];\n  }\n  return sum;\n}\n\nint main() {\n  Array* a = (Array*)malloc(sizeof(Array));\n  int temp[] = {1, 2, 3, 4, 5};\n  a->arr = temp;\n  a->size = 5;\n\n  int result = sumArray(a);\n\n  printf(\"Sum: %d\\n\", result);\n\n  free(a);\n  return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n  std::vector<int> arr;\n};\n\nint sumVector(const Array& a) {\n  int sum = 0;\n  for(int num : a.arr) {\n    sum += num;\n  }\n  return sum;\n}\n\nint main() {\n  Array* a = new Array;\n  a->arr = {1, 2, 3, 4, 5};\n\n  int result = sumVector(*a);\n\n  std::cout << \"Sum: \" << result << std::endl;\n\n  delete a;\n  return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n  int width;\n  int height;\n} Rectangle;\n\nint calculateArea(const Rectangle* r) {\n  return r->width * r->height;\n}\n\nint main() {\n  Rectangle* r = (Rectangle*)malloc(sizeof(Rectangle));\n  r->width = 5;\n  r->height = 10;\n\n  int area = calculateArea(r);\n\n  printf(\"Area: %d\\n\", area);\n\n  free(r);\n  return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n  int width;\n  int height;\n};\n\nint calculateArea(const Rectangle& r) {\n  return r.width * r.height;\n}\n\nint main() {\n  Rectangle* r = new Rectangle;\n  r->width = 5;\n  r->height = 10;\n\n  int area = calculateArea(*r);\n\n  std::cout << \"Area: \" << area << std::endl;\n\n  delete r;\n  return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int n) {\n    return (int *)malloc(n * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int n) {\n    return std::vector<int>(n);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 7};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 7};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person p = {.name = \"Alice\", .age = 30};\n    print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p = {.name = \"Alice\", .age = 30};\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func1(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func1(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_func2(struct Point* p) {\n    p->x *= 2;\n    p->y *= 2;\n}\n\nint main() {\n    struct Point p = {1, 2};\n    c_func2(&p);\n    printf(\"%d %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_func2(Point& p) {\n    p.x *= 2;\n    p.y *= 2;\n}\n\nint main() {\n    Point p = {1, 2};\n    cpp_func2(p);\n    std::cout << p.x << ' ' << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func3(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i * i;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    c_func3(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func3(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i * i;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    cpp_func3(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid c_func4(struct Node* head) {\n    while(head != NULL) {\n        printf(\"%d \", head->data);\n        head = head->next;\n    }\n}\n\nint main() {\n    struct Node* head = (struct Node*)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = NULL;\n    c_func4(head);\n    free(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid cpp_func4(Node* head) {\n    while(head != NULL) {\n        std::cout << head->data << ' ';\n        head = head->next;\n    }\n}\n\nint main() {\n    Node* head = new Node;\n    head->data = 1;\n    head->next = nullptr;\n    cpp_func4(head);\n    delete head;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func5(int** matrix, int rows, int cols) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    int** matrix = (int**)malloc(3 * sizeof(int*));\n    for(int i = 0; i < 3; i++) {\n        matrix[i] = (int*)malloc(4 * sizeof(int));\n    }\n    c_func5(matrix, 3, 4);\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 4; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for(int i = 0; i < 3; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func5(std::vector<std::vector<int>>& matrix) {\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix(3, std::vector<int>(4));\n    cpp_func5(matrix);\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 4; j++) {\n            std::cout << matrix[i][j] << ' ';\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* my_array = create_array(5);\n    free_array(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> my_array = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 4};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 4};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int my_array[] = {1, 2, 3, 4, 5};\n    int result = sum_array(my_array, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> my_array = {1, 2, 3, 4, 5};\n    int result = sum_array(my_array);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nvoid print_employee(Employee emp) {\n    printf(\"Employee ID: %d, Name: %s\\n\", emp.id, emp.name);\n}\n\nint main() {\n    Employee emp = {1, \"Alice\"};\n    print_employee(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nvoid print_employee(const Employee& emp) {\n    std::cout << \"Employee ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n}\n\nint main() {\n    Employee emp = {1, \"Alice\"};\n    print_employee(emp);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point *p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float radius; } Circle; float get_area(const Circle *c) { return 3.14159 * c->radius * c->radius; }", "target_code": "struct Circle { float radius; }; float get_area(const Circle &c) { return 3.14159 * c.radius * c.radius; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copy_array(int *arr, int size) { int *new_arr = (int *)malloc(size * sizeof(int)); for(int i=0; i<size; i++) new_arr[i] = arr[i]; return new_arr; }", "target_code": "std::vector<int> copy_vector(const std::vector<int> &vec) { return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumar(int *a, int *b, int *resultado) {\n    *resultado = *a + *b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int z;\n    sumar(&x, &y, &z);\n    printf(\"La suma es %d\\n\", z);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sumar(int &a, int &b, int &resultado) {\n    resultado = a + b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int z;\n    sumar(x, y, z);\n    std::cout << \"La suma es \" << z << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid copiar_cadena(char *origen, char *destino) {\n    strcpy(destino, origen);\n}\n\nint main() {\n    char cadena_origen[] = \"Hola Mundo\";\n    char cadena_destino[20];\n    copiar_cadena(cadena_origen, cadena_destino);\n    printf(\"La cadena copiada es: %s\\n\", cadena_destino);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copiar_cadena(std::string &origen, std::string &destino) {\n    destino = origen;\n}\n\nint main() {\n    std::string cadena_origen = \"Hola Mundo\";\n    std::string cadena_destino;\n    copiar_cadena(cadena_origen, cadena_destino);\n    std::cout << \"La cadena copiada es: \" << cadena_destino << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(struct Punto *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Punto punto1 = {3, 4};\n    imprimir_punto(&punto1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(Punto &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto punto1 = {3, 4};\n    imprimir_punto(punto1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicar(int *num) {\n    *num *= 2;\n}\n\nint main() {\n    int numero = 5;\n    duplicar(&numero);\n    printf(\"El doble es %d\\n\", numero);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid duplicar(int &num) {\n    num *= 2;\n}\n\nint main() {\n    int numero = 5;\n    duplicar(numero);\n    std::cout << \"El doble es \" << numero << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid invertir(int *array, int length) {\n    for (int i = 0; i < length / 2; i++) {\n        int temp = array[i];\n        array[i] = array[length - i - 1];\n        array[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    invertir(arr, length);\n    printf(\"Array invertido: \");\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid invertir(std::vector<int> &array) {\n    for (int i = 0; i < array.size() / 2; i++) {\n        int temp = array[i];\n        array[i] = array[array.size() - i - 1];\n        array[array.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    invertir(arr);\n    std::cout << \"Array invertido: \";\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    addArrays(arr1, arr2, result, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for(int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* customMalloc(size_t size) {\n    void* ptr = malloc(size);\n    return ptr;\n}\n\nvoid customFree(void* ptr) {\n    free(ptr);\n}\n\nint main() {\n    int* arr = (int*)customMalloc(3 * sizeof(int));\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    customFree(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid* customMalloc(size_t size) {\n    void* ptr = new char[size];\n    return ptr;\n}\n\nvoid customFree(void* ptr) {\n    delete[] static_cast<char*>(ptr);\n}\n\nint main() {\n    int* arr = static_cast<int*>(customMalloc(3 * sizeof(int)));\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    for(int i = 0; i < 3; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    customFree(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int* arr, int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& vec) {\n    int result = 0;\n    for(int num : vec) {\n        result += num;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum(vec);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { for(int i = 0; i < arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(sizeof(int) * size); } void delete_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *point = create_point(3, 4);\n    printf(\"Point: (%d, %d)\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nPoint* create_point(int x, int y) {\n    return new Point(x, y);\n}\n\nint main() {\n    Point *point = create_point(3, 4);\n    std::cout << \"Point: (\" << point->x << \", \" << point->y << \")\" << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - 1 - i];\n        vec[vec.size() - 1 - i] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint get_area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {4, 3};\n    printf(\"Area: %d\\n\", get_area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n    Rectangle(int w, int h) : width(w), height(h) {}\n    int get_area() {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r(4, 3);\n    std::cout << \"Area: \" << r.get_area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int add(int *a, int *b) { return *a + *b; }", "target_code": "int add(int &a, int &b) { return a + b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nstruct Point { int x; int y; };\nPoint* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "#include <iostream>\nstruct Point { int x; int y; };\nPoint* create_point(int x, int y) { Point* p = new Point; p->x = x; p->y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    vec[0] = 1;\n    vec[1] = 2;\n    vec[2] = 3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum_vector(vec);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid insert_node(struct Node** head, int data) {\n    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct Node* head = NULL;\n    insert_node(&head, 10);\n    insert_node(&head, 20);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid insert_node(Node*& head, int data) {\n    Node* new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node* head = nullptr;\n    insert_node(head, 10);\n    insert_node(head, 20);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_arrays(int* arr1, int* arr2, int size, int* result) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* result = (int*)malloc(size * sizeof(int));\n    sum_arrays(arr1, arr2, size, result);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    sum_vectors(vec1, vec2, result);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const struct Point* point) {\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& point) {\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_string(char* str) {\n    int len = 0;\n    while (str[len] != '\\0') {\n        len++;\n    }\n    char* reversed = (char*)malloc((len + 1) * sizeof(char));\n    for (int i = 0; i < len; i++) {\n        reversed[i] = str[len - i - 1];\n    }\n    reversed[len] = '\\0';\n    printf(\"%s\\n\", reversed);\n    free(reversed);\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::string reversed = str;\n    std::reverse(reversed.begin(), reversed.end());\n    std::cout << reversed << std::endl;\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap_values(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap_values(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_values(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap_values(x, y);\n    std::cout << x << \" \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiply_matrix(int** matrix, int rows, int cols, int scalar) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2;\n    int cols = 2;\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    multiply_matrix(matrix, rows, cols, 2);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_matrix(std::vector<std::vector<int>>& matrix, int scalar) {\n    for (std::vector<int>& row : matrix) {\n        for (int& elem : row) {\n            elem *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2;\n    int cols = 2;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    multiply_matrix(matrix, 2);\n    for (const auto& row : matrix) {\n        for (int elem : row) {\n            std::cout << elem << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int> &arr) {\n    for (int &x : arr) {\n        x++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for (int x : arr) {\n        std::cout << x << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nint main() {\n    struct Node n1, n2;\n    n1.data = 10;\n    n2.data = 20;\n    n1.next = &n2;\n    printf(\"n1: %d, n2: %d\\n\", n1.data, n1.next->data);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nint main() {\n    Node n1, n2;\n    n1.data = 10;\n    n2.data = 20;\n    n1.next = &n2;\n    std::cout << \"n1: \" << n1.data << \", n2: \" << n1.next->data << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point point = {3, 5};\n    print_point(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point = {3, 5};\n    print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1; n2.data = 2; n3.data = 3;\n    n1.next = &n2; n2.next = &n3; n3.next = NULL;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_list(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* n1 = new Node, n2 = new Node, n3 = new Node;\n    n1->data = 1; n2->data = 2; n3->data = 3;\n    n1->next = n2; n2->next = n3; n3->next = nullptr;\n    print_list(n1);\n    delete n1; delete n2; delete n3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*) malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i * 2;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << \"vec[\" << i << \"] = \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point point = {3, 7};\n    print_point(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point = {3, 7};\n    print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    int num = power(2, 5);\n    printf(\"2^5 = %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    int num = power(2, 5);\n    std::cout << \"2^5 = \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int *arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    printf(\"Sum = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &vec) {\n    int total = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        total += vec[i];\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum(vec);\n    std::cout << \"Sum = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_sum(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int a = 5, b = 3, result;\n    c_sum(&a, &b, &result);\n    printf(\"Sum in C: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_sum(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int a = 5, b = 3, result;\n    cpp_sum(a, b, result);\n    std::cout << \"Sum in C++: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *c_array_square(int *arr, int size) {\n    int *result = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * arr[i];\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *result = c_array_square(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d\\n\", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_array_square(int arr[], int size) {\n    std::vector<int> result;\n    for (int i = 0; i < size; i++) {\n        result.push_back(arr[i] * arr[i]);\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    std::vector<int> result = cpp_array_square(arr, 5);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_person {\n    char name[20];\n    int age;\n};\n\nvoid c_print_person(struct c_person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct c_person person = {\"Alice\", 25};\n    c_print_person(&person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_print_person(cpp_person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    cpp_person person = {\"Alice\", 25};\n    cpp_print_person(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_point {\n    int x;\n    int y;\n};\n\nvoid c_translate_point(struct c_point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct c_point point = {3, 5};\n    c_translate_point(&point, 2, 3);\n    printf(\"New coordinates in C: (%d, %d)\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_point {\n    int x;\n    int y;\n};\n\nvoid cpp_translate_point(cpp_point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    cpp_point point = {3, 5};\n    cpp_translate_point(point, 2, 3);\n    std::cout << \"New coordinates in C++: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse_string(char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    c_reverse_string(str);\n    printf(\"Reversed string in C: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid cpp_reverse_string(std::string &str) {\n    int length = str.length();\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    cpp_reverse_string(str);\n    std::cout << \"Reversed string in C++: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_fibonacci(int n, int *result) {\n    result[0] = 0;\n    result[1] = 1;\n    for (int i = 2; i < n; i++) {\n        result[i] = result[i - 1] + result[i - 2];\n    }\n}\n\nint main() {\n    int n = 5;\n    int *result = (int *)malloc(n * sizeof(int));\n    c_fibonacci(n, result);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d\\n\", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_fibonacci(int n, std::vector<int> &result) {\n    result.resize(n);\n    result[0] = 0;\n    result[1] = 1;\n    for (int i = 2; i < n; i++) {\n        result[i] = result[i - 1] + result[i - 2];\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> result;\n    cpp_fibonacci(n, result);\n    for (int i = 0; i < n; i++) {\n        std::cout << result[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 5;\n    p->y = 10;\n    print_point(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 5;\n    p->y = 10;\n    print_point(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int size;\n    int* array;\n} Array;\n\nvoid print_array(const Array* a) {\n    for (int i = 0; i < a->size; i++) {\n        printf(\"%d \", a->array[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.array = (int*)malloc(arr.size * sizeof(int));\n    for (int i = 0; i < arr.size; i++) {\n        arr.array[i] = i;\n    }\n    print_array(&arr);\n    free(arr.array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> array;\n\n    void print_array() const {\n        for (int i = 0; i < array.size(); i++) {\n            std::cout << array[i] << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nint main() {\n    Array arr;\n    arr.array.resize(5);\n    for (int i = 0; i < arr.array.size(); i++) {\n        arr.array[i] = i;\n    }\n    arr.print_array();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    printf(\"Area: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    int area() const {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    std::cout << \"Area: \" << r.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char* name;\n    int age;\n} Person;\n\nvoid print_person(const Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    Person* p = (Person*)malloc(sizeof(Person));\n    p->name = \"John\";\n    p->age = 30;\n    print_person(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    void print_person() const {\n        std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n    }\n};\n\nint main() {\n    Person* p = new Person;\n    p->name = \"John\";\n    p->age = 30;\n    p->print_person();\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} IntArray;\n\nvoid double_elements(IntArray* arr) {\n    for (int i = 0; i < arr->size; i++) {\n        arr->data[i] *= 2;\n    }\n}\n\nint main() {\n    IntArray arr;\n    int nums[] = {1, 2, 3, 4, 5};\n    arr.data = nums;\n    arr.size = 5;\n    double_elements(&arr);\n    for (int i = 0; i < arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass IntArray {\npublic:\n    std::vector<int> data;\n\n    void double_elements() {\n        for (int i = 0; i < data.size(); i++) {\n            data[i] *= 2;\n        }\n    }\n};\n\nint main() {\n    IntArray arr;\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    arr.data = nums;\n    arr.double_elements();\n    for (int num : arr.data) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementarArray(int* arr, int size){ for(int i=0; i<size; i++){ *(arr + i) += 1; } }", "target_code": "void incrementarVector(std::vector<int>& vec){ for(int i=0; i<vec.size(); i++){ vec[i] += 1; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Punto; void moverPunto(Punto* punto, int dx, int dy){ punto->x += dx; punto->y += dy; }", "target_code": "struct Punto { int x; int y; }; void moverPunto(Punto& punto, int dx, int dy){ punto.x += dx; punto.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* crearArray(int size){ int* arr = (int*)malloc(size * sizeof(int)); return arr; } void liberarArray(int* arr){ free(arr); }", "target_code": "std::vector<int> crearVector(int size){ return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int edad; char nombre[50]; } Persona; void imprimirPersona(const Persona* p){ printf(\"Nombre: %s, Edad: %d\\n\", p->nombre, p->edad); }", "target_code": "struct Persona { int edad; std::string nombre; }; void imprimirPersona(const Persona& p){ std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void duplicarArray(int* arr, int size){ for(int i=0; i<size; i++){ *(arr + i) *= 2; } }", "target_code": "void duplicarVector(std::vector<int>& vec){ for(int i=0; i<vec.size(); i++){ vec[i] *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiply_matrix(int** mat, int rows, int cols, int scalar) { for(int i = 0; i < rows; i++) { for(int j = 0; j < cols; j++) { mat[i][j] *= scalar; } } }", "target_code": "void multiply_matrix(std::vector<std::vector<int>>& mat, int scalar) { for(auto& row : mat) { for(int& num : row) { num *= scalar; } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point* p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "class Point { public: int x; int y; void move(int dx, int dy) { x += dx; y += dy; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int>* create_vector(int size) { return new std::vector<int>(size); } void free_vector(std::vector<int>* vec) { delete vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_square_values(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i] * arr[i]; } return sum; }", "target_code": "int sum_square_values(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num * num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[size - i - 1];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    printf(\"Reversed array: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp = vec;\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = temp[vec.size() - i - 1];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    std::cout << \"Reversed vector: \";\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid fillArray(int *arr, int size, int value) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    fillArray(arr, size, 10);\n    printf(\"Array values: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createArray(int size) {\n    return new int[size];\n}\n\nvoid fillArray(int *arr, int size, int value) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    fillArray(arr, size, 10);\n    std::cout << \"Array values: \";\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    printf(\"Area of rectangle: %d\\n\", calculateArea(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n    std::cout << \"Area of rectangle: \" << calculateArea(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function2(struct c_struct *s) {\n    printf(\"%d %d\", s->x, s->y);\n}\n\nint main() {\n    struct c_struct *s = (struct c_struct*)malloc(sizeof(struct c_struct));\n    s->x = 1;\n    s->y = 2;\n    c_function2(s);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function2(const cpp_struct &s) {\n    std::cout << s.x << ' ' << s.y;\n}\n\nint main() {\n    cpp_struct s {1, 2};\n    cpp_function2(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum: %d\", sum);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function3(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function3(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    std::cout << \"Sum: \" << sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function3(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function4(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function4(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function4(vec);\n    for (int i = 0; i < 5; i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    int *copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", copy[i]);\n    }\n    free(copy);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function5(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(const std::vector<int> &vec) {\n    std::vector<int> copy(vec.begin(), vec.end());\n    for (int i = 0; i < copy.size(); i++) {\n        std::cout << copy[i] << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function5(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(sizeof(int) * size);\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    setPoint(p, 10, 20);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point& p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(p, 10, 20);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyString(char* dest, const char* src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str[20];\n    copyString(str, \"Hello, World!\");\n    printf(\"%s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copyString(std::string& dest, const std::string& src) {\n    dest = src;\n}\n\nint main() {\n    std::string str;\n    copyString(str, \"Hello, World!\");\n    std::cout << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printf(\"Sum: %d\\n\", sumArray(arr, 5));\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << sumVector(vec) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func1(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func1(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int data;\n};\n\nvoid c_func2(struct c_struct* s) {\n    printf(\"%d\\n\", s->data);\n}\n\nint main() {\n    struct c_struct my_struct;\n    my_struct.data = 10;\n    c_func2(&my_struct);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int data;\n};\n\nvoid cpp_func2(const cpp_struct& s) {\n    std::cout << s.data << '\\n';\n}\n\nint main() {\n    cpp_struct my_struct;\n    my_struct.data = 10;\n    cpp_func2(my_struct);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func3(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func3(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func3(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for(int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    for(int num : new_vec) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func3(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func4(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func4(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func4(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << '\\n';\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func4(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func5(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func5(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func5(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        new_vec.push_back(vec[i]);\n    }\n    for(int num : new_vec) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func5(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int n) { return (int*)malloc(n * sizeof(int)); }", "target_code": "int* createIntArray(int n) { return new int[n]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int *arr) { free(arr); }", "target_code": "void freeIntArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = sizeof(arr1) / sizeof(arr1[0]);\n    int* result = (int*)malloc(size * sizeof(int));\n\n    addArrays(arr1, arr2, result, size);\n\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n\n    addVectors(vec1, vec2, result);\n\n    for(int num : result) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* point) {\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n\n    printPoint(p);\n\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& point) {\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n\n    printPoint(*p);\n\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n\n    swap(&x, &y);\n\n    printf(\"x: %d, y: %d\\n\", x, y);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n\n    swap(x, y);\n\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid fillArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n}\n\nvoid printArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int size = 5;\n    int* arr = createArray(size);\n    fillArray(arr, size);\n    printArray(arr, size);\n\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* createVector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid fillVector(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i + 1;\n    }\n}\n\nvoid printVector(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int>* vec = createVector(size);\n    fillVector(*vec);\n    printVector(*vec);\n\n    delete vec;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n\n    printf(\"Area: %d\\n\", calculateArea(&r));\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r;\n    r.width = 5;\n    r.height = 10;\n\n    std::cout << \"Area: \" << calculateArea(r) << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int value;\n    c_function1(&value);\n    printf(\"Value in C: %d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int value;\n    cpp_function1(value);\n    std::cout << \"Value in C++: \" << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* array = (int*)malloc(size * sizeof(int));\n    c_function2(array, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i * 2;\n    }\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec(size);\n    cpp_function2(vec);\n    for(int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point p;\n    c_function3(&p);\n    printf(\"Point coordinates in C: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point& point) {\n    point.x = 5;\n    point.y = 10;\n}\n\nint main() {\n    Point p;\n    cpp_function3(p);\n    std::cout << \"Point coordinates in C++: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid c_function4(Array* arr) {\n    arr->data = (int*)malloc(arr->size * sizeof(int));\n    for(int i = 0; i < arr->size; i++) {\n        arr->data[i] = i * 3;\n    }\n}\n\nint main() {\n    Array a;\n    a.size = 4;\n    c_function4(&a);\n    for(int i = 0; i < a.size; i++) {\n        printf(\"%d \", a.data[i]);\n    }\n    free(a.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n};\n\nvoid cpp_function4(Array& arr) {\n    arr.data.resize(arr.size);\n    for(int i = 0; i < arr.size; i++) {\n        arr.data[i] = i * 3;\n    }\n}\n\nint main() {\n    Array a;\n    a.size = 4;\n    cpp_function4(a);\n    for(int i = 0; i < a.size; i++) {\n        std::cout << a.data[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_function5(int size) {\n    int* ptr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        ptr[i] = i * 4;\n    }\n    return ptr;\n}\n\nint main() {\n    int size = 3;\n    int* array = c_function5(size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_function5(int size) {\n    std::vector<int> vec(size);\n    for(int i = 0; i < size; i++) {\n        vec[i] = i * 4;\n    }\n    return vec;\n}\n\nint main() {\n    int size = 3;\n    std::vector<int> vec = cpp_function5(size);\n    for(int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid add_arrays(int* a, int* b, int* c, int size) {\n    for (int i = 0; i < size; i++) {\n        c[i] = a[i] + b[i];\n    }\n}\n\nint main() {\n    int a[] = {1, 2, 3};\n    int b[] = {4, 5, 6};\n    int size = 3;\n    int* c = (int*)malloc(size * sizeof(int));\n    add_arrays(a, b, c, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", c[i]);\n    }\n    free(c);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid add_vectors(const std::vector<int>& a, const std::vector<int>& b, std::vector<int>& c) {\n    for (size_t i = 0; i < a.size(); i++) {\n        c.push_back(a[i] + b[i]);\n    }\n}\n\nint main() {\n    std::vector<int> a = {1, 2, 3};\n    std::vector<int> b = {4, 5, 6};\n    std::vector<int> c;\n    add_vectors(a, b, c);\n    for (int num : c) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"Alice\");\n    p.age = 25;\n    printf(\"%s is %d years old\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"Alice\";\n    p.age = 25;\n    std::cout << p.name << \" is \" << p.age << \" years old\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        std::swap(vec[start], vec[end]);\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid double_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int size = 3;\n    double_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid double_vector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    double_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid add_structs(struct Person* p1, struct Person* p2, struct Person* result) {\n    result->age = p1->age + p2->age;\n}\n\nint main() {\n    struct Person alice = {\"Alice\", 25};\n    struct Person bob = {\"Bob\", 30};\n    struct Person result;\n    add_structs(&alice, &bob, &result);\n    printf(\"Total age: %d\\n\", result.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid add_structs(const Person& p1, const Person& p2, Person& result) {\n    result.age = p1.age + p2.age;\n}\n\nint main() {\n    Person alice = {\"Alice\", 25};\n    Person bob = {\"Bob\", 30};\n    Person result;\n    add_structs(alice, bob, result);\n    std::cout << \"Total age: \" << result.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumar(int *a, int *b, int *resultado) {\n    *resultado = *a + *b;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    int resultado;\n    sumar(&num1, &num2, &resultado);\n    printf(\"La suma es: %d\\n\", resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid sumar(int &a, int &b, int &resultado) {\n    resultado = a + b;\n}\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n    int resultado;\n    sumar(num1, num2, resultado);\n    std::cout << \"La suma es: \" << resultado << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *crear_array(int tamano) {\n    int *array = (int *)malloc(tamano * sizeof(int));\n    return array;\n}\n\nint main() {\n    int *mi_array = crear_array(5);\n    // Trabajo con el array\n    free(mi_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> crear_vector(int tamano) {\n    std::vector<int> vec(tamano);\n    return vec;\n}\n\nint main() {\n    std::vector<int> mi_vector = crear_vector(5);\n    // Trabajo con el vector\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid imprimir_punto(Punto *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Punto punto;\n    punto.x = 3;\n    punto.y = 5;\n    imprimir_punto(&punto);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto punto;\n    punto.x = 3;\n    punto.y = 5;\n    imprimir_punto(punto);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char nombre[20];\n} Persona;\n\nvoid imprimir_persona(const Persona *p) {\n    printf(\"ID: %d, Nombre: %s\\n\", p->id, p->nombre);\n}\n\nint main() {\n    Persona persona;\n    persona.id = 1;\n    strcpy(persona.nombre, \"Juan\");\n    imprimir_persona(&persona);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    int id;\n    std::string nombre;\n};\n\nvoid imprimir_persona(const Persona &p) {\n    std::cout << \"ID: \" << p.id << \", Nombre: \" << p.nombre << std::endl;\n}\n\nint main() {\n    Persona persona;\n    persona.id = 1;\n    persona.nombre = \"Juan\";\n    imprimir_persona(persona);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid duplicar(int *numero) {\n    *numero *= 2;\n}\n\nint main() {\n    int num = 5;\n    duplicar(&num);\n    printf(\"El doble es: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid duplicar(int &numero) {\n    numero *= 2;\n}\n\nint main() {\n    int num = 5;\n    duplicar(num);\n    std::cout << \"El doble es: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArrays(int* arr1, int* arr2, int n, int* result) {\n    for(int i = 0; i < n; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}", "target_code": "void sumArrays(const std::vector<int>& arr1, const std::vector<int>& arr2, std::vector<int>& result) {\n    for(int i = 0; i < arr1.size(); i++) {\n        result.push_back(arr1[i] + arr2[i]);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int n) {\n    int* arr = (int*)malloc(n * sizeof(int));\n    return arr;\n}", "target_code": "int* createArray(int n) {\n    return new int[n];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    increment(&number);\n    printf(\"Number after increment: %d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    increment(number);\n    std::cout << \"Number after increment: \" << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = createArray(5);\n    freeArray(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> array = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(&p, 3, 5);\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(p, 3, 5);\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPersonInfo(Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    Person p;\n    sprintf(p.name, \"John\");\n    p.age = 30;\n    printPersonInfo(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPersonInfo(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    printPersonInfo(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int result = sumArray(array, 5);\n    printf(\"Sum of array: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n    int result = sumArray(array);\n    std::cout << \"Sum of array: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point *p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printMessage(char *message) {\n    printf(\"%s\\n\", message);\n}\n", "target_code": "#include <iostream>\n\nvoid printMessage(const char *message) {\n    std::cout << message << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumarArrays(int* arr1, int* arr2, int* resultado, int size) {\n    for(int i = 0; i < size; i++) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {5, 4, 3, 2, 1};\n    int resultado[5];\n\n    sumarArrays(arr1, arr2, resultado, 5);\n\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", resultado[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(int* arr1, int* arr2, int* resultado, int size) {\n    for(int i = 0; i < size; i++) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {5, 4, 3, 2, 1};\n    int resultado[5];\n\n    sumarArrays(arr1, arr2, resultado, 5);\n\n    for(int i = 0; i < 5; i++) {\n        std::cout << resultado[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nstruct Punto* crearPunto(int x, int y) {\n    struct Punto* punto = (struct Punto*)malloc(sizeof(struct Punto));\n    punto->x = x;\n    punto->y = y;\n    return punto;\n}\n\nint main() {\n    struct Punto* punto1 = crearPunto(3, 5);\n    printf(\"Punto: (%d, %d)\\n\", punto1->x, punto1->y);\n    free(punto1);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nPunto* crearPunto(int x, int y) {\n    Punto* punto = new Punto;\n    punto->x = x;\n    punto->y = y;\n    return punto;\n}\n\nint main() {\n    Punto* punto1 = crearPunto(3, 5);\n    std::cout << \"Punto: (\" << punto1->x << \", \" << punto1->y << \")\" << std::endl;\n    delete punto1;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n\n    swap(&x, &y);\n\n    printf(\"x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n\n    swap(x, y);\n\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid duplicarArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n\n    duplicarArray(arr, 5);\n\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicarArray(std::vector<int>& arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n\n    duplicarArray(arr);\n\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid imprimirMatriz(int** matriz, int filas, int columnas) {\n    for(int i = 0; i < filas; i++) {\n        for(int j = 0; j < columnas; j++) {\n            printf(\"%d \", matriz[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int** matriz = (int**)malloc(3 * sizeof(int*));\n    for(int i = 0; i < 3; i++) {\n        matriz[i] = (int*)malloc(3 * sizeof(int));\n        for(int j = 0; j < 3; j++) {\n            matriz[i][j] = i + j;\n        }\n    }\n\n    imprimirMatriz(matriz, 3, 3);\n\n    for(int i = 0; i < 3; i++) {\n        free(matriz[i]);\n    }\n    free(matriz);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid imprimirMatriz(const std::vector<std::vector<int>>& matriz) {\n    for(int i = 0; i < matriz.size(); i++) {\n        for(int j = 0; j < matriz[i].size(); j++) {\n            std::cout << matriz[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matriz(3, std::vector<int>(3));\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            matriz[i][j] = i + j;\n        }\n    }\n\n    imprimirMatriz(matriz);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person; void print_person_info(Person *p) { printf(\"ID: %d, Name: %s\\n\", p->id, p->name); }", "target_code": "struct Person { int id; std::string name; }; void print_person_info(const Person &p) { std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "int *create_array(int size) { return new int[size]; } void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int> &src, std::vector<int> &dest) { std::copy(src.begin(), src.end(), dest.begin()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    square_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    square_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student(Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student(&s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student(const Student &s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_int(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del intercambio: x = %d, y = %d\\n\", x, y);\n    swap_int(&x, &y);\n    printf(\"Después del intercambio: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del intercambio: x = \" << x << \", y = \" << y << std::endl;\n    swap_int(x, y);\n    std::cout << \"Después del intercambio: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiply_array(int* arr, int size, int factor) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= factor;\n    }\n}\n\nint main() {\n    int size = 5;\n    int* my_array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        my_array[i] = i + 1;\n    }\n    multiply_array(my_array, size, 2);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", my_array[i]);\n    }\n    free(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_vector(std::vector<int>& vec, int factor) {\n    for (int& num : vec) {\n        num *= factor;\n    }\n}\n\nint main() {\n    std::vector<int> my_vector = {1, 2, 3, 4, 5};\n    multiply_vector(my_vector, 2);\n    for (int num : my_vector) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p1 = {3, 5};\n    print_point(&p1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p1 = {3, 5};\n    print_point(p1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_string(char* str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    char my_string[] = \"hello\";\n    reverse_string(my_string);\n    printf(\"Reversed string: %s\\n\", my_string);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string my_string = \"hello\";\n    reverse_string(my_string);\n    std::cout << \"Reversed string: \" << my_string << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int* my_array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", my_array[i]);\n    }\n    free(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> my_vector = create_vector(5);\n    for (int num : my_vector) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, sum;\n    add(&x, &y, &sum);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, sum;\n    add(x, y, sum);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 3;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 3;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << array[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    delete_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << array[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void addOne(int* num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 5;\n    addOne(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "void addOne(int& num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    addOne(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(&p, 2, 3);\n    printf(\"%d, %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point& p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(p, 2, 3);\n    std::cout << p.x << \", \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    freeIntArray(arr);\n    return 0;\n}", "target_code": "int* createIntArray(int size) {\n    return new int[size];\n}\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    freeIntArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d, %d\\n\", x, y);\n    return 0;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << x << \", \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "void reverseArray(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverseArray(arr);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n\nvoid deleteArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    deleteArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementArray(std::vector<int>& arr) {\n    for (int& num : arr) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    incrementArray(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint getArea(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    printf(\"Area: %d\\n\", getArea(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area: \" << getArea(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid printList(struct Node* head) {\n    while (head != NULL) {\n        printf(\"%d\\n\", head->data);\n        head = head->next;\n    }\n}\n\nint main() {\n    struct Node* head = (struct Node*)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = NULL;\n    printList(head);\n    free(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid printList(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* head = new Node;\n    head->data = 1;\n    head->next = nullptr;\n    printList(head);\n    delete head;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle* r) {\n    return r->length * r->width;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    int a = area(&rect);\n    printf(\"Area: %d\\n\", a);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle& r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    int a = area(rect);\n    std::cout << \"Area: \" << a << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point *p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* multiply_by_scalar(int *arr, int size, int scalar) { int *result = (int*)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) result[i] = arr[i] * scalar; return result; }", "target_code": "std::vector<int> multiply_by_scalar(const std::vector<int> &arr, int scalar) { std::vector<int> result; result.reserve(arr.size()); for (int num : arr) result.push_back(num * scalar); return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *a, int n) { int total = 0; for(int i = 0; i < n; i++) { total += a[i]; } return total; }", "target_code": "int sum(int* a, int n) { int total = 0; for(int i = 0; i < n; i++) { total += a[i]; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *a, int n) { int *temp = (int*)malloc(n * sizeof(int)); for(int i = 0; i < n; i++) { temp[i] = a[n - i - 1]; } for(int i = 0; i < n; i++) { a[i] = temp[i]; } free(temp); }", "target_code": "void reverse_array(int* a, int n) { int* temp = new int[n]; for(int i = 0; i < n; i++) { temp[i] = a[n - i - 1]; } for(int i = 0; i < n; i++) { a[i] = temp[i]; } delete[] temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *a, int n) { for(int i = 0; i < n; i++) { printf(\"%d \", a[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& a) { for(int i = 0; i < a.size(); i++) { std::cout << a[i] << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int n) { int* arr = (int*)malloc(n * sizeof(int)); return arr; }", "target_code": "int* create_array(int n) { return new int[n]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 4};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 4};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int* a) {\n    (*a)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"Value after increment: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &a) {\n    a++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"Value after increment: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    arr[3] = 4;\n    arr[4] = 5;\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    vec[0] = 1;\n    vec[1] = 2;\n    vec[2] = 3;\n    vec[3] = 4;\n    vec[4] = 5;\n    for (int i : vec) {\n        std::cout << i << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point coordinates: x=%d, y=%d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int* arr, int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum(arr, 5);\n    printf(\"Sum of array elements: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& vec) {\n    int result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum(vec);\n    std::cout << \"Sum of vector elements: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = NULL;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_list(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << ' ';\n        current = current->next;\n    }\n}\n\nint main() {\n    Node n1, n2, n3;\n    n1.data = 1;\n    n2.data = 2;\n    n3.data = 3;\n    n1.next = &n2;\n    n2.next = &n3;\n    n3.next = nullptr;\n    print_list(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    increment(&number);\n    printf(\"%d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int& num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    increment(number);\n    std::cout << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* array = createArray(5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> array = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point* point = (Point*)malloc(sizeof(Point));\n    setPoint(point, 3, 4);\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point& p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point point;\n    setPoint(point, 3, 4);\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid initializeArray(Array* arr, int size) {\n    arr->data = (int*)malloc(size * sizeof(int));\n    arr->size = size;\n}\n\nvoid freeArray(Array* arr) {\n    free(arr->data);\n}\n\nint main() {\n    Array array;\n    initializeArray(&array, 3);\n    freeArray(&array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n\n    void initializeArray(int size) {\n        data.resize(size);\n        this->size = size;\n    }\n};\n\nint main() {\n    Array array;\n    array.initializeArray(3);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint square(int num) {\n    return num * num;\n}\n\nint main() {\n    int result = square(5);\n    printf(\"%d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint square(int num) {\n    return num * num;\n}\n\nint main() {\n    int result = square(5);\n    std::cout << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *data = create_array(5);\n    free_array(data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> data = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x = %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x = \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char *dest, char *src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str1[10], str2[] = \"Hello\";\n    copy_string(str1, str2);\n    printf(\"Copied string: %s\\n\", str1);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(std::string &dest, const std::string &src) {\n    dest = src;\n}\n\nint main() {\n    std::string str1, str2 = \"Hello\";\n    copy_string(str1, str2);\n    std::cout << \"Copied string: \" << str1 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\n// C++\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\n// C\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// C++\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {10, 20};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\n// C++\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {10, 20};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\n// C++\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\n// C\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    printf(\"Area: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\n// C++\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    int area() {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r = {3, 4};\n    std::cout << \"Area: \" << r.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum_array(arr, 5);\n    printf(\"Total sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum_vector(vec);\n    std::cout << \"Total sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson *create_person(int id, const char *name) {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nint main() {\n    Person *p = create_person(1, \"John\");\n    printf(\"Person: %d, %s\\n\", p->id, p->name);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* create_person(int id, const std::string &name) {\n    Person *p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n\nint main() {\n    Person *p = create_person(1, \"John\");\n    std::cout << \"Person: \" << p->id << \", \" << p->name << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point pt = {1, 2};\n    move_point(&pt, 3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point pt = {1, 2};\n    move_point(pt, 3, 4);\n    std::cout << \"Point coordinates: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementar(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int numero = 5;\n    incrementar(&numero);\n    printf(\"Numero incrementado: %d\\n\", numero);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid incrementar(int &num) {\n    num++;\n}\n\nint main() {\n    int numero = 5;\n    incrementar(numero);\n    std::cout << \"Numero incrementado: \" << numero << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicarArray(int *array, int size) {\n    int *nuevoArray = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        nuevoArray[i] = array[i] * 2;\n    }\n    return nuevoArray;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *nuevoArr = duplicarArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", nuevoArr[i]);\n    }\n    free(nuevoArr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicarVector(std::vector<int> &vec) {\n    std::vector<int> nuevoVec;\n    for (int i = 0; i < vec.size(); i++) {\n        nuevoVec.push_back(vec[i] * 2);\n    }\n    return nuevoVec;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::vector<int> nuevoVec = duplicarVector(vec);\n    for (int i = 0; i < nuevoVec.size(); i++) {\n        std::cout << nuevoVec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid imprimirPersona(struct Persona p) {\n    printf(\"Nombre: %s, Edad: %d\\n\", p.nombre, p.edad);\n}\n\nint main() {\n    struct Persona persona = {\"Juan\", 30};\n    imprimirPersona(persona);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid imprimirPersona(const Persona &p) {\n    std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl;\n}\n\nint main() {\n    Persona persona = {\"Juan\", 30};\n    imprimirPersona(persona);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid liberarMemoria(int *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *ptr = (int*)malloc(sizeof(int));\n    *ptr = 10;\n    printf(\"Valor antes de liberar: %d\\n\", *ptr);\n    liberarMemoria(ptr);\n    // Intentar acceder a ptr después de liberar resultaría en comportamiento indefinido\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid liberarMemoria(int *ptr) {\n    delete ptr;\n}\n\nint main() {\n    int *ptr = new int;\n    *ptr = 10;\n    std::cout << \"Valor antes de liberar: \" << *ptr << std::endl;\n    liberarMemoria(ptr);\n    // Intentar acceder a ptr después de liberar resultaría en comportamiento indefinido\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del intercambio: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"Después del intercambio: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"Después del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nvoid subtract(int *a, int *b, int *result) {\n    *result = *a - *b;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nvoid subtract(int &a, int &b, int &result) {\n    result = a - b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *array) {\n    free(array);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nvoid delete_array(std::vector<int> &array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_int(int value) {\n    int *ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}\n\nvoid delete_int(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nint* create_int(int value) {\n    int* ptr = new int(value);\n    return ptr;\n}\n\nvoid delete_int(int* ptr) {\n    delete ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i : vec) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i : vec) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(struct Rectangle r) {\n    return r.width * r.height;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    printf(\"Area: %d\\n\", calculate_area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    std::cout << \"Area: \" << calculate_area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int> &arr) { for(const auto &elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson *create_person(int id, char name[]) {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* create_person(int id, std::string name) {\n    Person *p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_rect(int width, int height) {\n    for(int i = 0; i < height; i++) {\n        for(int j = 0; j < width; j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid print_rect(int width, int height) {\n    for(int i = 0; i < height; i++) {\n        for(int j = 0; j < width; j++) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_string(char *str) {\n    int length = strlen(str);\n    for(int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    int length = str.length();\n    for(int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    deleteArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid fillIntArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int* arr = createIntArray(5);\n    fillIntArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nvoid fillVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    fillVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nvoid getArea(const struct Rectangle *r) {\n    int area = r->length * r->width;\n    printf(\"Area: %d\\n\", area);\n}\n\nint main() {\n    struct Rectangle rect = {4, 6};\n    getArea(&rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nvoid getArea(const Rectangle &r) {\n    int area = r.length * r.width;\n    std::cout << \"Area: \" << area << std::endl;\n}\n\nint main() {\n    Rectangle rect = {4, 6};\n    getArea(rect);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumar(int* a, int* b, int* resultado) {\n    *resultado = *a + *b;\n}", "target_code": "void sumar(int& a, int& b, int& resultado) {\n    resultado = a + b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicar(int* arr, int size) {\n    int* nuevo_arr = (int*)malloc(sizeof(int) * size);\n    for (int i = 0; i < size; i++) {\n        nuevo_arr[i] = arr[i] * 2;\n    }\n    return nuevo_arr;\n}", "target_code": "std::vector<int> duplicar(std::vector<int>& arr) {\n    std::vector<int> nuevo_arr;\n    for (int i = 0; i < arr.size(); i++) {\n        nuevo_arr.push_back(arr[i] * 2);\n    }\n    return nuevo_arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Punto;\n\nvoid imprimir_punto(Punto* punto) {\n    printf(\"(%d, %d)\\n\", punto->x, punto->y);\n}", "target_code": "struct Punto {\n    int x;\n    int y;\n};\n\nvoid imprimir_punto(const Punto& punto) {\n    std::cout << \"(\" << punto.x << \", \" << punto.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberar_memoria(int* arr) {\n    free(arr);\n}", "target_code": "void liberar_memoria(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void intercambiar(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void intercambiar(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_ptr(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_function_ptr(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_ref(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_function_ref(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function_struct(Point *p) {\n    p->x = 10;\n    p->y = 20;\n}\n\nint main() {\n    Point point;\n    c_function_struct(&point);\n    printf(\"x: %d, y: %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_struct(Point &p) {\n    p.x = 10;\n    p.y = 20;\n}\n\nint main() {\n    Point point;\n    cpp_function_struct(point);\n    std::cout << \"x: \" << point.x << \", y: \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function_malloc() {\n    int* ptr = (int*)malloc(sizeof(int));\n    *ptr = 5;\n    return ptr;\n}\n\nint main() {\n    int* ptr = (int*)c_function_malloc();\n    printf(\"Value: %d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function_new() {\n    int* ptr = new int;\n    *ptr = 5;\n    return ptr;\n}\n\nint main() {\n    int* ptr = cpp_function_new();\n    std::cout << \"Value: \" << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_2d_array(int** arr, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            arr[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    int rows = 2, cols = 3;\n    int** arr = (int**)malloc(rows * sizeof(int*));\n    for (int i = 0; i < rows; i++) {\n        arr[i] = (int*)malloc(cols * sizeof(int));\n    }\n    arr[0][0] = 1; arr[0][1] = 2; arr[0][2] = 3;\n    arr[1][0] = 4; arr[1][1] = 5; arr[1][2] = 6;\n    c_function_2d_array(arr, rows, cols);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < rows; i++) {\n        free(arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_2d_vector(std::vector<std::vector<int>> &vec) {\n    for (std::vector<int> &row : vec) {\n        for (int &num : row) {\n            num *= 2;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> vec = {{1, 2, 3}, {4, 5, 6}};\n    cpp_function_2d_vector(vec);\n    for (const std::vector<int> &row : vec) {\n        for (int num : row) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_int(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_int(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int start = 0; int end = size - 1; while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { int start = 0; int end = vec.size() - 1; while (start < end) { int temp = vec[start]; vec[start] = vec[end]; vec[end] = temp; start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void free_point(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; } void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int>& vec) { for (int i = 0; i < vec.size(); i++) { std::cout << vec[i] << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int array[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum_vector(vec);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson* create_person(int id, const char* name) {\n    Person* p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nint main() {\n    Person* p = create_person(1, \"Alice\");\n    printf(\"Person: %d %s\\n\", p->id, p->name);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* create_person(int id, const std::string &name) {\n    Person* p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n\nint main() {\n    Person* p = create_person(1, \"Alice\");\n    std::cout << \"Person: \" << p->id << \" \" << p->name << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point pt = {3, 4};\n    move_point(&pt, 2, -1);\n    printf(\"New coordinates: (%d, %d)\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point pt = {3, 4};\n    move_point(pt, 2, -1);\n    std::cout << \"New coordinates: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(std::vector<int>& arr) { int result = 0; for(int i = 0; i < arr.size(); i++) { result += arr[i]; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(std::vector<int>& arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(char* str) { int len = strlen(str); for(int i = 0; i < len / 2; i++) { char temp = str[i]; str[i] = str[len - i - 1]; str[len - i - 1] = temp; } }", "target_code": "void reverse(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person; Person* create_person(int id, const char* name) { Person* p = (Person*)malloc(sizeof(Person)); p->id = id; strcpy(p->name, name); return p; } void delete_person(Person* p) { free(p); }", "target_code": "struct Person { int id; std::string name; }; Person* create_person(int id, const std::string& name) { return new Person{id, name}; } void delete_person(Person* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void bubble_sort(int* arr, int size) { for(int i = 0; i < size - 1; i++) { for(int j = 0; j < size - i - 1; j++) { if(arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } }", "target_code": "void bubble_sort(std::vector<int>& arr) { std::sort(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int fibonacci(int n) { if(n <= 1) return n; else return fibonacci(n - 1) + fibonacci(n - 2); }", "target_code": "int fibonacci(int n) { if(n <= 1) return n; int a = 0, b = 1; for(int i = 2; i <= n; i++) { int c = a + b; a = b; b = c; } return b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_ints(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_ints(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_ints(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_ints(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid destroy_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* my_array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        my_array[i] = i;\n    }\n    destroy_array(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> my_array = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        my_array[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const struct Rectangle* r) {\n    return r->width * r->height;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    printf(\"Area = %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle& r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    std::cout << \"Area = \" << area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid cpp_function_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_reverse_array(int *array, int size) {\n    int *temp_array = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp_array[i] = array[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        array[i] = temp_array[i];\n    }\n    free(temp_array);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_reverse_vector(std::vector<int> &vec) {\n    std::vector<int> temp_vec;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp_vec.push_back(vec[i]);\n    }\n    vec = temp_vec;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct_point {\n    int x;\n    int y;\n};\n\nvoid c_function_print_point(struct c_struct_point *point) {\n    printf(\"%d, %d\\n\", point->x, point->y);\n}\n", "target_code": "#include <iostream>\n\nstruct cpp_struct_point {\n    int x;\n    int y;\n};\n\nvoid cpp_function_print_point(const cpp_struct_point &point) {\n    std::cout << point.x << \", \" << point.y << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_multiply_matrix(int *matrix, int rows, int cols, int scalar) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i * cols + j] *= scalar;\n        }\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_multiply_matrix(std::vector<std::vector<int>> &matrix, int scalar) {\n    for (int i = 0; i < matrix.size(); i++) {\n        for (int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_merge_arrays(int *array1, int size1, int *array2, int size2, int *result) {\n    int i = 0, j = 0, k = 0;\n    while (i < size1 && j < size2) {\n        if (array1[i] <= array2[j]) {\n            result[k++] = array1[i++];\n        } else {\n            result[k++] = array2[j++];\n        }\n    }\n    while (i < size1) {\n        result[k++] = array1[i++];\n    }\n    while (j < size2) {\n        result[k++] = array2[j++];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_function_merge_vectors(const std::vector<int> &vec1, const std::vector<int> &vec2) {\n    std::vector<int> result;\n    int i = 0, j = 0;\n    while (i < vec1.size() && j < vec2.size()) {\n        if (vec1[i] <= vec2[j]) {\n            result.push_back(vec1[i++]);\n        } else {\n            result.push_back(vec2[j++]);\n        }\n    }\n    while (i < vec1.size()) {\n        result.push_back(vec1[i++]);\n    }\n    while (j < vec2.size()) {\n        result.push_back(vec2[j++]);\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    arr[0] = 1;\n    arr[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {10, 20};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {10, 20};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nEmployee* create_employee(int id, const char *name) {\n    Employee *emp = (Employee*)malloc(sizeof(Employee));\n    emp->id = id;\n    strncpy(emp->name, name, 20);\n    return emp;\n}\n\nvoid free_employee(Employee *emp) {\n    free(emp);\n}\n\nint main() {\n    Employee *emp = create_employee(1, \"John\");\n    free_employee(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nEmployee* create_employee(int id, const std::string &name) {\n    Employee *emp = new Employee;\n    emp->id = id;\n    emp->name = name;\n    return emp;\n}\n\nint main() {\n    Employee *emp = create_employee(1, \"John\");\n    delete emp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add_one_to_elements(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    add_one_to_elements(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid add_one_to_elements(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    add_one_to_elements(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid incrementArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    incrementArray(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid incrementVector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num++;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nstruct Point {\n    int x, y;\n};\nstruct Point* createPoint(int x, int y) {\n    struct Point* p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\nint main() {\n    struct Point* p = createPoint(3, 4);\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x, y;\n    Point(int x, int y) : x(x), y(y) {}\n};\nint main() {\n    Point* p = new Point(3, 4);\n    std::cout << \"Point: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Rectangle {\n    int length, width;\n};\nvoid calculateArea(struct Rectangle *rect) {\n    int area = rect->length * rect->width;\n    printf(\"Area of rectangle: %d\\n\", area);\n}\nint main() {\n    struct Rectangle r = {5, 3};\n    calculateArea(&r);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Rectangle {\npublic:\n    int length, width;\n    void calculateArea() {\n        int area = length * width;\n        std::cout << \"Area of rectangle: \" << area << std::endl;\n    }\n};\nint main() {\n    Rectangle r {5, 3};\n    r.calculateArea();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Person {\n    char name[20];\n    int age;\n};\nvoid printPerson(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\nint main() {\n    struct Person p = {\"Alice\", 25};\n    printPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\nclass Person {\npublic:\n    std::string name;\n    int age;\n    void printPerson() {\n        std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n    }\n};\nint main() {\n    Person p {\"Alice\", 25};\n    p.printPerson();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArray(int *arr, int size, int *result) { *result = 0; for(int i=0; i<size; i++) { *result += arr[i]; } }", "target_code": "void sumVector(std::vector<int> &vec, int &result) { result = 0; for(int i=0; i<vec.size(); i++) { result += vec[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point *p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; } void freeArray(int *arr) { free(arr); }", "target_code": "int *createVector(int size) { return new int[size]; } void freeVector(int *vec) { delete[] vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapInts(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapInts(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void printRectangle(Rectangle *rect) { printf(\"Width: %d, Height: %d\\n\", rect->width, rect->height); }", "target_code": "struct Rectangle { int width; int height; }; void printRectangle(const Rectangle &rect) { std::cout << \"Width: \" << rect.width << \", Height: \" << rect.height << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArrayC(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arrC[] = {1, 2, 3, 4, 5};\n    printArrayC(arrC, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVectorCpp(const std::vector<int> &vec) {\n    for(const auto &elem : vec) {\n        std::cout << elem << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vecCpp = {1, 2, 3, 4, 5};\n    printVectorCpp(vecCpp);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* createPointC(int x, int y) {\n    struct Point* p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    struct Point* pointC = createPointC(3, 4);\n    printf(\"%d %d\\n\", pointC->x, pointC->y);\n    free(pointC);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPointCpp(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* pointCpp = createPointCpp(3, 4);\n    std::cout << pointCpp->x << \" \" << pointCpp->y << std::endl;\n    delete pointCpp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapC(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapC(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapCpp(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapCpp(x, y);\n    std::cout << x << \" \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid doubleArrayC(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arrC[] = {1, 2, 3, 4, 5};\n    doubleArrayC(arrC, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arrC[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid doubleVectorCpp(std::vector<int> &vec) {\n    for(int &elem : vec) {\n        elem *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vecCpp = {1, 2, 3, 4, 5};\n    doubleVectorCpp(vecCpp);\n    for(const auto &elem : vecCpp) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid squareArrayC(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arrC[] = {1, 2, 3, 4, 5};\n    squareArrayC(arrC, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arrC[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareVectorCpp(std::vector<int> &vec) {\n    for(int &elem : vec) {\n        elem *= elem;\n    }\n}\n\nint main() {\n    std::vector<int> vecCpp = {1, 2, 3, 4, 5};\n    squareVectorCpp(vecCpp);\n    for(const auto &elem : vecCpp) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumarArrays(int *arr1, int *arr2, int n, int *resultado) {\n    for(int i = 0; i < n; i++) {\n        resultado[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int n = 3;\n    int *resultado = (int *)malloc(n * sizeof(int));\n    sumarArrays(arr1, arr2, n, resultado);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", resultado[i]);\n    }\n    free(resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(const std::vector<int> &arr1, const std::vector<int> &arr2, std::vector<int> &resultado) {\n    for(int i = 0; i < arr1.size(); i++) {\n        resultado.push_back(arr1[i] + arr2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2 = {4, 5, 6};\n    std::vector<int> resultado;\n    sumarArrays(arr1, arr2, resultado);\n    for(int i = 0; i < resultado.size(); i++) {\n        std::cout << resultado[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Persona {\n    char nombre[20];\n    int edad;\n};\n\nvoid imprimirPersona(struct Persona *persona) {\n    printf(\"Nombre: %s, Edad: %d\\n\", persona->nombre, persona->edad);\n}\n\nint main() {\n    struct Persona p;\n    strcpy(p.nombre, \"Juan\");\n    p.edad = 30;\n    imprimirPersona(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid imprimirPersona(const Persona &persona) {\n    std::cout << \"Nombre: \" << persona.nombre << \", Edad: \" << persona.edad << std::endl;\n}\n\nint main() {\n    Persona p;\n    p.nombre = \"Juan\";\n    p.edad = 30;\n    imprimirPersona(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicarArray(int *arr, int n) {\n    for(int i = 0; i < n; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int n = 3;\n    duplicarArray(arr, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicarArray(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3};\n    duplicarArray(arr);\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid intercambiarValores(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiarValores(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid intercambiarValores(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    intercambiarValores(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid invertirArray(int *arr, int n) {\n    for(int i = 0; i < n/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[n - i - 1];\n        arr[n - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    invertirArray(arr, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid invertirArray(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    invertirArray(arr);\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num = 5;\n    c_function1(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int num = 5;\n    cpp_function1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for (int &x : vec) {\n        x *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for (int x : vec) {\n        std::cout << x << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int val;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->val = 20;\n}\n\nint main() {\n    struct c_struct s;\n    c_function3(&s);\n    printf(\"%d\\n\", s.val);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int val;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.val = 20;\n}\n\nint main() {\n    cpp_struct s;\n    cpp_function3(s);\n    std::cout << s.val << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function4(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int *)c_function4(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    printf(\"\\n\");\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nint main() {\n    int *ptr = cpp_function4(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << ptr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += i;\n    }\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    c_function5(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<int> &vec) {\n    for (size_t i = 0; i < vec.size(); i++) {\n        vec[i] += i;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    cpp_function5(vec);\n    for (int x : vec) {\n        std::cout << x << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar(int* num) {\n    (*num)++;\n}\n\nvoid duplicar(int* num) {\n    *num = *num * 2;\n}", "target_code": "#include <iostream>\n\nvoid incrementar(int& num) {\n    num++;\n}\n\nvoid duplicar(int& num) {\n    num = num * 2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumarArrays(int* arr1, int* arr2, int n) {\n    for(int i = 0; i < n; i++) {\n        arr1[i] += arr2[i];\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(std::vector<int>& arr1, std::vector<int>& arr2) {\n    for(int i = 0; i < arr1.size(); i++) {\n        arr1[i] += arr2[i];\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid moverPunto(Punto* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nvoid moverPunto(Punto& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* crearArray(int n) {\n    return (int*)malloc(n * sizeof(int));\n}\n\nvoid liberarArray(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n\nint* crearArray(int n) {\n    return new int[n];\n}\n\nvoid liberarArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangulo {\n    int base;\n    int altura;\n};\n\nint areaRectangulo(Rectangulo* r) {\n    return r->base * r->altura;\n}", "target_code": "#include <iostream>\n\nstruct Rectangulo {\n    int base;\n    int altura;\n};\n\nint areaRectangulo(Rectangulo& r) {\n    return r.base * r.altura;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* createPoint(int x, int y) {\n    struct Point *p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point *point = createPoint(3, 4);\n    printPoint(point);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point *p) {\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n}\n\nint main() {\n    Point *point = createPoint(3, 4);\n    printPoint(point);\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(struct Rectangle rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    struct Rectangle rect = {5, 10};\n    int area = calculateArea(rect);\n    printf(\"Area of rectangle: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    int area = calculateArea(rect);\n    std::cout << \"Area of rectangle: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* allocateMemory(int size) {\n    return malloc(size);\n}\n\nvoid freeMemory(void *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *arr = (int*)allocateMemory(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    freeMemory(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* allocateMemory(int size) {\n    return new int[size];\n}\n\nvoid freeMemory(int *ptr) {\n    delete[] ptr;\n}\n\nint main() {\n    int *arr = allocateMemory(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    freeMemory(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = create_array(5);\n    free_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> array = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_coordinates(struct Point *p, int new_x, int new_y) {\n    p->x = new_x;\n    p->y = new_y;\n}\n\nint main() {\n    struct Point p;\n    set_coordinates(&p, 1, 2);\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_coordinates(Point &p, int new_x, int new_y) {\n    p.x = new_x;\n    p.y = new_y;\n}\n\nint main() {\n    Point p;\n    set_coordinates(p, 1, 2);\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    square_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_array(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    square_array(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid set_dimensions(Rectangle *rect, int new_width, int new_height) {\n    rect->width = new_width;\n    rect->height = new_height;\n}\n\nint main() {\n    Rectangle rect;\n    set_dimensions(&rect, 10, 20);\n    printf(\"width = %d, height = %d\\n\", rect.width, rect.height);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid set_dimensions(Rectangle &rect, int new_width, int new_height) {\n    rect.width = new_width;\n    rect.height = new_height;\n}\n\nint main() {\n    Rectangle rect;\n    set_dimensions(rect, 10, 20);\n    std::cout << \"width = \" << rect.width << \", height = \" << rect.height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_sum(int *a, int *b, int *c) {\n    *c = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, z;\n    c_sum(&x, &y, &z);\n    printf(\"Sum: %d\\n\", z);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_sum(int &a, int &b, int &c) {\n    c = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, z;\n    cpp_sum(x, y, z);\n    std::cout << \"Sum: \" << z << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse(int *arr, int size) {\n    int i, temp;\n    for (i = 0; i < size / 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_reverse(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_reverse(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_reverse(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_point {\n    int x;\n    int y;\n};\n\nvoid c_translate(struct c_point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct c_point point = {3, 4};\n    c_translate(&point, 2, 3);\n    printf(\"Translated point: (%d, %d)\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_point {\n    int x;\n    int y;\n};\n\nvoid cpp_translate(cpp_point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    cpp_point point = {3, 4};\n    cpp_translate(point, 2, 3);\n    std::cout << \"Translated point: (\" << point.x << \", \" << point.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_multiply(int *mat1, int *mat2, int *result, int rows, int cols, int common) {\n    int i, j, k;\n    for (i = 0; i < rows; i++) {\n        for (j = 0; j < cols; j++) {\n            result[i * cols + j] = 0;\n            for (k = 0; k < common; k++) {\n                result[i * cols + j] += mat1[i * common + k] * mat2[k * cols + j];\n            }\n        }\n    }\n}\n\nint main() {\n    int mat1[] = {2, 3, 4, 5};\n    int mat2[] = {1, 0, 2, 1};\n    int result[4];\n    c_multiply(mat1, mat2, result, 2, 2, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", result[i * 2 + j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_multiply(std::vector<int> &mat1, std::vector<int> &mat2, std::vector<int> &result, int rows, int cols, int common) {\n    result.resize(rows * cols);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            result[i * cols + j] = 0;\n            for (int k = 0; k < common; k++) {\n                result[i * cols + j] += mat1[i * common + k] * mat2[k * cols + j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<int> mat1 = {2, 3, 4, 5};\n    std::vector<int> mat2 = {1, 0, 2, 1};\n    std::vector<int> result;\n    cpp_multiply(mat1, mat2, result, 2, 2, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            std::cout << result[i * 2 + j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_fibonacci(int n, int *fib) {\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 2; i < n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n}\n\nint main() {\n    int n = 10;\n    int fib[10];\n    c_fibonacci(n, fib);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", fib[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_fibonacci(int n, std::vector<int> &fib) {\n    fib.resize(n);\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 2; i < n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n}\n\nint main() {\n    int n = 10;\n    std::vector<int> fib;\n    cpp_fibonacci(n, fib);\n    for (int i = 0; i < n; i++) {\n        std::cout << fib[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *a, int *b) {\n    *a = *a + 1;\n    *b = *b - 1;\n}\n\nvoid c_plus_plus_function1(int &a, int &b) {\n    a = a + 1;\n    b = b - 1;\n}", "target_code": "#include <iostream>\n\nvoid c_function1(int *a, int *b) {\n    *a = *a + 1;\n    *b = *b - 1;\n}\n\nvoid c_plus_plus_function1(int &a, int &b) {\n    a = a + 1;\n    b = b - 1;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nvoid c_plus_plus_function2(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * 2;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nvoid c_plus_plus_function2(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->x = s->x * 2;\n    s->y = s->y * 3;\n}\n\nstruct c_plus_plus_struct {\n    int x;\n    int y;\n};\n\nvoid c_plus_plus_function3(c_plus_plus_struct &s) {\n    s.x = s.x * 2;\n    s.y = s.y * 3;\n}", "target_code": "#include <iostream>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->x = s->x * 2;\n    s->y = s->y * 3;\n}\n\nstruct c_plus_plus_struct {\n    int x;\n    int y;\n};\n\nvoid c_plus_plus_function3(c_plus_plus_struct &s) {\n    s.x = s.x * 2;\n    s.y = s.y * 3;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function4(int n) {\n    return malloc(n * sizeof(int));\n}\n\nvoid c_plus_plus_function4(int n) {\n    int* arr = new int[n];\n}", "target_code": "#include <iostream>\n\nvoid *c_function4(int n) {\n    return malloc(n * sizeof(int));\n}\n\nvoid c_plus_plus_function4(int n) {\n    int* arr = new int[n];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *a, int *b) {\n    *a += 10;\n    *b -= 5;\n}\n\nvoid c_plus_plus_function5(int &a, int &b) {\n    a += 10;\n    b -= 5;\n}", "target_code": "#include <iostream>\n\nvoid c_function5(int *a, int *b) {\n    *a += 10;\n    *b -= 5;\n}\n\nvoid c_plus_plus_function5(int &a, int &b) {\n    a += 10;\n    b -= 5;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    addArrays(arr1, arr2, result, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(std::vector<int>& vec1, std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for(int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(1, 2);\n    printf(\"Point coordinates: %d, %d\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(1, 2);\n    std::cout << \"Point coordinates: \" << p->x << \", \" << p->y << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapInts(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapInts(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapInts(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* customMalloc(size_t size) {\n    void* ptr = malloc(size);\n    return ptr;\n}\n\nvoid customFree(void* ptr) {\n    free(ptr);\n}\n\nint main() {\n    int* ptr = (int*)customMalloc(sizeof(int));\n    *ptr = 42;\n    printf(\"Value: %d\\n\", *ptr);\n    customFree(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid* customMalloc(size_t size) {\n    void* ptr = new char[size];\n    return ptr;\n}\n\nvoid customFree(void* ptr) {\n    delete[] static_cast<char*>(ptr);\n}\n\nint main() {\n    int* ptr = static_cast<int*>(customMalloc(sizeof(int));\n    *ptr = 42;\n    std::cout << \"Value: \" << *ptr << std::endl;\n    customFree(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = 0;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(std::vector<int>& vec, int& result) {\n    for(int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = 0;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point* p) {\n    printf(\"Coordinates: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* custom_malloc(int size) {\n    return malloc(size);\n}\n\nvoid custom_free(void* ptr) {\n    free(ptr);\n}\n\nint main() {\n    int* ptr = (int*)custom_malloc(sizeof(int));\n    *ptr = 10;\n    printf(\"Value: %d\\n\", *ptr);\n    custom_free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid* custom_malloc(int size) {\n    return new char[size];\n}\n\nvoid custom_free(void* ptr) {\n    delete[] reinterpret_cast<char*>(ptr);\n}\n\nint main() {\n    int* ptr = reinterpret_cast<int*>(custom_malloc(sizeof(int));\n    *ptr = 10;\n    std::cout << \"Value: \" << *ptr << std::endl;\n    custom_free(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(struct Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle r = {3, 4};\n    int area = calculate_area(&r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    int area = calculate_area(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumarArrays(int* a, int* b, int* c, int size) {\n    for(int i = 0; i < size; i++) {\n        c[i] = a[i] + b[i];\n    }\n}\n\nint main() {\n    int a[] = {1, 2, 3};\n    int b[] = {4, 5, 6};\n    int c[3];\n\n    sumarArrays(a, b, c, 3);\n\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", c[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarArrays(std::vector<int>& a, std::vector<int>& b, std::vector<int>& c) {\n    for(int i = 0; i < a.size(); i++) {\n        c.push_back(a[i] + b[i]);\n    }\n}\n\nint main() {\n    std::vector<int> a = {1, 2, 3};\n    std::vector<int> b = {4, 5, 6};\n    std::vector<int> c;\n\n    sumarArrays(a, b, c);\n\n    for(int i = 0; i < c.size(); i++) {\n        std::cout << c[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Punto;\n\nPunto* crearPunto(int x, int y) {\n    Punto* p = (Punto*)malloc(sizeof(Punto));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Punto* punto = crearPunto(3, 4);\n    printf(\"Punto (%d, %d)\\n\", punto->x, punto->y);\n    free(punto);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    int x;\n    int y;\n};\n\nPunto* crearPunto(int x, int y) {\n    return new Punto {x, y};\n}\n\nint main() {\n    Punto* punto = crearPunto(3, 4);\n    std::cout << \"Punto (\" << punto->x << \", \" << punto->y << \")\" << std::endl;\n    delete punto;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copiarArray(int* origen, int* destino, int size) {\n    for(int i = 0; i < size; i++) {\n        destino[i] = origen[i];\n    }\n}\n\nint main() {\n    int a[] = {1, 2, 3};\n    int b[3];\n\n    copiarArray(a, b, 3);\n\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", b[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copiarArray(std::vector<int>& origen, std::vector<int>& destino) {\n    destino = origen;\n}\n\nint main() {\n    std::vector<int> a = {1, 2, 3};\n    std::vector<int> b;\n\n    copiarArray(a, b);\n\n    for(int i = 0; i < b.size(); i++) {\n        std::cout << b[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid intercambiar(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n\n    intercambiar(&x, &y);\n\n    printf(\"x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid intercambiar(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n\n    intercambiar(x, y);\n\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid imprimirCuadrado(int n) {\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    imprimirCuadrado(4);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid imprimirCuadrado(int n) {\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    imprimirCuadrado(4);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid square(int *num) {\n    *num = (*num) * (*num);\n}\n\nint main() {\n    int num = 5;\n    square(&num);\n    printf(\"Square: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &num) {\n    num = num * num;\n}\n\nint main() {\n    int num = 5;\n    square(num);\n    std::cout << \"Square: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for(int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {3, 4};\n    move_point(&p, 1, 2);\n    printf(\"New position: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {3, 4};\n    move_point(p, 1, 2);\n    std::cout << \"New position: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    int *arr = new int[size];\n    for(int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; ++i) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid get_area(Rectangle *rect) {\n    int area = rect->width * rect->height;\n    printf(\"Area: %d\\n\", area);\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    get_area(&rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid get_area(const Rectangle &rect) {\n    int area = rect.width * rect.height;\n    std::cout << \"Area: \" << area << std::endl;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    get_area(rect);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum_vector(vec);\n    std::cout << \"Sum = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nvoid print_employee(const Employee *emp) {\n    printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name);\n}\n\nint main() {\n    Employee *emp = (Employee*)malloc(sizeof(Employee));\n    emp->id = 1;\n    strcpy(emp->name, \"John\");\n    print_employee(emp);\n    free(emp);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nvoid print_employee(const Employee &emp) {\n    std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n}\n\nint main() {\n    Employee *emp = new Employee;\n    emp->id = 1;\n    emp->name = \"John\";\n    print_employee(*emp);\n    delete emp;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(const Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int result = area(&r);\n    printf(\"Area = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    int result = area(r);\n    std::cout << \"Area = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int len = strlen(str);\n    for (int i = 0, j = len - 1; i < j; i++, j--) {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    int len = str.length();\n    for (int i = 0, j = len - 1; i < j; i++, j--) {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int result = 0; for(int i = 0; i < size; i++) result += arr[i]; return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for(int num : arr) result += num; return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int* arr, int size) { int temp; for(int i = 0; i < size / 2; i++) { temp = arr[i]; arr[i] = arr[size - 1 - i]; arr[size - 1 - i] = temp; } }", "target_code": "void reverse(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "std::vector<int>* createArray(int size) { return new std::vector<int>(size); } void deleteArray(std::vector<int>* arr) { delete arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << \" \"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num = 0;\n    c_function1(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int num = 0;\n    cpp_function1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for(int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->id = 1;\n    strcpy(s->name, \"John\");\n}\n\nint main() {\n    struct c_struct s;\n    c_function3(&s);\n    printf(\"ID: %d, Name: %s\\n\", s.id, s.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.id = 1;\n    s.name = \"John\";\n}\n\nint main() {\n    cpp_struct s;\n    cpp_function3(s);\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function4(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int *)c_function4(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    printf(\"\\n\");\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_function4(5);\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << ptr[i] << ' ';\n    }\n    std::cout << std::endl;\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    c_function5(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(const std::vector<int> &vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function5(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_array(const std::vector<int>& arr, int& result) {\n    result = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        result += arr[i];\n    }\n}\n\nvoid print_array(const std::vector<int>& arr) {\n    for (const auto& element : arr) {\n        std::cout << element << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(struct Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    return new int[size];\n}\n\nvoid free_array(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(const struct Rectangle* rect) {\n    return rect->width * rect->height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(const Rectangle& rect) {\n    return rect.width * rect.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5] = {5, 4, 3, 2, 1};\n    int result[5];\n    addArrays(arr1, arr2, result, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for(int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* createPoint(int x, int y) {\n    struct Point* p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point* p = createPoint(3, 4);\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(const Point* p) {\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid printArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int* arr = createArray(5);\n    printArray(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    int* arr = new int[size];\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid printArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    int* arr = createArray(5);\n    printArray(arr, 5);\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(const struct Rectangle* rect) {\n    return rect->length * rect->width;\n}\n\nint main() {\n    struct Rectangle r = {4, 5};\n    printf(\"Area: %d\\n\", calculateArea(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(const Rectangle& rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area: \" << calculateArea(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(&x, &y, &res);\n    printf(\"Sum: %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(x, y, res);\n    std::cout << \"Sum: \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* create_vector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid free_vector(std::vector<int> *vec) {\n    delete vec;\n}\n\nint main() {\n    std::vector<int>* vec = create_vector(5);\n    free_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {2, 3};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {2, 3};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 3;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 3;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid double_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid double_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    double_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int arr[], int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint* createArray(int size) {\n    return new int[size];\n}\n\nvoid freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)calloc(size, sizeof(int));\n}\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint* createIntArray(int size) {\n    return new int[size]();\n}\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangle(struct Rectangle* r) {\n    printf(\"Rectangle: width=%d, height=%d\\n\", r->width, r->height);\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid printRectangle(const Rectangle& r) {\n    std::cout << \"Rectangle: width=\" << r.width << \", height=\" << r.height << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int* arr, int size) {\n    int* doubledArr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        doubledArr[i] = arr[i] * 2;\n    }\n    return doubledArr;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int>& arr) {\n    std::vector<int> doubledArr;\n    for(int i = 0; i < arr.size(); i++) {\n        doubledArr.push_back(arr[i] * 2);\n    }\n    return doubledArr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *myArray = createArray(5);\n    freeArray(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> myArray = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"x: %d, y: %d\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nint main() {\n    struct Node* n = createNode(5);\n    printf(\"Data: %d\\n\", n->data);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nint main() {\n    Node* n = createNode(5);\n    std::cout << \"Data: \" << n->data << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyArray(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2(5);\n    copyArray(arr1, arr2);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int* array = create_array(size);\n    free_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = create_vector(size);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    printf(\"Area of rectangle: %d\\n\", area(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    std::cout << \"Area of rectangle: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    increment(&number);\n    printf(\"Number after increment: %d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    increment(number);\n    std::cout << \"Number after increment: \" << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printVector(std::vector<int>& vec) { for(int i = 0; i < vec.size(); i++) std::cout << vec[i] << \" \"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) { free(arr); }", "target_code": "void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); } // no need for explicit delete in C++"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* clone_array(int* arr, int size) { int* clone = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; ++i) { clone[i] = arr[i]; } return clone; }", "target_code": "std::vector<int> clone_vector(const std::vector<int>& vec) { return vec; } // no need for explicit cloning in C++"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* numbers = create_array(5);\n    free_array(numbers);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> numbers = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    p.age = 30;\n    printf(\"Person's age: %d\\n\", p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.age = 30;\n    std::cout << \"Person's age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int* arr, int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int total = sum(numbers, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& arr) {\n    int result = 0;\n    for (int num : arr) {\n        result += num;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int total = sum(numbers);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 10);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 10);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    print_array(numbers, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    print_vector(numbers);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    c_function1(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function2(Point* p) {\n    p->x += 10;\n    p->y += 10;\n}\n\nint main() {\n    Point point = {5, 7};\n    c_function2(&point);\n    printf(\"%d %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function2(Point& p) {\n    p.x += 10;\n    p.y += 10;\n}\n\nint main() {\n    Point point = {5, 7};\n    cpp_function2(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int* ptr) {\n    *ptr = 100;\n}\n\nint main() {\n    int* ptr = (int*)malloc(sizeof(int));\n    c_function3(ptr);\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function3(int& ref) {\n    ref = 100;\n}\n\nint main() {\n    int value;\n    cpp_function3(value);\n    std::cout << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int** ptr) {\n    *ptr = (int*)malloc(sizeof(int));\n    **ptr = 42;\n}\n\nint main() {\n    int* ptr;\n    c_function4(&ptr);\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function4(int*& ref) {\n    ref = new int;\n    *ref = 42;\n}\n\nint main() {\n    int* ptr;\n    cpp_function4(ptr);\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    c_function5(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    cpp_function5(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del intercambio: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"Después del intercambio: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"Después del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    printf(\"La suma es: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum(vec);\n    std::cout << \"La suma es: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_vector(const std::vector<int> &src, std::vector<int> &dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest;\n    copy_vector(src, dest);\n    for (int i = 0; i < dest.size(); i++) {\n        std::cout << dest[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"x = %d, y = %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"x = \" << p.x << \", y = \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int* num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x = %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int& num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x = \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_vector(const std::vector<int>& vec) { for(int x : vec) std::cout << x << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void* create_struct(int data) { struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->data = data; newNode->next = NULL; return newNode; }", "target_code": "Node* create_struct(int data) { Node* newNode = new Node; newNode->data = data; newNode->next = nullptr; return newNode; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_array(int* arr, int size) { for(int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void modify_vector(std::vector<int>& vec) { for(int& num : vec) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_memory(void* ptr) { free(ptr); }", "target_code": "void free_memory(Node* ptr) { delete ptr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* allocate_array(int size) { int* arr = (int*)malloc(size * sizeof(int)); return arr; }", "target_code": "std::vector<int> allocate_vector(int size) { std::vector<int> vec(size); return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add_one_to_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    add_one_to_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid add_one_to_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] += 1;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    add_one_to_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint get_area(Rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    printf(\"Area: %d\\n\", get_area(rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint get_area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area: \" << get_area(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint* c_function2(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << ' ';\n    }\n}\n\nstd::vector<int> cpp_function2(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct c_struct {\n    int data;\n};\n\nvoid c_function3(struct c_struct* s) {\n    printf(\"%d\\n\", s->data);\n}\n\nstruct c_struct* c_function4(int value) {\n    struct c_struct* s = (struct c_struct*)malloc(sizeof(struct c_struct));\n    s->data = value;\n    return s;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int data;\n};\n\nvoid cpp_function3(const cpp_struct& s) {\n    std::cout << s.data << '\\n';\n}\n\ncpp_struct* cpp_function4(int value) {\n    cpp_struct* s = new cpp_struct;\n    s->data = value;\n    return s;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_function5(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function6(int** matrix, int rows, int cols) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint** c_function7(int rows, int cols) {\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    for(int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] = i * j;\n        }\n    }\n    return matrix;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function6(const std::vector<std::vector<int>>& matrix) {\n    for(const std::vector<int>& row : matrix) {\n        for(int num : row) {\n            std::cout << num << ' ';\n        }\n        std::cout << '\\n';\n    }\n}\n\nstd::vector<std::vector<int>> cpp_function7(int rows, int cols) {\n    std::vector<std::vector<int>> matrix;\n    for(int i = 0; i < rows; i++) {\n        std::vector<int> row;\n        for(int j = 0; j < cols; j++) {\n            row.push_back(i * j);\n        }\n        matrix.push_back(row);\n    }\n    return matrix;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct c_node {\n    int data;\n    struct c_node* next;\n};\n\nvoid c_function8(struct c_node* head) {\n    struct c_node* current = head;\n    while(current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n}\n\nstruct c_node* c_function9() {\n    struct c_node* node1 = (struct c_node*)malloc(sizeof(struct c_node));\n    struct c_node* node2 = (struct c_node*)malloc(sizeof(struct c_node));\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = NULL;\n    return node1;\n}", "target_code": "#include <iostream>\n\nstruct cpp_node {\n    int data;\n    cpp_node* next;\n};\n\nvoid cpp_function8(const cpp_node* head) {\n    const cpp_node* current = head;\n    while(current != nullptr) {\n        std::cout << current->data << ' ';\n        current = current->next;\n    }\n}\n\ncpp_node* cpp_function9() {\n    cpp_node* node1 = new cpp_node;\n    cpp_node* node2 = new cpp_node;\n    node1->data = 1;\n    node1->next = node2;\n    node2->data = 2;\n    node2->next = nullptr;\n    return node1;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num = 0;\n    int* ptr = &num;\n    c_function1(ptr);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int num = 0;\n    cpp_function1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point point;\n    c_function3(&point);\n    printf(\"%d %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point& point) {\n    point.x = 5;\n    point.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_function3(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function4(int size) {\n    return malloc(size);\n}\n\nvoid c_function5(void* ptr) {\n    free(ptr);\n}\n\nint main() {\n    int* arr = (int*)c_function4(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    c_function5(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nvoid cpp_function5(int* ptr) {\n    delete[] ptr;\n}\n\nint main() {\n    int* arr = cpp_function4(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    cpp_function5(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function6(Point* points, int num_points) {\n    for(int i = 0; i < num_points; i++) {\n        points[i].x *= 2;\n        points[i].y *= 2;\n    }\n}\n\nint main() {\n    Point* points = (Point*)malloc(3 * sizeof(Point));\n    points[0].x = 1; points[0].y = 2;\n    points[1].x = 3; points[1].y = 4;\n    points[2].x = 5; points[2].y = 6;\n    c_function6(points, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d %d\\n\", points[i].x, points[i].y);\n    }\n    free(points);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function6(std::vector<Point>& points) {\n    for(Point& p : points) {\n        p.x *= 2;\n        p.y *= 2;\n    }\n}\n\nint main() {\n    std::vector<Point> points = {{1, 2}, {3, 4}, {5, 6}};\n    cpp_function6(points);\n    for(Point p : points) {\n        std::cout << p.x << \" \" << p.y << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"Después del swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"Después del swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverseVector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Point {\n    int x;\n    int y;\n};\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Punto: x=%d, y=%d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n};\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Punto: x=\" << p.x << \", y=\" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\nvoid freeArray(int *arr) {\n    free(arr);\n}\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n        printf(\"%d \", arr[i]);\n    }\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\nint main() {\n    std::vector<int> vec = createVector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid increment(int *num) {\n    (*num)++;\n}\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x después de incrementar: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid increment(int &num) {\n    num++;\n}\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x después de incrementar: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*) malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int* arr = create_array(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr;\n    for (int i = 0; i < size; i++) {\n        arr.push_back(i + 1);\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr = create_array(size);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const struct Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle r = {3, 4};\n    printf(\"Area = %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    std::cout << \"Area = \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int value = 0;\n    int* ptr = &value;\n    c_function1(ptr);\n    printf(\"C Value: %d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int value = 0;\n    cpp_function1(value);\n    std::cout << \"C++ Value: \" << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"C Array[%d]: %d\\n\", i, arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << \"C++ Vector[\" << i << \"]: \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point* point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point point;\n    c_function3(&point);\n    printf(\"C Point: x=%d, y=%d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point& point) {\n    point.x = 5;\n    point.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_function3(point);\n    std::cout << \"C++ Point: x=\" << point.x << \", y=\" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function4(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int* ptr = (int*)c_function4(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n        printf(\"C Malloc[%d]: %d\\n\", i, ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_function4(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n        std::cout << \"C++ New[\" << i << \"]: \" << ptr[i] << std::endl;\n    }\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5() {\n    typedef struct {\n        int x;\n        int y;\n    } Point;\n    Point point;\n    point.x = 1;\n    point.y = 2;\n    Point* ptr = &point;\n    printf(\"C Struct: x=%d, y=%d\\n\", ptr->x, ptr->y);\n}\n\nint main() {\n    c_function5();\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5() {\n    struct Point {\n        int x;\n        int y;\n    };\n    Point point;\n    point.x = 1;\n    point.y = 2;\n    Point* ptr = &point;\n    std::cout << \"C++ Struct: x=\" << ptr->x << \", y=\" << ptr->y << std::endl;\n}\n\nint main() {\n    cpp_function5();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(const std::vector<int>& vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid c_function2(struct Person person) {\n    printf(\"Name: %s, Age: %d\\n\", person.name, person.age);\n}\n\nint main() {\n    struct Person p = {\"John\", 30};\n    c_function2(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_function2(const Person& person) {\n    std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl;\n}\n\nint main() {\n    Person p = {\"John\", 30};\n    cpp_function2(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int* arr, int size) {\n    int* new_arr = (int*) malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function3(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function3(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for(int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    for(int num : new_vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function3(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid c_function4(struct Rectangle* rect) {\n    int area = rect->width * rect->height;\n    printf(\"Area of rectangle: %d\\n\", area);\n}\n\nint main() {\n    struct Rectangle r = {5, 10};\n    c_function4(&r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid cpp_function4(const Rectangle& rect) {\n    int area = rect.width * rect.height;\n    std::cout << \"Area of rectangle: \" << area << std::endl;\n}\n\nint main() {\n    Rectangle r = {5, 10};\n    cpp_function4(r);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum of array elements: %d\\n\", sum);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function5(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum of vector elements: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function5(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_reverse_vector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_print_person(Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = 1;\n    strcpy(p->name, \"Alice\");\n    c_print_person(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_print_person(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person *p = new Person;\n    p->id = 1;\n    p->name = \"Alice\";\n    cpp_print_person(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* c_create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = c_create_array(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_create_vector(int size) {\n    std::vector<int> vec(size);\n    for (int i = 0; i < size; i++) {\n        vec[i] = i;\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = cpp_create_vector(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_multiply_matrix(int mat[2][2], int num) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            mat[i][j] *= num;\n        }\n    }\n}\n\nint main() {\n    int mat[2][2] = {{1, 2}, {3, 4}};\n    c_multiply_matrix(mat, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", mat[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <array>\n\nvoid cpp_multiply_matrix(std::array<std::array<int, 2>, 2> &mat, int num) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            mat[i][j] *= num;\n        }\n    }\n}\n\nint main() {\n    std::array<std::array<int, 2>, 2> mat = {{1, 2}, {3, 4}};\n    cpp_multiply_matrix(mat, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            std::cout << mat[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid translate(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(&p, 3, 4);\n    printf(\"Translated point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid translate(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {1, 2};\n    translate(p, 3, 4);\n    std::cout << \"Translated point: (\" << p.x << \", \" << p.y << \")\\n\";\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int size;\n    int *array;\n} Array;\n\nvoid init(Array *a, int size) {\n    a->size = size;\n    a->array = (int *)malloc(size * sizeof(int));\n}\n\nvoid freeArray(Array *a) {\n    free(a->array);\n}\n\nint main() {\n    Array arr;\n    init(&arr, 5);\n    freeArray(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> array;\n\n    void init(int size) {\n        array.resize(size);\n    }\n};\n\nint main() {\n    Array arr;\n    arr.init(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle rect = {3, 4};\n    printf(\"Area of rectangle: %d\\n\", area(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n\n    int area() {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle rect = {3, 4};\n    std::cout << \"Area of rectangle: \" << rect.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid printPerson(Person *p) {\n    printf(\"Person ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    printPerson(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n\n    void printPerson() {\n        std::cout << \"Person ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};\n\nint main() {\n    Person p = {1, \"Alice\"};\n    p.printPerson();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {1, 2};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {1, 2};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node n1 = {1, NULL};\n    struct Node n2 = {2, NULL};\n    n1.next = &n2;\n    print_list(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_list(const Node *head) {\n    const Node *current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node n1 = {1, nullptr};\n    Node n2 = {2, nullptr};\n    n1.next = &n2;\n    print_list(&n1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n}\n\nint main() {\n    int* array = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    c_function1(array, 5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(const std::vector<int>& array) {\n    for (int num : array) {\n        std::cout << num << ' ';\n    }\n}\n\nint main() {\n    std::vector<int> array(5);\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    cpp_function1(array);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    float y;\n};\n\nvoid c_function2(struct c_struct* s) {\n    printf(\"%d %f\\n\", s->x, s->y);\n}\n\nint main() {\n    struct c_struct* s = (struct c_struct*)malloc(sizeof(struct c_struct));\n    s->x = 10;\n    s->y = 3.14;\n    c_function2(s);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int x;\n    float y;\n};\n\nvoid cpp_function2(const cpp_struct& s) {\n    std::cout << s.x << ' ' << s.y << std::endl;\n}\n\nint main() {\n    cpp_struct s;\n    s.x = 10;\n    s.y = 3.14;\n    cpp_function2(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function3(int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int* array = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i + 1;\n    }\n    c_function3(array, 5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function3(const std::vector<int>& array) {\n    int sum = 0;\n    for (int num : array) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n    cpp_function3(array);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int* array = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    c_function4(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function4(std::vector<int>& array) {\n    for (int& num : array) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> array = {0, 1, 2, 3, 4};\n    cpp_function4(array);\n    for (int num : array) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        if (array[i] % 2 == 0) {\n            printf(\"%d is even\\n\", array[i]);\n        } else {\n            printf(\"%d is odd\\n\", array[i]);\n        }\n    }\n}\n\nint main() {\n    int* array = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    c_function5(array, 5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(const std::vector<int>& array) {\n    for (int num : array) {\n        if (num % 2 == 0) {\n            std::cout << num << \" is even\" << std::endl;\n        } else {\n            std::cout << num << \" is odd\" << std::endl;\n        }\n    }\n}\n\nint main() {\n    std::vector<int> array = {0, 1, 2, 3, 4};\n    cpp_function5(array);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    // No se necesita función para eliminar el vector en C++\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_int(int value) {\n    int *ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}\n\nvoid delete_int(int *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *ptr = create_int(10);\n    printf(\"Value: %d\\n\", *ptr);\n    delete_int(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* create_int(int value) {\n    int *ptr = new int;\n    *ptr = value;\n    return ptr;\n}\n\nvoid delete_int(int *ptr) {\n    delete ptr;\n}\n\nint main() {\n    int *ptr = create_int(10);\n    std::cout << \"Value: \" << *ptr << std::endl;\n    delete_int(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int src[] = {1, 2, 3, 4, 5};\n    int dest[5];\n    copy_array(src, dest, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", dest[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_array(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> src = {1, 2, 3, 4, 5};\n    std::vector<int> dest(5);\n    copy_array(src, dest);\n    for (int i = 0; i < 5; i++) {\n        std::cout << dest[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    increment_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_array(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    increment_array(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint** create_matrix(int rows, int cols) {\n    int **matrix = (int**)malloc(rows * sizeof(int*));\n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n    }\n    return matrix;\n}\n\nvoid free_matrix(int **matrix, int rows) {\n    for (int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}\n\nint main() {\n    int **matrix = create_matrix(2, 2);\n    free_matrix(matrix, 2);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> create_matrix(int rows, int cols) {\n    return std::vector<std::vector<int>>(rows, std::vector<int>(cols));\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = create_matrix(2, 2);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int *array, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    c_function(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {0, 1, 2, 3, 4};\n    cpp_function(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_function(struct Point *pt) {\n    printf(\"%d, %d\\n\", pt->x, pt->y);\n}\n\nint main() {\n    struct Point *p = (struct Point *)malloc(sizeof(struct Point));\n    p->x = 5;\n    p->y = 10;\n    c_function(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function(const Point &pt) {\n    std::cout << pt.x << \", \" << pt.y << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 5;\n    p->y = 10;\n    cpp_function(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *array = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    c_function(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {0, 1, 2, 3, 4};\n    cpp_function(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int *array = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    c_function(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {0, 1, 2, 3, 4};\n    cpp_function(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function(int **matrix, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int **mat = (int **)malloc(3 * sizeof(int *));\n    for (int i = 0; i < 3; i++) {\n        mat[i] = (int *)malloc(4 * sizeof(int));\n        for (int j = 0; j < 4; j++) {\n            mat[i][j] = i * j;\n        }\n    }\n    c_function(mat, 3, 4);\n    for (int i = 0; i < 3; i++) {\n        free(mat[i]);\n    }\n    free(mat);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function(const std::vector<std::vector<int>> &matrix) {\n    for (const auto &row : matrix) {\n        for (int num : row) {\n            std::cout << num << ' ';\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> mat = {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}};\n    cpp_function(mat);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* result = (int*) malloc(size * sizeof(int));\n    addArrays(arr1, arr2, result, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = (Point*) malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int left = 0;\n    int right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    int left = 0;\n    int right = vec.size() - 1;\n    while (left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int* src, int* dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[3];\n    copyArray(arr1, arr2, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int>& src, std::vector<int>& dest) {\n    for (int num : src) {\n        dest.push_back(num);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2;\n    copyVector(vec1, vec2);\n    for (int num : vec2) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int size = 3;\n    incrementArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    incrementVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int result = 0; for (int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for (int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void delete_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include<iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\nvoid reverseArray(int *arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include<iostream>\n#include<vector>\nvoid reverseVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size()/2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size()-1-i];\n        vec[vec.size()-1-i] = temp;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\nstruct Point {\n    int x;\n    int y;\n};\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include<iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n};\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i+1;\n    }\n    return arr;\n}\nint main() {\n    int *arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include<iostream>\n#include<vector>\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    vec.reserve(size);\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i+1);\n    }\n    return vec;\n}\nint main() {\n    std::vector<int> vec = createVector(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h>\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include<iostream>\n#include<vector>\nvoid printVector(std::vector<int> vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint c_function2(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint cpp_function2(std::vector<int>& vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid c_function3(struct Person* p) {\n    p->age += 1;\n}\n\nvoid c_function4(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid cpp_function3(Person& p) {\n    p.age += 1;\n}\n\nvoid cpp_function4(const Person& p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_function5(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid c_function6(int* ptr) {\n    free(ptr);\n}\n", "target_code": "#include <iostream>\n\nint* cpp_function5(int size) {\n    return new int[size];\n}\n\nvoid cpp_function6(int* ptr) {\n    delete[] ptr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function7(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nvoid c_function8(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid cpp_function7(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nvoid cpp_function8(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << ' ';\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_function9(struct Point* p) {\n    p->x += 1;\n    p->y += 1;\n}\n\nvoid c_function10(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function9(Point& p) {\n    p.x += 1;\n    p.y += 1;\n}\n\nvoid cpp_function10(const Point& p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_print_array(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint* c_allocate_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_print_vector(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n}\n\nstd::vector<int>* cpp_allocate_vector(int size) {\n    return new std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_print_point(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_reverse_array(int* arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid cpp_reverse_vector(std::vector<int>& vec) {\n    std::reverse(vec.begin(), vec.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_sort_array(int* arr, int size) {\n    for(int i = 0; i < size - 1; i++) {\n        for(int j = i + 1; j < size; j++) {\n            if(arr[i] > arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid cpp_sort_vector(std::vector<int>& vec) {\n    std::sort(vec.begin(), vec.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint c_area_rectangle(Rectangle* rect) {\n    return rect->width * rect->height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint cpp_area_rectangle(const Rectangle& rect) {\n    return rect.width * rect.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapC(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapC(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapCpp(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapCpp(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArrayC(int size) {\n    return (int*)malloc(sizeof(int) * size);\n}\n\nvoid freeArrayC(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arrC = createArrayC(5);\n    freeArrayC(arrC);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVectorCpp(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vecCpp = createVectorCpp(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct PersonC {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct PersonC person;\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct PersonCpp {\n    std::string name;\n    int age;\n};\n\nint main() {\n    PersonCpp person;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneC(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    addOneC(&number);\n    printf(\"Number: %d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid addOneCpp(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    addOneCpp(number);\n    std::cout << \"Number: \" << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct PointC {\n    int x;\n    int y;\n};\n\nvoid movePointC(struct PointC *point, int dx, int dy) {\n    point->x += dx;\n    point->y += dy;\n}\n\nint main() {\n    struct PointC p = {0, 0};\n    movePointC(&p, 3, 2);\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct PointCpp {\n    int x;\n    int y;\n};\n\nvoid movePointCpp(PointCpp &point, int dx, int dy) {\n    point.x += dx;\n    point.y += dy;\n}\n\nint main() {\n    PointCpp p = {0, 0};\n    movePointCpp(p, 3, 2);\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sumarArrays(int *arr1, int *arr2, int n) {\n    for(int i = 0; i < n; i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    sumarArrays(arr1, arr2, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumarVectores(std::vector<int> &vec1, std::vector<int> &vec2) {\n    for(int i = 0; i < vec1.size(); i++) {\n        vec1[i] += vec2[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    sumarVectores(vec1, vec2);\n    for(int i = 0; i < vec1.size(); i++) {\n        std::cout << vec1[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Punto {\n    float x;\n    float y;\n};\n\nvoid imprimirPunto(struct Punto *p) {\n    printf(\"(%f, %f)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Punto *p = (struct Punto *)malloc(sizeof(struct Punto));\n    p->x = 1.5;\n    p->y = 2.5;\n    imprimirPunto(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Punto {\n    float x;\n    float y;\n};\n\nvoid imprimirPunto(const Punto &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Punto *p = new Punto;\n    p->x = 1.5;\n    p->y = 2.5;\n    imprimirPunto(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid invertirArray(int *arr, int n) {\n    for(int i = 0; i < n/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[n-1-i];\n        arr[n-1-i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    invertirArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid invertirVector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size()/2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size()-1-i];\n        vec[vec.size()-1-i] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    invertirVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *crearArray(int n) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = crearArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> crearVector(int n) {\n    std::vector<int> vec;\n    for(int i = 0; i < n; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = crearVector(5);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangulo {\n    float base;\n    float altura;\n};\n\nvoid calcularArea(struct Rectangulo *r) {\n    float area = r->base * r->altura;\n    printf(\"El área del rectángulo es: %f\\n\", area);\n}\n\nint main() {\n    struct Rectangulo *r = (struct Rectangulo *)malloc(sizeof(struct Rectangulo));\n    r->base = 5.0;\n    r->altura = 3.0;\n    calcularArea(r);\n    free(r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangulo {\n    float base;\n    float altura;\n};\n\nvoid calcularArea(const Rectangulo &r) {\n    float area = r.base * r.altura;\n    std::cout << \"El área del rectángulo es: \" << area << std::endl;\n}\n\nint main() {\n    Rectangulo *r = new Rectangulo;\n    r->base = 5.0;\n    r->altura = 3.0;\n    calcularArea(*r);\n    delete r;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int i, temp;\n    for (i = 0; i < size/2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size-1-i];\n        arr[size-1-i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid update_point(struct Point* p) {\n    p->x = 5;\n    p->y = 10;\n}\n\nint main() {\n    struct Point pt;\n    update_point(&pt);\n    printf(\"x = %d, y = %d\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid update_point(Point& p) {\n    p.x = 5;\n    p.y = 10;\n}\n\nint main() {\n    Point pt;\n    update_point(pt);\n    std::cout << \"x = \" << pt.x << \", y = \" << pt.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_dynamic_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid fill_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    int* arr = create_dynamic_array(5);\n    fill_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_dynamic_array(int size) {\n    return std::vector<int>(size);\n}\n\nvoid fill_array(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] = i;\n    }\n}\n\nint main() {\n    std::vector<int> arr = create_dynamic_array(5);\n    fill_array(arr);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* create_point(int x, int y) {\n    struct Point* p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid free_point(struct Point* p) {\n    free(p);\n}\n\nint main() {\n    struct Point* pt = create_point(5, 10);\n    printf(\"x = %d, y = %d\\n\", pt->x, pt->y);\n    free_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    return new Point {x, y};\n}\n\nint main() {\n    Point* pt = create_point(5, 10);\n    std::cout << \"x = \" << pt->x << \", y = \" << pt->y << std::endl;\n    delete pt;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for(int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int age;\n} Person;\n\nvoid print_person(const Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int n = 5;\n    int *array = (int *)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        array[i] = i;\n    }\n    addOneToArray(array, n);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addOneToVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] += 1;\n    }\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> vec(n);\n    for (int i = 0; i < n; i++) {\n        vec[i] = i;\n    }\n    addOneToVector(vec);\n    for (int i = 0; i < n; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest.push_back(src[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2;\n    copyVector(vec1, vec2);\n    for (int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Sum: %d\\n\", sum(x, y));\n    return 0;\n}", "target_code": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Sum: \" << sum(x, y) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteIntArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createIntArray(5);\n    deleteIntArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createIntArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid printPersonInfo(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person person = {\"Alice\", 30};\n    printPersonInfo(&person);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPersonInfo(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person person = {\"Alice\", 30};\n    printPersonInfo(person);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    addOneToArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addOneToVector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num += 1;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    addOneToVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    struct Point pt;\n    setPoint(&pt, 3, 5);\n    printf(\"Point coordinates: (%d, %d)\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point pt;\n    setPoint(pt, 3, 5);\n    std::cout << \"Point coordinates: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square(int *n) {\n    *n = (*n) * (*n);\n}\n\nint main() {\n    int num = 5;\n    square(&num);\n    printf(\"Square of num: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &n) {\n    n = n * n;\n}\n\nint main() {\n    int num = 5;\n    square(num);\n    std::cout << \"Square of num: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copy_array(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copy_array(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2(5);\n    copy_array(arr1, arr2);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* myArray = create_array(5);\n    myArray[0] = 1;\n    myArray[1] = 2;\n    free_array(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> myArray = create_array(5);\n    myArray[0] = 1;\n    myArray[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point* p) {\n    printf(\"Point coordinates: x=%d, y=%d\\n\", p->x, p->y);\n}\n\nint main() {\n    Point myPoint = {3, 7};\n    print_point(&myPoint);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point coordinates: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point myPoint = {3, 7};\n    print_point(myPoint);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle* r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle myRect = {4, 5};\n    int result = area(&myRect);\n    printf(\"Area of rectangle: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle& r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle myRect = {4, 5};\n    int result = area(myRect);\n    std::cout << \"Area of rectangle: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiply_matrix(int matrix[2][2], int scalar) {\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 2; j++) {\n            matrix[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int myMatrix[2][2] = {{1, 2}, {3, 4}};\n    multiply_matrix(myMatrix, 2);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <array>\n\nvoid multiply_matrix(std::array<std::array<int, 2>, 2>& matrix, int scalar) {\n    for(auto& row : matrix) {\n        for(int& element : row) {\n            element *= scalar;\n        }\n    }\n}\n\nint main() {\n    std::array<std::array<int, 2>, 2> myMatrix = {{{1, 2}, {3, 4}}};\n    multiply_matrix(myMatrix, 2);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(std::vector<int>& arr) {\n    int result = 0;\n    for(int num : arr) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void printMessage(char* message) {\n    printf(\"%s\\n\", message);\n}", "target_code": "void printMessage(const std::string& message) {\n    std::cout << message << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <iostream>\nint sumArray(std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Person {\n    char name[50];\n    int age;\n};\nvoid printPersonInfo(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}", "target_code": "#include <iostream>\nstruct Person {\n    std::string name;\n    int age;\n};\nvoid printPersonInfo(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint *createIntArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <iostream>\nint *createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid freeIntArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\nvoid freeIntArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment_array(int* arr, int size) { for (int i = 0; i < size; i++) { arr[i]++; } }", "target_code": "void increment_vector(std::vector<int>& vec) { for (int& num : vec) { num++; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "class Point { public: int x; int y; }; void print_point(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* r) { return r->width * r->height; }", "target_code": "class Rectangle { public: int width; int height; int calculate_area() { return width * height; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_ints(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_ints(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapIntegers(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid freeArray(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* createVector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid freeVector(std::vector<int>* vec) {\n    delete vec;\n}\n\nint main() {\n    std::vector<int>* vec = createVector(5);\n    freeVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid squareArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {2, 3, 4};\n    squareArray(arr, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {2, 3, 4};\n    squareVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nvoid freeNode(struct Node* node) {\n    free(node);\n}\n\nint main() {\n    struct Node* n = createNode(5);\n    freeNode(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nvoid freeNode(Node* node) {\n    delete node;\n}\n\nint main() {\n    Node* n = createNode(5);\n    freeNode(n);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(&x, &y, &res);\n    printf(\"Sum: %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(x, y, res);\n    std::cout << \"Sum: \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiply(float *a, float *b, float *result) {\n    *result = *a * *b;\n}\n\nint main() {\n    float x = 2.5, y = 3.0, res;\n    multiply(&x, &y, &res);\n    printf(\"Multiplication: %.2f\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid multiply(float &a, float &b, float &result) {\n    result = a * b;\n}\n\nint main() {\n    float x = 2.5, y = 3.0, res;\n    multiply(x, y, res);\n    std::cout << \"Multiplication: \" << std::fixed << std::setprecision(2) << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[size - i - 1] = arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int> &arr) {\n    std::vector<int> temp(arr.rbegin(), arr.rend());\n    arr = temp;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverseArray(arr);\n    for (int i : arr) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct Point p = {3, 5};\n    movePoint(&p, 2, -1);\n    printf(\"New coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {3, 5};\n    movePoint(p, 2, -1);\n    std::cout << \"New coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyArray(const int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr;\n    for (int i = 0; i < size; i++) {\n        arr.push_back(i + 1);\n    }\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    for (int i : arr) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiply(int *arr, int size, int factor) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= factor;\n    }\n}\n\nint main() {\n    int *numbers = (int*)malloc(3 * sizeof(int));\n    numbers[0] = 1;\n    numbers[1] = 2;\n    numbers[2] = 3;\n    multiply(numbers, 3, 2);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    free(numbers);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply(std::vector<int> &arr, int factor) {\n    for (int &num : arr) {\n        num *= factor;\n    }\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3};\n    multiply(numbers, 2);\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *numbers = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    free(numbers);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    std::vector<int> numbers = create_array(5);\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_square(int num) {\n    printf(\"Square: %d\\n\", num * num);\n}\n\nint main() {\n    int x = 5;\n    print_square(x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid print_square(const int &num) {\n    std::cout << \"Square: \" << num * num << std::endl;\n}\n\nint main() {\n    int x = 5;\n    print_square(x);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid increment_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    increment_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    increment_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n} Person;\n\nvoid print_person_info(Person *p) {\n    printf(\"ID: %d\\nName: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    print_person_info(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid print_person_info(const Person &p) {\n    std::cout << \"ID: \" << p.id << std::endl << \"Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    print_person_info(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nint *create_dynamic_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_dynamic_array(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_dynamic_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = create_dynamic_vector(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculate_area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    printf(\"Area of rectangle: %d\\n\", calculate_area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    std::cout << \"Area of rectangle: \" << calculate_area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int value;\n    int *ptr = &value;\n    c_function1(ptr);\n    printf(\"Value: %d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int value;\n    cpp_function1(value);\n    std::cout << \"Value: \" << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int value;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->value = 20;\n}\n\nint main() {\n    struct c_struct *s = (struct c_struct *)malloc(sizeof(struct c_struct));\n    c_function3(s);\n    printf(\"Value: %d\\n\", s->value);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct cpp_struct {\n    int value;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.value = 20;\n}\n\nint main() {\n    cpp_struct s;\n    cpp_function3(s);\n    std::cout << \"Value: \" << s.value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function4(int **ptr) {\n    *ptr = (int *)malloc(sizeof(int));\n    **ptr = 30;\n}\n\nint main() {\n    int *value;\n    c_function4(&value);\n    printf(\"Value: %d\\n\", *value);\n    free(value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function4(int *&ptr) {\n    ptr = new int;\n    *ptr = 30;\n}\n\nint main() {\n    int *value;\n    cpp_function4(value);\n    std::cout << \"Value: \" << *value << std::endl;\n    delete value;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    c_function5(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(std::vector<int> &vec, int size) {\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n}\n\nint main() {\n    std::vector<int> vec;\n    cpp_function5(vec, 5);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int>& vec) { for (int num : vec) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_coordinates(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_coordinates(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person_info(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person_info(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* clone_array(int* arr, int size) { int* clone = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { clone[i] = arr[i]; } return clone; } void free_array(int* arr) { free(arr); }", "target_code": "std::vector<int> clone_array(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int tmp = *a; *a = *b; *b = tmp; }", "target_code": "void swap(int &a, int &b) { int tmp = a; a = b; b = tmp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicate_array(int* arr, int size) { int* dup = (int*)malloc(size * sizeof(int)); memcpy(dup, arr, size * sizeof(int)); return dup; }", "target_code": "std::vector<int> duplicate_array(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *) malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point *p = (struct Point *) malloc(sizeof(struct Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *) malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *createArray(int size) {\n    return new int[size];\n}\n\nvoid freeArray(int *arr) {\n    delete[] arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    freeArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyMatrix(int **mat, int rows, int cols, int scalar) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            mat[i][j] *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2, cols = 2;\n    int **matrix = (int **) malloc(rows * sizeof(int *));\n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int *) malloc(cols * sizeof(int));\n    }\n    matrix[0][0] = 1; matrix[0][1] = 2;\n    matrix[1][0] = 3; matrix[1][1] = 4;\n    multiplyMatrix(matrix, rows, cols, 2);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(std::vector<std::vector<int>> &mat, int scalar) {\n    for (std::vector<int> &row : mat) {\n        for (int &element : row) {\n            element *= scalar;\n        }\n    }\n}\n\nint main() {\n    int rows = 2, cols = 2;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    matrix[0][0] = 1; matrix[0][1] = 2;\n    matrix[1][0] = 3; matrix[1][1] = 4;\n    multiplyMatrix(matrix, 2);\n    for (std::vector<int> &row : matrix) {\n        for (int &element : row) {\n            std::cout << element << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i=0; i<size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    for(int i = 0; i < size/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size-i-1];\n        arr[size-i-1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size()/2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size()-i-1];\n        arr[arr.size()-i-1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* squareArray(int *arr, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        result[i] = arr[i] * arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> squareArray(std::vector<int> &arr) {\n    std::vector<int> result;\n    for(int i = 0; i < arr.size(); i++) {\n        result.push_back(arr[i] * arr[i]);\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(struct Rectangle *r) {\n    return r->width * r->height;\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(const Rectangle &r) {\n    return r.width * r.height;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(&x, &y, &res);\n    printf(\"Sum: %d\\n\", res);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int &a, int &b, int &result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5, y = 3, res;\n    add(x, y, res);\n    std::cout << \"Sum: \" << res << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i * 2;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s\\nAge: %d\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"Alice\");\n    p.age = 30;\n    print_person(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \"\\nAge: \" << p.age << std::endl;\n}\n\nint main() {\n    Person p;\n    p.name = \"Alice\";\n    p.age = 30;\n    print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point pt = {1, 2};\n    move_point(&pt, 3, 4);\n    printf(\"New coordinates: (%d, %d)\\n\", pt.x, pt.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point pt = {1, 2};\n    move_point(pt, 3, 4);\n    std::cout << \"New coordinates: (\" << pt.x << \", \" << pt.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Antes del intercambio: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"Después del intercambio: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Antes del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"Después del intercambio: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid destroy_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n        printf(\"%d \", arr[i]);\n    }\n    destroy_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 5;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 5;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char src[] = \"Hello, World!\";\n    char dest[20];\n    copy_string(dest, src);\n    printf(\"Copia: %s\\n\", dest);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copy_string(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char *src = \"Hello, World!\";\n    char dest[20];\n    copy_string(dest, src);\n    std::cout << \"Copia: \" << dest << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int left = 0;\n    int right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p;\n    p.x = 3;\n    p.y = 7;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 7;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char src[] = \"Hello, world!\";\n    char dest[20];\n    copy_string(dest, src);\n    printf(\"Copied string: %s\\n\", dest);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char* src = \"Hello, world!\";\n    char dest[20];\n    copy_string(dest, src);\n    std::cout << \"Copied string: \" << dest << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int* arr, int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum(arr, 5);\n    printf(\"Sum of array elements: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& arr) {\n    int total = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum(arr);\n    std::cout << \"Sum of array elements: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_array(int* arr, int size) { for(int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void double_vector(std::vector<int>& vec) { for(int& num : vec) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_sum(const Point* p) { return p->x + p->y; }", "target_code": "int get_sum(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson *create_person(int id, const char *name) {\n    Person *p = (Person *)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nvoid print_person(Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person *p = create_person(1, \"Alice\");\n    print_person(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    int id;\n    std::string name;\n\n    Person(int id, const std::string &name) : id(id), name(name) {}\n\n    void print_person() {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};\n\nint main() {\n    Person *p = new Person(1, \"Alice\");\n    p->print_person();\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiply_array(int *arr, int size, int factor) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= factor;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    multiply_array(arr, size, 2);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_vector(std::vector<int> &vec, int factor) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= factor;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    multiply_vector(vec, 2);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *allocate_memory(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int *ptr = (int *)allocate_memory(sizeof(int));\n    *ptr = 10;\n    printf(\"Value at pointer: %d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid *allocate_memory(int size) {\n    return new char[size];\n}\n\nint main() {\n    int *ptr = (int *)allocate_memory(sizeof(int));\n    *ptr = 10;\n    std::cout << \"Value at pointer: \" << *ptr << std::endl;\n    delete[] (char *)ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int x, int y) : x(x), y(y) {}\n\n    void print_point() {\n        std::cout << \"Point coordinates: (\" << x << \", \" << y << \")\" << std::endl;\n    }\n};\n\nint main() {\n    Point p(3, 5);\n    p.print_point();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int *arr, int size, int *result) {\n    *result = 0;\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int array[5] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(array, 5, &result);\n    printf(\"Sum of array: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(std::vector<int> &vec, int &result) {\n    result = 0;\n    for(int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum of vector: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    print_point(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 10;\n    p->y = 20;\n    print_point(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *array = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle *r = (Rectangle *)malloc(sizeof(Rectangle));\n    r->width = 5;\n    r->height = 10;\n    printf(\"Area of rectangle: %d\\n\", area(r));\n    free(r);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle *r = new Rectangle;\n    r->width = 5;\n    r->height = 10;\n    std::cout << \"Area of rectangle: \" << area(*r) << std::endl;\n    delete r;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapIntegers(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swapIntegers(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *array = createIntArray(5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> array = createIntArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    printf(\"Enter name: \");\n    scanf(\"%s\", p.name);\n    printf(\"Enter age: \");\n    scanf(\"%d\", &p.age);\n    printf(\"Person: %s, %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    std::cout << \"Enter name: \";\n    std::cin >> p.name;\n    std::cout << \"Enter age: \";\n    std::cin >> p.age;\n    std::cout << \"Person: \" << p.name << \", \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string& str) {\n    int len = str.length();\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    printArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "class Point { public: int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *x) { (*x)++; }", "target_code": "void increment(int &x) { x++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    increment(&number);\n    printf(\"%d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    increment(number);\n    std::cout << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *myArray = create_array(5);\n    free(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> myArray = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct Point point = {1, 1};\n    move_point(&point, 2, 3);\n    printf(\"%d, %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point point = {1, 1};\n    move_point(point, 2, 3);\n    std::cout << point.x << \", \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Shape {\n    int width;\n    int height;\n};\n\nvoid print_shape(struct Shape *s) {\n    printf(\"Width: %d, Height: %d\\n\", s->width, s->height);\n}\n\nint main() {\n    struct Shape square = {5, 5};\n    print_shape(&square);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Shape {\n    int width;\n    int height;\n};\n\nvoid print_shape(const Shape &s) {\n    std::cout << \"Width: \" << s.width << \", Height: \" << s.height << std::endl;\n}\n\nint main() {\n    Shape square = {5, 5};\n    print_shape(square);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node* create_node(int data) {\n    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nint main() {\n    struct Node *node = create_node(10);\n    free(node);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nNode* create_node(int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}\n\nint main() {\n    Node *node = create_node(10);\n    delete node;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int* arr1, int* arr2, int size) {\n    for(int i = 0; i < size; i++) {\n        arr1[i] += arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    addArrays(arr1, arr2, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(std::vector<int>& vec1, std::vector<int>& vec2) {\n    for(int i = 0; i < vec1.size(); i++) {\n        vec1[i] += vec2[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    addVectors(vec1, vec2);\n    for(int num : vec1) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point* p = (struct Point*)malloc(sizeof(struct Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* double_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int* new_arr = double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    free(new_arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> double_vector(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for (int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    return new_vec;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::vector<int> new_vec = double_vector(vec);\n    for (int num : new_vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int* ptr) {\n    (*ptr)++;\n}\n\nint main() {\n    int num = 5;\n    increment(&num);\n    printf(\"num: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int& ref) {\n    ref++;\n}\n\nint main() {\n    int num = 5;\n    increment(num);\n    std::cout << \"num: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int *dest, int *src, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr2, arr1, 5);\n\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(std::vector<int> &dest, std::vector<int> &src) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2;\n    copyVector(vec2, vec1);\n\n    for(int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nstruct Person* createPerson(const char *name, int age) {\n    struct Person *p = (struct Person*)malloc(sizeof(struct Person));\n    strcpy(p->name, name);\n    p->age = age;\n    return p;\n}\n\nint main() {\n    struct Person *p = createPerson(\"Alice\", 30);\n    printf(\"%s is %d years old\", p->name, p->age);\n    free(p);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nPerson* createPerson(const std::string &name, int age) {\n    Person *p = new Person;\n    p->name = name;\n    p->age = age;\n    return p;\n}\n\nint main() {\n    Person *p = createPerson(\"Alice\", 30);\n    std::cout << p->name << \" is \" << p->age << \" years old\";\n    delete p;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x=%d, y=%d\", x, y);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x=\" << x << \", y=\" << y;\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* customMalloc(size_t size) {\n    return malloc(size);\n}\n\nvoid customFree(void *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *ptr = (int*)customMalloc(sizeof(int));\n    *ptr = 10;\n    printf(\"Value: %d\", *ptr);\n    customFree(ptr);\n\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid* customMalloc(size_t size) {\n    return new char[size];\n}\n\nvoid customFree(void *ptr) {\n    delete[] static_cast<char*>(ptr);\n}\n\nint main() {\n    int *ptr = (int*)customMalloc(sizeof(int));\n    *ptr = 10;\n    std::cout << \"Value: \" << *ptr;\n    customFree(ptr);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for(int i : vec) {\n        std::cout << i << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid dynamic_array() {\n    int n = 5;\n    int *arr = (int *)malloc(n * sizeof(int));\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = i;\n    }\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n}\n\nint main() {\n    dynamic_array();\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid dynamic_array() {\n    int n = 5;\n    std::vector<int> arr(n);\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = i;\n    }\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << \" \";\n    }\n}\n\nint main() {\n    dynamic_array();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 4;\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p;\n    p.x = 3;\n    p.y = 4;\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square(int *num) {\n    *num = *num * *num;\n}\n\nint main() {\n    int x = 5;\n    square(&x);\n    printf(\"Square: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &num) {\n    num = num * num;\n}\n\nint main() {\n    int x = 5;\n    square(x);\n    std::cout << \"Square: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(const Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    int result = area(&rect);\n    printf(\"Area: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {5, 10};\n    int result = area(rect);\n    std::cout << \"Area: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printVector(const std::vector<int>& vec) { for(const auto& elem : vec) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; void movePoint(Point* p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void movePoint(Point& p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPerson(struct Person* person) { printf(\"Name: %s, Age: %d\\n\", person->name, person->age); }", "target_code": "void printPerson(const Person& person) { std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementar_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    incrementar_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementar_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementar_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid desplazar_punto(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    struct Point p = {10, 20};\n    desplazar_punto(&p, 5, -5);\n    printf(\"%d %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid desplazar_punto(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {10, 20};\n    desplazar_punto(p, 5, -5);\n    std::cout << p.x << \" \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid duplicar_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    duplicar_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicar_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n    }\n    duplicar_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumar_matrices(int **m1, int **m2, int **resultado, int filas, int columnas) {\n    for (int i = 0; i < filas; i++) {\n        for (int j = 0; j < columnas; j++) {\n            resultado[i][j] = m1[i][j] + m2[i][j];\n        }\n    }\n}\n\nint main() {\n    int **m1 = (int **)malloc(2 * sizeof(int *));\n    int **m2 = (int **)malloc(2 * sizeof(int *));\n    int **resultado = (int **)malloc(2 * sizeof(int *));\n    for (int i = 0; i < 2; i++) {\n        m1[i] = (int *)malloc(2 * sizeof(int));\n        m2[i] = (int *)malloc(2 * sizeof(int));\n        resultado[i] = (int *)malloc(2 * sizeof(int));\n    }\n    m1[0][0] = 1; m1[0][1] = 2; m1[1][0] = 3; m1[1][1] = 4;\n    m2[0][0] = 5; m2[0][1] = 6; m2[1][0] = 7; m2[1][1] = 8;\n    sumar_matrices(m1, m2, resultado, 2, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", resultado[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < 2; i++) {\n        free(m1[i]);\n        free(m2[i]);\n        free(resultado[i]);\n    }\n    free(m1); free(m2); free(resultado);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumar_matrices(std::vector<std::vector<int>> &m1, std::vector<std::vector<int>> &m2, std::vector<std::vector<int>> &resultado) {\n    for (size_t i = 0; i < m1.size(); i++) {\n        for (size_t j = 0; j < m1[0].size(); j++) {\n            resultado[i][j] = m1[i][j] + m2[i][j];\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> m1 = {{1, 2}, {3, 4}};\n    std::vector<std::vector<int>> m2 = {{5, 6}, {7, 8}};\n    std::vector<std::vector<int>> resultado(2, std::vector<int>(2));\n    sumar_matrices(m1, m2, resultado);\n    for (size_t i = 0; i < resultado.size(); i++) {\n        for (size_t j = 0; j < resultado[0].size(); j++) {\n            std::cout << resultado[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Persona {\n    char nombre[50];\n    int edad;\n};\n\nvoid mostrar_persona(struct Persona *p) {\n    printf(\"Nombre: %s, Edad: %d\\n\", p->nombre, p->edad);\n}\n\nint main() {\n    struct Persona p = {\"Juan\", 30};\n    mostrar_persona(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Persona {\n    std::string nombre;\n    int edad;\n};\n\nvoid mostrar_persona(const Persona &p) {\n    std::cout << \"Nombre: \" << p.nombre << \", Edad: \" << p.edad << std::endl;\n}\n\nint main() {\n    Persona p = {\"Juan\", 30};\n    mostrar_persona(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    square_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_array(std::vector<int> &arr) {\n    for(int &num : arr) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    square_array(arr);\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculate_area(Rectangle rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    int area = calculate_area(rect);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    int area = calculate_area(rect);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid square(int *num) {\n    *num = *num * *num;\n}\n\nint main() {\n    int num = 5;\n    square(&num);\n    printf(\"Squared number: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &num) {\n    num = num * num;\n}\n\nint main() {\n    int num = 5;\n    square(num);\n    std::cout << \"Squared number: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {3, 5};\n    movePoint(&p, 2, 3);\n    printf(\"New coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {3, 5};\n    movePoint(p, 2, 3);\n    std::cout << \"New coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *arr1, int *arr2, int size) {\n    for (int i = 0; i < size; i++) {\n        arr2[i] = arr1[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    int size = sizeof(arr1) / sizeof(arr1[0]);\n    copyArray(arr1, arr2, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid copyVector(const std::vector<int> &vec1, std::vector<int> &vec2) {\n    vec2 = vec1;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2;\n    copyVector(vec1, vec2);\n    for (int i = 0; i < vec2.size(); i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid initializeArray(Array *arr, int size) {\n    arr->data = (int*)malloc(size * sizeof(int));\n    arr->size = size;\n}\n\nvoid freeArray(Array *arr) {\n    free(arr->data);\n}\n\nint main() {\n    Array arr;\n    initializeArray(&arr, 5);\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i + 1;\n    }\n    for (int i = 0; i < arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n    freeArray(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n};\n\nvoid initializeArray(Array &arr, int size) {\n    arr.data.resize(size);\n    arr.size = size;\n}\n\nint main() {\n    Array arr;\n    initializeArray(arr, 5);\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i + 1;\n    }\n    for (int i = 0; i < arr.size; i++) {\n        std::cout << arr.data[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(int* arr, int size) { int max = arr[0]; for(int i = 1; i < size; i++) { if(arr[i] > max) { max = arr[i]; } } return max; }", "target_code": "int get_max(const std::vector<int>& vec) { int max = vec[0]; for(int num : vec) { if(num > max) { max = num; } } return max; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point point = {10, 20};\n    print_point(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point = {10, 20};\n    print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int arr[], int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int> &vec) { for(auto elem : vec) std::cout << elem << \" \"; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; }; void setPoint(Point *p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void setPoint(Point &p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void freeArray(int *arr) { free(arr); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); } // No need to manually free memory in C++"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int arr[], int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sumVector(const std::vector<int> &vec) { return std::accumulate(vec.begin(), vec.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap_int(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_int(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap_int(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_dynamic_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_dynamic_array(5);\n    for (int i = 0; i < 5; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *create_dynamic_array(int size) {\n    int *arr = new int[size];\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = create_dynamic_array(5);\n    for (int i = 0; i < 5; ++i) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {3, 5};\n    move_point(&p, 2, -1);\n    printf(\"New position: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n\nint main() {\n    Point p = {3, 5};\n    move_point(p, 2, -1);\n    std::cout << \"New position: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student(const Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student(&s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student(const Student &s) {\n    std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl;\n}\n\nint main() {\n    Student s = {1, \"Alice\"};\n    print_student(s);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    p.age = 30;\n    printf(\"Age: %d\\n\", p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.age = 30;\n    std::cout << \"Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    incrementArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid freePoint(Point *p) {\n    free(p);\n}\n\nint main() {\n    Point *p = createPoint(3, 5);\n    printf(\"Coordinates: (%d, %d)\\n\", p->x, p->y);\n    freePoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point *p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *p = createPoint(3, 5);\n    std::cout << \"Coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(struct Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    struct Point p;\n    set_point(&p, 3, 5);\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 3, 5);\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *double_array(int *arr, int size) {\n    int *new_arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        new_arr[i] = 2 * arr[i];\n    }\n    return new_arr;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *new_arr = double_array(arr, 5);\n    free(new_arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> double_vector(const std::vector<int> &vec) {\n    std::vector<int> new_vec(vec.size());\n    for (int i = 0; i < vec.size(); i++) {\n        new_vec[i] = 2 * vec[i];\n    }\n    return new_vec;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::vector<int> new_vec = double_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printIntArray(const std::vector<int>& arr) { for (int num : arr) { std::cout << num << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) { free(arr); }", "target_code": "void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    int result = factorial(5);\n    printf(\"Factorial of 5 is: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    int result = factorial(5);\n    std::cout << \"Factorial of 5 is: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiply_arrays(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] * arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[3];\n    multiply_arrays(arr1, arr2, result, 3);\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_arrays(const std::vector<int>& arr1, const std::vector<int>& arr2, std::vector<int>& result) {\n    for (int i = 0; i < arr1.size(); i++) {\n        result.push_back(arr1[i] * arr2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2 = {4, 5, 6};\n    std::vector<int> result;\n    multiply_arrays(arr1, arr2, result);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *a) {\n    *a = 10;\n}\n\nvoid cpp_function1(int &a) {\n    a = 10;\n}", "target_code": "#include <iostream>\n\nvoid c_function1(int *a) {\n    *a = 10;\n}\n\nvoid cpp_function1(int &a) {\n    a = 10;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nvoid cpp_function2(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nvoid cpp_function2(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->x = 5;\n    s->y = 10;\n}\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.x = 5;\n    s.y = 10;\n}", "target_code": "#include <iostream>\n\nstruct c_struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct c_struct *s) {\n    s->x = 5;\n    s->y = 10;\n}\n\nstruct cpp_struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(cpp_struct &s) {\n    s.x = 5;\n    s.y = 10;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function4(int size) {\n    return malloc(size);\n}\n\nvoid cpp_function4(int size) {\n    return new int[size];\n}", "target_code": "#include <iostream>\n\nvoid *c_function4(int size) {\n    return malloc(size);\n}\n\nint* cpp_function4(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nvoid cpp_function5(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] = i;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid c_function5(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nvoid cpp_function5(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        arr[i] = i;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sumArray(int* arr, int size, int* result) {\n    *result = 0;\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result;\n    sumArray(arr, 5, &result);\n    printf(\"Sum is: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sumVector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for(int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sumVector(vec, result);\n    std::cout << \"Sum is: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const struct Point* p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    int* temp = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for(int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    std::vector<int> temp;\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyMatrix(int** matrix, int rows, int cols, int** result) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            result[i][j] = 0;\n            for(int k = 0; k < cols; k++) {\n                result[i][j] += matrix[i][k] * matrix[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int** matrix = (int**)malloc(2 * sizeof(int*));\n    for(int i = 0; i < 2; i++) {\n        matrix[i] = (int*)malloc(2 * sizeof(int));\n    }\n    matrix[0][0] = 1;\n    matrix[0][1] = 2;\n    matrix[1][0] = 3;\n    matrix[1][1] = 4;\n    int** result = (int**)malloc(2 * sizeof(int*));\n    for(int i = 0; i < 2; i++) {\n        result[i] = (int*)malloc(2 * sizeof(int));\n    }\n    multiplyMatrix(matrix, 2, 2, result);\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 2; j++) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(const std::vector<std::vector<int>>& matrix, std::vector<std::vector<int>>& result) {\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            result[i][j] = 0;\n            for(int k = 0; k < cols; k++) {\n                result[i][j] += matrix[i][k] * matrix[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{1, 2}, {3, 4}};\n    std::vector<std::vector<int>> result(2, std::vector<int>(2, 0));\n    multiplyMatrix(matrix, result);\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 2; j++) {\n            std::cout << result[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapC(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swapC(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swapCpp(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swapCpp(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid doubleArrayC(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    doubleArrayC(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid doubleVectorCpp(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    doubleVectorCpp(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPointC(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 4};\n    printPointC(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPointCpp(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPointCpp(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArrayC(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArrayC(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVectorCpp(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVectorCpp(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint areaC(Rectangle *r) {\n    return r->width * r->height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    printf(\"Area: %d\\n\", areaC(&rect));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint areaCpp(const Rectangle &r) {\n    return r.width * r.height;\n}\n\nint main() {\n    Rectangle rect = {4, 5};\n    std::cout << \"Area: \" << areaCpp(rect) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_func1(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_func1(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid c_func2(struct Point* p) {\n    p->x *= 2;\n    p->y *= 2;\n}\n\nint main() {\n    struct Point point = {3, 4};\n    c_func2(&point);\n    printf(\"%d %d\\n\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_func2(Point& p) {\n    p.x *= 2;\n    p.y *= 2;\n}\n\nint main() {\n    Point point = {3, 4};\n    cpp_func2(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_func3(size_t size) {\n    return malloc(size);\n}\n\nint main() {\n    int* ptr = (int*)c_func3(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_func3(size_t size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_func3(5);\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << ptr[i] << \" \";\n    }\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid c_func4(struct Rectangle* rect, int scale) {\n    rect->width *= scale;\n    rect->height *= scale;\n}\n\nint main() {\n    struct Rectangle rect = {4, 3};\n    c_func4(&rect, 2);\n    printf(\"%d %d\\n\", rect.width, rect.height);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid cpp_func4(Rectangle& rect, int scale) {\n    rect.width *= scale;\n    rect.height *= scale;\n}\n\nint main() {\n    Rectangle rect = {4, 3};\n    cpp_func4(rect, 2);\n    std::cout << rect.width << \" \" << rect.height << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func5(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 3;\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(5 * sizeof(int));\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    c_func5(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func5(std::vector<int>& vec) {\n    for (int& num : vec) {\n        num += 3;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for (int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    cpp_func5(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_c(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap_c(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_cpp(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap_cpp(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array_c(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array_c(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array_c(5);\n    free_array_c(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector_cpp(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector_cpp(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point_c(struct Point* p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point_c(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point_cpp(const Point& p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point_cpp(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiply_matrices_c(int m1[2][2], int m2[2][2], int result[2][2]) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                result[i][j] += m1[i][k] * m2[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int m1[2][2] = {{1, 2}, {3, 4}};\n    int m2[2][2] = {{5, 6}, {7, 8}};\n    int result[2][2];\n    multiply_matrices_c(m1, m2, result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiply_matrices_cpp(const std::vector<std::vector<int>>& m1, const std::vector<std::vector<int>>& m2, std::vector<std::vector<int>>& result) {\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < 2; k++) {\n                result[i][j] += m1[i][k] * m2[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> m1 = {{1, 2}, {3, 4}};\n    std::vector<std::vector<int>> m2 = {{5, 6}, {7, 8}};\n    std::vector<std::vector<int>> result(2, std::vector<int>(2));\n    multiply_matrices_cpp(m1, m2, result);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array_c(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sum_array_c(arr, 5);\n    printf(\"Sum of array elements: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector_cpp(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int total = sum_vector_cpp(vec);\n    std::cout << \"Sum of vector elements: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid printVector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point *pt, int dx, int dy) {\n    pt->x += dx;\n    pt->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &pt, int dx, int dy) {\n    pt.x += dx;\n    pt.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    return std::vector<int>(size);\n}\n\nvoid printVector(std::vector<int> &vec) {\n    vec.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid multiplyArrays(int *arr1, int *arr2, int *result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] * arr2[i];\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> multiplyVectors(const std::vector<int> &vec1, const std::vector<int> &vec2) {\n    std::vector<int> result;\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] * vec2[i]);\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h> \n#include<stdlib.h> \n\nvoid add(int *a, int *b, int *result) { \n    *result = *a + *b; \n} \n\nint main() { \n    int x = 5, y = 3, res; \n    add(&x, &y, &res); \n    printf(\"Sum is %d\\n\", res); \n    return 0; \n}", "target_code": "#include<iostream> \n\nvoid add(int &a, int &b, int &result) { \n    result = a + b; \n} \n\nint main() { \n    int x = 5, y = 3, res; \n    add(x, y, res); \n    std::cout << \"Sum is \" << res << std::endl; \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h> \n#include<stdlib.h> \n\nint* create_array(int size) { \n    return (int*)malloc(size * sizeof(int)); \n} \n\nvoid free_array(int *arr) { \n    free(arr); \n} \n\nint main() { \n    int *arr = create_array(5); \n    free_array(arr); \n    return 0; \n}", "target_code": "#include<iostream> \n#include<vector> \n\nstd::vector<int>* create_array(int size) { \n    return new std::vector<int>(size); \n} \n\nvoid free_array(std::vector<int> *arr) { \n    delete arr; \n} \n\nint main() { \n    std::vector<int> *arr = create_array(5); \n    free_array(arr); \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h> \n#include<stdlib.h> \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid set_point(struct Point *p, int x, int y) { \n    p->x = x; \n    p->y = y; \n} \n\nint main() { \n    struct Point p; \n    set_point(&p, 3, 4); \n    printf(\"Point: (%d, %d)\\n\", p.x, p.y); \n    return 0; \n}", "target_code": "#include<iostream> \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid set_point(Point &p, int x, int y) { \n    p.x = x; \n    p.y = y; \n} \n\nint main() { \n    Point p; \n    set_point(p, 3, 4); \n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl; \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h> \n#include<stdlib.h> \n\nvoid copy_array(int *src, int *dest, int size) { \n    for (int i = 0; i < size; i++) { \n        dest[i] = src[i]; \n    } \n} \n\nint main() { \n    int arr1[] = {1, 2, 3, 4, 5}; \n    int arr2[5]; \n    copy_array(arr1, arr2, 5); \n    for (int i = 0; i < 5; i++) { \n        printf(\"%d \", arr2[i]); \n    } \n    return 0; \n}", "target_code": "#include<iostream> \n#include<vector> \n\nvoid copy_array(std::vector<int> &src, std::vector<int> &dest) { \n    dest = src; \n} \n\nint main() { \n    std::vector<int> arr1 = {1, 2, 3, 4, 5}; \n    std::vector<int> arr2; \n    copy_array(arr1, arr2); \n    for (int i = 0; i < arr2.size(); i++) { \n        std::cout << arr2[i] << \" \"; \n    } \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include<stdio.h> \n#include<stdlib.h> \n\nstruct Student { \n    char name[50]; \n    int age; \n}; \n\nvoid print_student(struct Student *s) { \n    printf(\"Name: %s, Age: %d\\n\", s->name, s->age); \n} \n\nint main() { \n    struct Student s; \n    strcpy(s.name, \"Alice\"); \n    s.age = 20; \n    print_student(&s); \n    return 0; \n}", "target_code": "#include<iostream> \n#include<string> \n\nstruct Student { \n    std::string name; \n    int age; \n}; \n\nvoid print_student(Student &s) { \n    std::cout << \"Name: \" << s.name << \", Age: \" << s.age << std::endl; \n} \n\nint main() { \n    Student s; \n    s.name = \"Alice\"; \n    s.age = 20; \n    print_student(s); \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void print_array(std::vector<int> &arr) { for (int num : arr) std::cout << num << \" \"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for (int elem : vec) {\n        result += elem;\n    }\n}\n\nvoid print_vector(const std::vector<int>& vec) {\n    for (int elem : vec) {\n        std::cout << elem << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid move_point(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - 1 - i];\n        str[len - 1 - i] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    for (int i = 0; i < str.length() / 2; i++) {\n        char temp = str[i];\n        str[i] = str[str.length() - 1 - i];\n        str[str.length() - 1 - i] = temp;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    return new int[size];\n}\n\nvoid delete_array(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area_rectangle(Rectangle* rect) {\n    return rect->width * rect->height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area_rectangle(const Rectangle& rect) {\n    return rect.width * rect.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void translate_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void translate_point(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; } void destroy_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); } // No se necesita función destroy_vector en C++"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_hello() { printf(\"Hello, World!\"); }", "target_code": "void print_hello() { std::cout << \"Hello, World!\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for (int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        result += vec[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid double_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    double_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid double_vector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    double_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid merge_arrays(int* arr1, int size1, int* arr2, int size2, int* result) {\n    for (int i = 0; i < size1; i++) {\n        result[i] = arr1[i];\n    }\n    for (int i = 0; i < size2; i++) {\n        result[size1 + i] = arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int result[6];\n    merge_arrays(arr1, 3, arr2, 3, result);\n    for (int i = 0; i < 6; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid merge_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    result.insert(result.end(), vec1.begin(), vec1.end());\n    result.insert(result.end(), vec2.begin(), vec2.end());\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    merge_vectors(vec1, vec2, result);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *array) {\n    free(array);\n}\n\nint main() {\n    int *arr = createArray(5);\n    freeArray(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 5;\n    p.y = 10;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    copyArray(arr1, arr2, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2(5);\n    copyVector(vec1, vec2);\n    for (int i = 0; i < 5; i++) {\n        std::cout << vec2[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid initArray(Array *arr, int size) {\n    arr->data = (int*)malloc(size * sizeof(int));\n    arr->size = size;\n}\n\nvoid freeArray(Array *arr) {\n    free(arr->data);\n}\n\nint main() {\n    Array arr;\n    initArray(&arr, 5);\n    freeArray(&arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n    Array(int size) : data(size), size(size) {}\n};\n\nint main() {\n    Array arr(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "int sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nint get_distance(Point* p1, Point* p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}", "target_code": "class Point {\npublic:\n    int x;\n    int y;\n\n    int get_distance(const Point& other) {\n        return sqrt(pow(other.x - x, 2) + pow(other.y - y, 2));\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_dynamic_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* create_dynamic_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_dynamic_array(int* array) {\n    free(array);\n}", "target_code": "void free_dynamic_array(int* array) {\n    delete[] array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_square_area(int side_length) {\n    return side_length * side_length;\n}", "target_code": "int get_square_area(int side_length) {\n    return side_length * side_length;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid incrementArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i]++;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    incrementArray(array, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i]++;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    incrementVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Employee;\n\nint main() {\n    Employee emp;\n    emp.id = 1;\n    strcpy(emp.name, \"John\");\n    printf(\"Employee ID: %d, Name: %s\\n\", emp.id, emp.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Employee {\n    int id;\n    std::string name;\n};\n\nint main() {\n    Employee emp;\n    emp.id = 1;\n    emp.name = \"John\";\n    std::cout << \"Employee ID: \" << emp.id << \", Name: \" << emp.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int var = 0;\n    c_function1(&var);\n    printf(\"%d\\n\", var);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& ref) {\n    ref = 10;\n}\n\nint main() {\n    int var = 0;\n    cpp_function1(var);\n    std::cout << var << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    c_function2(array, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for(int& num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct C_Struct {\n    int x;\n    int y;\n};\n\nvoid c_function3(struct C_Struct* s) {\n    s->x = 10;\n    s->y = 20;\n}\n\nint main() {\n    struct C_Struct my_struct;\n    c_function3(&my_struct);\n    printf(\"%d %d\\n\", my_struct.x, my_struct.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Cpp_Struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Cpp_Struct& s) {\n    s.x = 10;\n    s.y = 20;\n}\n\nint main() {\n    Cpp_Struct my_struct;\n    cpp_function3(my_struct);\n    std::cout << my_struct.x << \" \" << my_struct.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function4(int size) {\n    return malloc(size * sizeof(int));\n}\n\nint main() {\n    int* ptr = (int*)c_function4(5);\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    printf(\"\\n\");\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_function4(5);\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << ptr[i] << \" \";\n    }\n    std::cout << std::endl;\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct C_Struct {\n    int x;\n    int y;\n};\n\nvoid c_function5(struct C_Struct* s) {\n    s->x = 10;\n    s->y = 20;\n}\n\nint main() {\n    struct C_Struct* ptr = (struct C_Struct*)malloc(sizeof(struct C_Struct));\n    c_function5(ptr);\n    printf(\"%d %d\\n\", ptr->x, ptr->y);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Cpp_Struct {\n    int x;\n    int y;\n};\n\nvoid cpp_function5(Cpp_Struct* s) {\n    s->x = 10;\n    s->y = 20;\n}\n\nint main() {\n    Cpp_Struct* ptr = new Cpp_Struct;\n    cpp_function5(ptr);\n    std::cout << ptr->x << \" \" << ptr->y << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for (const auto &elem : vec) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nint main() {\n    Point* p = new Point(3, 4);\n    std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; ++i) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for (const auto &elem : vec) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint area(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {3, 4};\n    printf(\"Area of rectangle: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Rectangle {\npublic:\n    int width;\n    int height;\n\n    int area() const {\n        return width * height;\n    }\n};\n\nint main() {\n    Rectangle r{3, 4};\n    std::cout << \"Area of rectangle: \" << r.area() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int *arr, int size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int* doubledArr = doubleArray(arr, 5);\n    for (int i = 0; i < 5; ++i) {\n        printf(\"%d \", doubledArr[i]);\n    }\n    free(doubledArr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleVector(const std::vector<int> &vec) {\n    std::vector<int> result;\n    for (const auto &elem : vec) {\n        result.push_back(elem * 2);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::vector<int> doubledVec = doubleVector(vec);\n    for (const auto &elem : doubledVec) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: x=%d, y=%d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point: x=\" << p.x << \", y=\" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area_rectangle(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle r = {4, 5};\n    printf(\"Area of rectangle: %d\\n\", area_rectangle(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area_rectangle(const Rectangle& r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    std::cout << \"Area of rectangle: \" << area_rectangle(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_array(size);\n    if (arr != NULL) {\n        for (int i = 0; i < size; i++) {\n            arr[i] = i;\n        }\n        delete_array(arr);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> arr = create_array(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point point;\n    point.x = 3;\n    point.y = 7;\n    print_point(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point;\n    point.x = 3;\n    point.y = 7;\n    print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* add_arrays(int *arr1, int *arr2, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n    return result;\n}\n\nint main() {\n    int size = 3;\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int *result = add_arrays(arr1, arr2, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> add_arrays(const std::vector<int> &arr1, const std::vector<int> &arr2) {\n    std::vector<int> result(arr1.size());\n    for (size_t i = 0; i < arr1.size(); i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3};\n    std::vector<int> arr2 = {4, 5, 6};\n    std::vector<int> result = add_arrays(arr1, arr2);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_hello() {\n    printf(\"Hello, World!\\n\");\n}\n\nint main() {\n    print_hello();\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid print_hello() {\n    std::cout << \"Hello, World!\" << std::endl;\n}\n\nint main() {\n    print_hello();\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } }", "target_code": "void print_vector(const std::vector<int> &vec) { for (int i = 0; i < vec.size(); i++) { std::cout << vec[i] << ' '; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void delete_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x = \" << x << \", y = \" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *array) {\n    free(array);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x, y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x, y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square(int *num) {\n    *num = (*num) * (*num);\n}\n\nint main() {\n    int x = 5;\n    square(&x);\n    printf(\"Square of x: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &num) {\n    num = num * num;\n}\n\nint main() {\n    int x = 5;\n    square(x);\n    std::cout << \"Square of x: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"Incremented x: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"Incremented x: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5;\n    int y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* myArray = create_array(5);\n    free(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> myVector = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point myPoint = {3, 7};\n    print_point(myPoint);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point myPoint = {3, 7};\n    print_point(myPoint);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result = sum_vector(vec);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nvoid print_person(struct Person* p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}\n\nint main() {\n    struct Person myPerson = {\"Alice\", 25};\n    print_person(&myPerson);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n\nint main() {\n    Person myPerson = {\"Alice\", 25};\n    print_person(myPerson);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int*) malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    // No se necesita función para liberar memoria en C++\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point pt = {3, 5};\n    print_point(pt);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point pt = {3, 5};\n    print_point(pt);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(struct Rectangle rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    struct Rectangle r = {4, 6};\n    printf(\"Area: %d\\n\", area(r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint area(const Rectangle &rect) {\n    return rect.length * rect.width;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* custom_malloc(size_t size) {\n    return malloc(size);\n}\n\nvoid custom_free(void *ptr) {\n    free(ptr);\n}\n\nint main() {\n    int *ptr = (int*) custom_malloc(sizeof(int));\n    *ptr = 10;\n    custom_free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid* custom_malloc(size_t size) {\n    return new char[size];\n}\n\nvoid custom_free(void *ptr) {\n    delete[] static_cast<char*>(ptr);\n}\n\nint main() {\n    int *ptr = static_cast<int*>(custom_malloc(sizeof(int));\n    *ptr = 10;\n    custom_free(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int* ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int num = 0;\n    c_function1(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int& num) {\n    num = 10;\n}\n\nint main() {\n    int num = 0;\n    cpp_function1(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid c_function3(struct c_struct* s) {\n    s->id = 1;\n    sprintf(s->name, \"John\");\n}\n\nint main() {\n    struct c_struct c_s;\n    c_function3(&c_s);\n    printf(\"%d %s\\n\", c_s.id, c_s.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function3(cpp_struct& s) {\n    s.id = 1;\n    s.name = \"John\";\n}\n\nint main() {\n    cpp_struct cpp_s;\n    cpp_function3(cpp_s);\n    std::cout << cpp_s.id << \" \" << cpp_s.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* c_function4(int size) {\n    return malloc(size);\n}\n\nint main() {\n    int* ptr = (int*)c_function4(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function4(int size) {\n    return new int[size];\n}\n\nint main() {\n    int* ptr = cpp_function4(5);\n    for(int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n        std::cout << ptr[i] << \" \";\n    }\n    delete[] ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n}\n\nint main() {\n    int* ptr = (int*)malloc(5 * sizeof(int));\n    c_function5(ptr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = i * 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    cpp_function5(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int value = 0;\n    int *ptr = &value;\n    c_function1(ptr);\n    printf(\"%d\\n\", value);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &ref) {\n    ref = 10;\n}\n\nint main() {\n    int value = 0;\n    cpp_function1(value);\n    std::cout << value << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int array[], int size) {\n    for (int i = 0; i < size; i++) {\n        array[i] *= 2;\n    }\n}\n\nint main() {\n    int size = 5;\n    int *array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        array[i] = i + 1;\n    }\n    c_function2(array, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point *point) {\n    point->x = 5;\n    point->y = 10;\n}\n\nint main() {\n    Point *point = (Point*)malloc(sizeof(Point));\n    c_function3(point);\n    printf(\"%d %d\\n\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point &point) {\n    point.x = 5;\n    point.y = 10;\n}\n\nint main() {\n    Point point;\n    cpp_function3(point);\n    std::cout << point.x << \" \" << point.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid c_function4(Array *arr) {\n    for (int i = 0; i < arr->size; i++) {\n        arr->data[i] *= 2;\n    }\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.data = (int*)malloc(arr.size * sizeof(int));\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i + 1;\n    }\n    c_function4(&arr);\n    for (int i = 0; i < arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n    int size;\n};\n\nvoid cpp_function4(Array &arr) {\n    for (int &num : arr.data) {\n        num *= 2;\n    }\n}\n\nint main() {\n    Array arr;\n    arr.size = 5;\n    arr.data.resize(arr.size);\n    for (int i = 0; i < arr.size; i++) {\n        arr.data[i] = i + 1;\n    }\n    cpp_function4(arr);\n    for (int num : arr.data) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *num) {\n    *num = 20;\n}\n\nint main() {\n    int *num = (int*)malloc(sizeof(int));\n    c_function5(num);\n    printf(\"%d\\n\", *num);\n    free(num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(int &num) {\n    num = 20;\n}\n\nint main() {\n    int num;\n    cpp_function5(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        std::cout << \"arr[\" << i << \"] = \" << arr[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"Alice\");\n    p.age = 25;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"Alice\";\n    p.age = 25;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid square(int *num) {\n    *num = (*num) * (*num);\n}\n\nint main() {\n    int x = 5;\n    square(&x);\n    printf(\"Square of x: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid square(int &num) {\n    num = num * num;\n}\n\nint main() {\n    int x = 5;\n    square(x);\n    std::cout << \"Square of x: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        std::swap(arr[i], arr[arr.size() - i - 1]);\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverse_array(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << \"arr[\" << i << \"] = \" << arr[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result = sum_array(arr, 5);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int result = sum_array(arr);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insert_node(struct Node **head, int data) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n\nint main() {\n    struct Node *head = NULL;\n    insert_node(&head, 10);\n    insert_node(&head, 20);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insert_node(Node *&head, int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n\nint main() {\n    Node *head = nullptr;\n    insert_node(head, 10);\n    insert_node(head, 20);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_pointers(int **ptr1, int **ptr2) {\n    int *temp = *ptr1;\n    *ptr1 = *ptr2;\n    *ptr2 = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int *ptr1 = &a, *ptr2 = &b;\n    printf(\"Before swap: %d %d\\n\", *ptr1, *ptr2);\n    swap_pointers(&ptr1, &ptr2);\n    printf(\"After swap: %d %d\\n\", *ptr1, *ptr2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_pointers(int *&ptr1, int *&ptr2) {\n    int *temp = ptr1;\n    ptr1 = ptr2;\n    ptr2 = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int *ptr1 = &a, *ptr2 = &b;\n    std::cout << \"Before swap: \" << *ptr1 << \" \" << *ptr2 << std::endl;\n    swap_pointers(ptr1, ptr2);\n    std::cout << \"After swap: \" << *ptr1 << \" \" << *ptr2 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_dynamic_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nvoid print_dynamic_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int *arr = create_dynamic_array(5);\n    print_dynamic_array(arr, 5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_dynamic_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nvoid print_dynamic_vector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = create_dynamic_vector(5);\n    print_dynamic_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_values(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: %d %d\\n\", x, y);\n    swap_values(&x, &y);\n    printf(\"After swap: %d %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap_values(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: \" << x << \" \" << y << std::endl;\n    swap_values(x, y);\n    std::cout << \"After swap: \" << x << \" \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    snprintf(p.name, sizeof(p.name), \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    printArray(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sumArray(arr, 5);\n    printf(\"Sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int total = sumArray(arr);\n    std::cout << \"Sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* multiplyByTwo(int* arr, int n) {\n    int* result = (int*) malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4, 5};\n    int* result = multiplyByTwo(nums, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* multiplyByTwo(std::vector<int>& vec) {\n    std::vector<int>* result = new std::vector<int>;\n    for (int num : vec) {\n        result->push_back(num * 2);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::vector<int>* result = multiplyByTwo(nums);\n    for (int num : *result) {\n        std::cout << num << \" \";\n    }\n    delete result;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*) malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point* p = createPoint(3, 4);\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* reverseArray(int* arr, int n) {\n    int* result = (int*) malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        result[i] = arr[n - i - 1];\n    }\n    return result;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4, 5};\n    int* result = reverseArray(nums, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* reverseVector(const std::vector<int>& vec) {\n    std::vector<int>* result = new std::vector<int>;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        result->push_back(vec[i]);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::vector<int>* result = reverseVector(nums);\n    for (int num : *result) {\n        std::cout << num << \" \";\n    }\n    delete result;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* data;\n    int size;\n} Array;\n\nArray* createArray(int size) {\n    Array* arr = (Array*) malloc(sizeof(Array));\n    arr->data = (int*) malloc(size * sizeof(int));\n    arr->size = size;\n    return arr;\n}\n\nvoid printArray(const Array* arr) {\n    for (int i = 0; i < arr->size; i++) {\n        printf(\"%d \", arr->data[i]);\n    }\n}\n\nint main() {\n    Array* arr = createArray(5);\n    for (int i = 0; i < arr->size; i++) {\n        arr->data[i] = i + 1;\n    }\n    printArray(arr);\n    free(arr->data);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    std::vector<int> data;\n};\n\nArray* createArray(int size) {\n    Array* arr = new Array;\n    arr->data.resize(size);\n    return arr;\n}\n\nvoid printArray(const Array* arr) {\n    for (int num : arr->data) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    Array* arr = createArray(5);\n    for (int i = 0; i < arr->data.size(); i++) {\n        arr->data[i] = i + 1;\n    }\n    printArray(arr);\n    delete arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nRectangle* createRectangle(int width, int height) {\n    Rectangle* rect = (Rectangle*) malloc(sizeof(Rectangle));\n    rect->width = width;\n    rect->height = height;\n    return rect;\n}\n\nvoid printRectangle(const Rectangle* rect) {\n    printf(\"Width: %d, Height: %d\\n\", rect->width, rect->height);\n}\n\nint main() {\n    Rectangle* rect = createRectangle(5, 10);\n    printRectangle(rect);\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nRectangle* createRectangle(int width, int height) {\n    Rectangle* rect = new Rectangle;\n    rect->width = width;\n    rect->height = height;\n    return rect;\n}\n\nvoid printRectangle(const Rectangle* rect) {\n    std::cout << \"Width: \" << rect->width << \", Height: \" << rect->height << std::endl;\n}\n\nint main() {\n    Rectangle* rect = createRectangle(5, 10);\n    printRectangle(rect);\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"%d, %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << p.x << \", \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid addNode(struct Node **head, int data) {\n    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = *head;\n    *head = newNode;\n}\n\nint main() {\n    struct Node *head = NULL;\n    addNode(&head, 5);\n    addNode(&head, 10);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid addNode(Node *&head, int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = head;\n    head = newNode;\n}\n\nint main() {\n    Node *head = nullptr;\n    addNode(head, 5);\n    addNode(head, 10);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(struct Rectangle r) {\n    return r.length * r.width;\n}\n\nint main() {\n    struct Rectangle r = {4, 6};\n    int area = calculateArea(r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculateArea(const Rectangle &r) {\n    return r.length * r.width;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    int area = calculateArea(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int number = 5;\n    increment(&number);\n    printf(\"Result in C: %d\\n\", number);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nint main() {\n    int number = 5;\n    increment(number);\n    std::cout << \"Result in C++: \" << number << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - 1 - i];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    printf(\"Result in C: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int> &arr) {\n    std::vector<int> temp(arr.rbegin(), arr.rend());\n    arr = temp;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverseArray(arr);\n    std::cout << \"Result in C++: \";\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point *p) {\n    printf(\"Point coordinates in C: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point coordinates in C++: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid mergeArrays(int *arr1, int size1, int *arr2, int size2, int *result) {\n    int i = 0, j = 0, k = 0;\n    while (i < size1 && j < size2) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n    while (i < size1) {\n        result[k++] = arr1[i++];\n    }\n    while (j < size2) {\n        result[k++] = arr2[j++];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 3, 5};\n    int arr2[] = {2, 4, 6, 8};\n    int result[7];\n    mergeArrays(arr1, 3, arr2, 4, result);\n    printf(\"Result in C: \");\n    for (int i = 0; i < 7; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid mergeArrays(std::vector<int> &arr1, std::vector<int> &arr2, std::vector<int> &result) {\n    size_t i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 3, 5};\n    std::vector<int> arr2 = {2, 4, 6, 8};\n    std::vector<int> result;\n    mergeArrays(arr1, arr2, result);\n    std::cout << \"Result in C++: \";\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"Result in C: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"Result in C++: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    printf(\"Result in C: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    std::vector<int> arr = createArray(5);\n    std::cout << \"Result in C++: \";\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int n) {\n    int *arr = (int*)malloc(n * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *myArray = createArray(5);\n    myArray[0] = 1;\n    myArray[1] = 2;\n    free(myArray);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int n) {\n    std::vector<int> vec(n);\n    return vec;\n}\n\nint main() {\n    std::vector<int> myVector = createVector(5);\n    myVector[0] = 1;\n    myVector[1] = 2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insertNode(struct Node **head, int data) {\n    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = *head;\n    *head = newNode;\n}\n\nint main() {\n    struct Node *head = NULL;\n    insertNode(&head, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insertNode(Node *&head, int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = head;\n    head = newNode;\n}\n\nint main() {\n    Node *head = nullptr;\n    insertNode(head, 5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    int arr1[3] = {1, 2, 3};\n    int arr2[3];\n    copyArray(arr1, arr2, 3);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    for (int i = 0; i < src.size(); i++) {\n        dest[i] = src[i];\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2(3);\n    copyVector(vec1, vec2);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid add(int *a, int *b, int *result) {\n    *result = *a + *b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int sum;\n    add(&x, &y, &sum);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid add(int& a, int& b, int& result) {\n    result = a + b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int sum;\n    add(x, y, sum);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid delete_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    delete_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"Point (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid traverse(struct Node *head) {\n    struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node *n1 = (struct Node*)malloc(sizeof(struct Node));\n    struct Node *n2 = (struct Node*)malloc(sizeof(struct Node));\n    n1->data = 5;\n    n1->next = n2;\n    n2->data = 10;\n    n2->next = NULL;\n    traverse(n1);\n    free(n1);\n    free(n2);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid traverse(Node* head) {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* n1 = new Node;\n    Node* n2 = new Node;\n    n1->data = 5;\n    n1->next = n2;\n    n2->data = 10;\n    n2->next = nullptr;\n    traverse(n1);\n    delete n1;\n    delete n2;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid area(const struct Rectangle *rect, int *result) {\n    *result = rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle r = {4, 6};\n    int a;\n    area(&r, &a);\n    printf(\"Area: %d\\n\", a);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid area(const Rectangle& rect, int& result) {\n    result = rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    int a;\n    area(r, a);\n    std::cout << \"Area: \" << a << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid printArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p;\n    p.x = 10;\n    p.y = 20;\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    Point p;\n    p.x = 10;\n    p.y = 20;\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    int* arr = new int[size];\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * 2;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for (int i = 0; i < 5; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*) malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) std::cout << arr[i] << ' '; }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    scanf(\"%s %d\", p.name, &p.age);\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    std::cin >> p.name >> p.age;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nint main() {\n    struct Node* n = (struct Node*)malloc(sizeof(struct Node));\n    n->data = 10;\n    n->next = NULL;\n    free(n);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nint main() {\n    Node* n = new Node;\n    n->data = 10;\n    n->next = nullptr;\n    delete n;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int *arr1, int *arr2, int *result, int size) {\n    for(int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {5, 4, 3, 2, 1};\n    int size = 5;\n    int *result = (int *)malloc(size * sizeof(int));\n    addArrays(arr1, arr2, result, size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(std::vector<int> &vec1, std::vector<int> &vec2, std::vector<int> &result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3, 4, 5};\n    std::vector<int> vec2 = {5, 4, 3, 2, 1};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for(int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *point) {\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    struct Point *p = (struct Point *)malloc(sizeof(struct Point));\n    p->x = 10;\n    p->y = 20;\n    printPoint(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &point) {\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 10;\n    p->y = 20;\n    printPoint(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for(int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"%s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createArray(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = createArray(size);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for(int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = createVector(size);\n    for(int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int result = sum(x, y);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    int result = sum(x, y);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int result = 0; for(int i=0; i<size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& vec) { int result = 0; for(int num : vec) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int start = 0; int end = size - 1; while(start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }", "target_code": "void reverseArray(std::vector<int>& vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float x; float y; } Point; float distance(Point* p1, Point* p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { float x; float y; }; float distance(const Point& p1, const Point& p2) { return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "int* createArray(int size) { return new int[size]; } void deleteArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPersonInfo(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void printPersonInfo(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_pointer(int *ptr) {\n    *ptr = 100;\n}\n\nint main() {\n    int num = 0;\n    int *ptr = &num;\n    c_function_pointer(ptr);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_reference(int &num) {\n    num = 100;\n}\n\nint main() {\n    int num = 0;\n    cpp_function_reference(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_array_function(int arr[], int size) {\n    for(int i=0; i<size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    c_array_function(arr, size);\n    for(int i=0; i<size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_vector_function(std::vector<int> &vec) {\n    for(int i=0; i<vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_vector_function(vec);\n    for(int i=0; i<vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_struct_function(Point *p) {\n    p->x = 10;\n    p->y = 20;\n}\n\nint main() {\n    Point p;\n    c_struct_function(&p);\n    printf(\"%d %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_struct_function(Point &p) {\n    p.x = 10;\n    p.y = 20;\n}\n\nint main() {\n    Point p;\n    cpp_struct_function(p);\n    std::cout << p.x << \" \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_malloc_function() {\n    int *ptr = (int *)malloc(sizeof(int));\n    *ptr = 50;\n    return ptr;\n}\n\nint main() {\n    int *ptr = (int *)c_malloc_function();\n    printf(\"%d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *cpp_new_function() {\n    int *ptr = new int;\n    *ptr = 50;\n    return ptr;\n}\n\nint main() {\n    int *ptr = cpp_new_function();\n    std::cout << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_malloc_array_function(int **arr, int size) {\n    *arr = (int *)malloc(size * sizeof(int));\n    for(int i=0; i<size; i++) {\n        (*arr)[i] = i + 1;\n    }\n}\n\nint main() {\n    int *arr;\n    int size = 5;\n    c_malloc_array_function(&arr, size);\n    for(int i=0; i<size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_vector_array_function(std::vector<int> &vec, int size) {\n    vec.resize(size);\n    for(int i=0; i<size; i++) {\n        vec[i] = i + 1;\n    }\n}\n\nint main() {\n    std::vector<int> vec;\n    int size = 5;\n    cpp_vector_array_function(vec, size);\n    for(int i=0; i<size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap_int(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap_int(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid free_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        struct Node* next = current->next;\n        free(current);\n        current = next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid free_list(Node* head) {\n    Node* current = head;\n    while (current != nullptr) {\n        Node* next = current->next;\n        delete current;\n        current = next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n", "target_code": "#include <iostream>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }\nint main() { int x = 5, y = 10; swap(&x, &y); printf(\"x = %d, y = %d\\n\", x, y); return 0; }", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) { int temp = a; a = b; b = temp; }\nint main() { int x = 5, y = 10; swap(x, y); std::cout << \"x = \" << x << \", y = \" << y << std::endl; return 0; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverse(int arr[], int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }\nint main() { int arr[] = {1, 2, 3, 4, 5}; int size = 5; reverse(arr, size); for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } return 0; }", "target_code": "#include <iostream>\n#include <vector>\nvoid reverse(std::vector<int> &arr) { for(int i = 0; i < arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }\nint main() { std::vector<int> arr = {1, 2, 3, 4, 5}; reverse(arr); for(int i = 0; i < arr.size(); i++) { std::cout << arr[i] << ' '; } return 0; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nstruct Point { int x, y; };\nPoint* createPoint(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }\nvoid destroyPoint(Point* p) { free(p); }\nint main() { Point* p = createPoint(3, 4); printf(\"Point coordinates: (%d, %d)\\n\", p->x, p->y); destroyPoint(p); return 0; }", "target_code": "#include <iostream>\nstruct Point { int x, y; };\nPoint* createPoint(int x, int y) { Point* p = new Point; p->x = x; p->y = y; return p; }\nvoid destroyPoint(Point* p) { delete p; }\nint main() { Point* p = createPoint(3, 4); std::cout << \"Point coordinates: (\" << p->x << \", \" << p->y << \")\" << std::endl; destroyPoint(p); return 0; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid copyArray(int* dest, int* src, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }\nint main() { int src[] = {1, 2, 3, 4, 5}; int dest[5]; copyArray(dest, src, 5); for(int i = 0; i < 5; i++) { printf(\"%d \", dest[i]); } return 0; }", "target_code": "#include <iostream>\nvoid copyArray(int* dest, int* src, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }\nint main() { int src[] = {1, 2, 3, 4, 5}; int dest[5]; copyArray(dest, src, 5); for(int i = 0; i < 5; i++) { std::cout << dest[i] << ' '; } return 0; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Rectangle { int length, width; };\nint calculateArea(const Rectangle* rect) { return rect->length * rect->width; }\nint main() { Rectangle r = {3, 4}; int area = calculateArea(&r); printf(\"Area of rectangle: %d\\n\", area); return 0; }", "target_code": "#include <iostream>\nstruct Rectangle { int length, width; };\nint calculateArea(const Rectangle& rect) { return rect.length * rect.width; }\nint main() { Rectangle r = {3, 4}; int area = calculateArea(r); std::cout << \"Area of rectangle: \" << area << std::endl; return 0; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *num) {\n    *num = *num * 2;\n}\n\nint main() {\n    int num = 5;\n    c_function1(&num);\n    printf(\"Result: %d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function1(int &num) {\n    num = num * 2;\n}\n\nint main() {\n    int num = 5;\n    cpp_function1(num);\n    std::cout << \"Result: \" << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function2(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = arr[i] * 3;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function2(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function2(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = vec[i] * 3;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function2(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function3(Point *p) {\n    p->x = p->x + 1;\n    p->y = p->y + 1;\n}\n\nint main() {\n    Point p = {3, 4};\n    c_function3(&p);\n    printf(\"New coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function3(Point &p) {\n    p.x = p.x + 1;\n    p.y = p.y + 1;\n}\n\nint main() {\n    Point p = {3, 4};\n    cpp_function3(p);\n    std::cout << \"New coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_function4(Person *p) {\n    p->id = 100;\n    strcpy(p->name, \"John\");\n}\n\nint main() {\n    Person p;\n    c_function4(&p);\n    printf(\"Person details: ID=%d, Name=%s\\n\", p.id, p.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function4(Person &p) {\n    p.id = 100;\n    p.name = \"John\";\n}\n\nint main() {\n    Person p;\n    cpp_function4(p);\n    std::cout << \"Person details: ID=\" << p.id << \", Name=\" << p.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int **matrix, int rows, int cols) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    int **matrix;\n    int rows = 2;\n    int cols = 3;\n    matrix = (int **)malloc(rows * sizeof(int *));\n    for(int i = 0; i < rows; i++) {\n        matrix[i] = (int *)malloc(cols * sizeof(int));\n        for(int j = 0; j < cols; j++) {\n            matrix[i][j] = i + j;\n        }\n    }\n    c_function5(matrix, rows, cols);\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function5(std::vector<std::vector<int>> &matrix) {\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            matrix[i][j] *= 2;\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{0, 1, 2}, {1, 2, 3}};\n    cpp_function5(matrix);\n    for(int i = 0; i < matrix.size(); i++) {\n        for(int j = 0; j < matrix[i].size(); j++) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 5};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = create_array(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = create_vector(size);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const struct Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    struct Rectangle r = {4, 6};\n    printf(\"Area: %d\\n\", area(&r));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 6};\n    std::cout << \"Area: \" << area(r) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArray(int* arr, int size, int value) {\n    for(int i = 0; i < size; i++) {\n        *(arr + i) += value;\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    addArray(arr, 5, 10);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVector(std::vector<int>& vec, int value) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] += value;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    addVector(vec, 10);\n    for(int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid printList(struct Node* head) {\n    while(head != NULL) {\n        printf(\"%d \", head->data);\n        head = head->next;\n    }\n}\n\nint main() {\n    struct Node* head = (struct Node*)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = NULL;\n    printList(head);\n    free(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid printList(Node* head) {\n    while(head != NULL) {\n        std::cout << head->data << \" \";\n        head = head->next;\n    }\n}\n\nint main() {\n    Node* head = new Node;\n    head->data = 1;\n    head->next = NULL;\n    printList(head);\n    delete head;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << x << \" \" << y;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int* arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec;\n    for(int i = 1; i <= size; i++) {\n        vec.push_back(i);\n    }\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"(%d, %d)\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\";\n}\n\nint main() {\n    Point p = {3, 5};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*) malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid* customMalloc(size_t size) {\n    return malloc(size);\n}\n", "target_code": "#include <iostream>\n\nvoid* customMalloc(size_t size) {\n    return new char[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - 1 - i];\n        arr[arr.size() - 1 - i] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(const auto& num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid set_point(Point* p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point& p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "int* create_array(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) {\n    free(arr);\n}", "target_code": "void free_array(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(const int* arr, int size) {\n    int max = arr[0];\n    for(int i = 1; i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "target_code": "int get_max(const std::vector<int>& vec) {\n    int max = vec[0];\n    for(const auto& num : vec) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point& p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { int* arr = (int*)malloc(size * sizeof(int)); return arr; } void delete_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); } // No es necesario función para eliminar vector en C++"}
{"source_language": "C", "target_language": "C++", "source_code": "int square(int x) { return x * x; } typedef struct { int x; int y; } Point;", "target_code": "int square(int x) { return x * x; } struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int get_max(int a, int b) { return a > b ? a : b; }", "target_code": "int get_max(int a, int b) { return a > b ? a : b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for (int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void* create_array(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(void *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementar_array(int* array, int size) { for(int i = 0; i < size; ++i) { array[i]++; } }", "target_code": "void incrementar_vector(std::vector<int>& vec) { for(int& num : vec) { num++; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void duplicar_array(int* array, int size) { for(int i = 0; i < size; ++i) { array[i] *= 2; } }", "target_code": "void duplicar_vector(std::vector<int>& vec) { for(int& num : vec) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Punto; void desplazar_punto(Punto* punto, int dx, int dy) { punto->x += dx; punto->y += dy; }", "target_code": "struct Punto { int x; int y; }; void desplazar_punto(Punto& punto, int dx, int dy) { punto.x += dx; punto.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* crear_array(int size) { return (int*)malloc(size * sizeof(int)); } void liberar_array(int* array) { free(array); }", "target_code": "std::vector<int> crear_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumar_valores(int* array, int size) { int sum = 0; for(int i = 0; i < size; ++i) { sum += array[i]; } return sum; }", "target_code": "int sumar_valores(std::vector<int>& vec) { int sum = 0; for(int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int>& vec) { for(const auto& elem : vec) std::cout << elem << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "N/A (Use RAII with std::vector in C++)"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson* create_person(int id, const char* name) {\n    Person* p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n\nvoid print_person(const Person* p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person* p = create_person(1, \"Alice\");\n    print_person(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    int id;\n    std::string name;\n};\n\nPerson* create_person(int id, const std::string& name) {\n    Person* p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n\nvoid print_person(const Person* p) {\n    std::cout << \"ID: \" << p->id << \", Name: \" << p->name << std::endl;\n}\n\nint main() {\n    Person* p = create_person(1, \"Alice\");\n    print_person(p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverse_array(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid move_point(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n\nint main() {\n    Point p = {1, 1};\n    move_point(&p, 2, 3);\n    printf(\"New coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    void move(int dx, int dy) {\n        x += dx;\n        y += dy;\n    }\n};\n\nint main() {\n    Point p = {1, 1};\n    p.move(2, 3);\n    std::cout << \"New coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_square(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i] * arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    print_square(arr, size);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_square(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num * num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_square(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_pointers(int *a, int *b) {\n    *a = *a + *b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    c_function_with_pointers(&x, &y);\n    printf(\"Sum: %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_with_references(int &a, int &b) {\n    a = a + b;\n}\n\nint main() {\n    int x = 5;\n    int y = 3;\n    cpp_function_with_references(x, y);\n    std::cout << \"Sum: \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_arrays(int a[], int size) {\n    for (int i = 0; i < size; i++) {\n        a[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function_with_arrays(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function_with_vectors(std::vector<int> &vec) {\n    for (int &x : vec) {\n        x *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function_with_vectors(vec);\n    for (int x : vec) {\n        std::cout << x << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_function_with_structs(Person *p) {\n    p->id = 1;\n    strcpy(p->name, \"Alice\");\n}\n\nint main() {\n    Person person;\n    c_function_with_structs(&person);\n    printf(\"Person: %d, %s\\n\", person.id, person.name);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_function_with_structs(Person &p) {\n    p.id = 1;\n    p.name = \"Alice\";\n}\n\nint main() {\n    Person person;\n    cpp_function_with_structs(person);\n    std::cout << \"Person: \" << person.id << \", \" << person.name << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_function_with_malloc() {\n    int *ptr = (int *)malloc(sizeof(int));\n    *ptr = 10;\n    return ptr;\n}\n\nint main() {\n    int *ptr = (int *)c_function_with_malloc();\n    printf(\"Value: %d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint *cpp_function_with_new() {\n    int *ptr = new int;\n    *ptr = 10;\n    return ptr;\n}\n\nint main() {\n    int *ptr = cpp_function_with_new();\n    std::cout << \"Value: \" << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_with_double_pointer(int **ptr) {\n    *ptr = (int *)malloc(sizeof(int));\n    **ptr = 7;\n}\n\nint main() {\n    int *ptr;\n    c_function_with_double_pointer(&ptr);\n    printf(\"Value: %d\\n\", *ptr);\n    free(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_with_double_pointer(int *&ptr) {\n    ptr = new int;\n    *ptr = 7;\n}\n\nint main() {\n    int *ptr;\n    cpp_function_with_double_pointer(ptr);\n    std::cout << \"Value: \" << *ptr << std::endl;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int* temp = (int*)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) temp[i] = arr[size - 1 - i]; for (int i = 0; i < size; i++) arr[i] = temp[i]; free(temp); }", "target_code": "void reverseArray(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void setPoint(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void setPoint(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void deleteIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(int *num) {\n    (*num)++;\n}\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid increment(int &num) {\n    num++;\n}\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid freeArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n\nvoid freeArray(std::vector<int> &arr) {\n    // No se necesita liberar memoria\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(struct Point *p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point &p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* copyArray(int *arr, int size) {\n    int *copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> copyArray(std::vector<int> &arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid printPerson(struct Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid printPerson(Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroy_point(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; } void destroy_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int* src, int* dest, int size) { for(int i = 0; i < size; i++) dest[i] = src[i]; }", "target_code": "void copy_vector(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void destroy_array(int* arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n}\n\nvoid c_func2(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i;\n    }\n}\n\nvoid cpp_func2(const std::vector<int> &vec) {\n    for (int val : vec) {\n        std::cout << val << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct {\n    int id;\n    char name[20];\n};\n\nvoid c_func3(struct c_struct *s) {\n    printf(\"id: %d, name: %s\\n\", s->id, s->name);\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_func3(const cpp_struct &s) {\n    std::cout << \"id: \" << s.id << \", name: \" << s.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid *c_func4(int size) {\n    return malloc(size * sizeof(int));\n}\n\nvoid c_func5(void *ptr) {\n    free(ptr);\n}", "target_code": "#include <iostream>\n\nint* cpp_func4(int size) {\n    return new int[size];\n}\n\nvoid cpp_func5(int* ptr) {\n    delete[] ptr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_func6(int &a) {\n    a *= 2;\n}\n\nvoid c_func7(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 5;\n    }\n}", "target_code": "#include <iostream>\n\nvoid cpp_func6(int &a) {\n    a *= 2;\n}\n\nvoid cpp_func7(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 5;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid c_func8(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * i;\n    }\n}\n\nvoid c_func9(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func8(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        vec[i] = i * i;\n    }\n}\n\nvoid cpp_func9(const std::vector<int> &vec) {\n    for (int val : vec) {\n        std::cout << val << ' ';\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_array(int* arr) {\n    free(arr);\n}\n\nint main() {\n    int* my_array = create_array(5);\n    free_array(my_array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> my_vector = create_vector(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 7};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char source[] = \"Hello\";\n    char dest[10];\n    copy_string(dest, source);\n    printf(\"Copied string: %s\\n\", dest);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char* source = \"Hello\";\n    char dest[10];\n    copy_string(dest, source);\n    std::cout << \"Copied string: \" << dest << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int total = sum_array(array, 5);\n    printf(\"Total sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_vector(const std::vector<int>& vec) {\n    return std::accumulate(vec.begin(), vec.end(), 0);\n}\n\nint main() {\n    std::vector<int> vector = {1, 2, 3, 4, 5};\n    int total = sum_vector(vector);\n    std::cout << \"Total sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(struct Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    struct Point p;\n    set_point(&p, 3, 4);\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid set_point(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    set_point(p, 3, 4);\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_string(char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - i - 1];\n        str[length - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    for (int i = 0; i < str.length() / 2; i++) {\n        char temp = str[i];\n        str[i] = str[str.length() - i - 1];\n        str[str.length() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid duplicate_array(int *arr, int size) {\n    int *new_arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    // Perform operations on new_arr...\n    free(new_arr);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    duplicate_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid duplicate_array(std::vector<int> &arr) {\n    std::vector<int> new_arr = arr;\n    // Perform operations on new_arr...\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    duplicate_array(arr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int* array = createIntArray(5);\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n\nint main() {\n    std::vector<int> array = createIntArray(5);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point* point) {\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    Point p = {2, 3};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& point) {\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {2, 3};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n    int i, temp;\n    for (i = 0; i < size / 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverseArray(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int total = sumArray(arr, 5);\n    printf(\"Total sum: %d\\n\", total);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int total = sumArray(arr);\n    std::cout << \"Total sum: \" << total << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(const std::vector<int> &vec) {\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Person {\n    char name[20];\n    int age;\n};\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"John\");\n    p.age = 30;\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person p;\n    p.name = \"John\";\n    p.age = 30;\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *arr = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    free_array(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int>* create_vector(int size) {\n    return new std::vector<int>(size);\n}\n\nvoid free_vector(std::vector<int> *vec) {\n    delete vec;\n}\n\nint main() {\n    std::vector<int> *vec = create_vector(5);\n    for(int i = 0; i < 5; i++) {\n        (*vec)[i] = i + 1;\n    }\n    free_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nint main() {\n    struct Node *head = (struct Node*)malloc(sizeof(struct Node));\n    head->data = 10;\n    head->next = NULL;\n    free(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nint main() {\n    Node *head = new Node;\n    head->data = 10;\n    head->next = nullptr;\n    delete head;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copy_string(char *dest, const char *src) {\n    while(*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str1[20], str2[20];\n    copy_string(str2, \"Hello, World!\");\n    printf(\"Copied String: %s\\n\", str2);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid copy_string(std::string &dest, const std::string &src) {\n    dest = src;\n}\n\nint main() {\n    std::string str1, str2;\n    copy_string(str2, \"Hello, World!\");\n    std::cout << \"Copied String: \" << str2 << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_arrays(int* arr1, int* arr2, int n, int* result) {\n    for(int i = 0; i < n; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int n = 3;\n    int* result = (int*) malloc(n * sizeof(int));\n    sum_arrays(arr1, arr2, n, result);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for(int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    sum_vectors(vec1, vec2, result);\n    for(int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\n\nvoid print_student(const Student* student) {\n    printf(\"ID: %d, Name: %s\\n\", student->id, student->name);\n}\n\nint main() {\n    Student* student = (Student*) malloc(sizeof(Student));\n    student->id = 1;\n    strcpy(student->name, \"Alice\");\n    print_student(student);\n    free(student);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    int id;\n    std::string name;\n};\n\nvoid print_student(const Student& student) {\n    std::cout << \"ID: \" << student.id << \", Name: \" << student.name << std::endl;\n}\n\nint main() {\n    Student student;\n    student.id = 1;\n    student.name = \"Alice\";\n    print_student(student);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* arr, int n) {\n    int* temp = (int*) malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        temp[i] = arr[n - i - 1];\n    }\n    for(int i = 0; i < n; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    reverse_array(arr, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    std::vector<int> temp = vec;\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] = temp[vec.size() - i - 1];\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int n) {\n    int* arr = (int*) malloc(n * sizeof(int));\n    for(int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int n = 5;\n    int* arr = create_array(n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int n) {\n    std::vector<int> vec;\n    for(int i = 0; i < n; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int n = 5;\n    std::vector<int> vec = create_vector(n);\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(const Point* point) {\n    printf(\"(%d, %d)\\n\", point->x, point->y);\n}\n\nint main() {\n    Point* point = (Point*) malloc(sizeof(Point));\n    point->x = 3;\n    point->y = 5;\n    print_point(point);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& point) {\n    std::cout << \"(\" << point.x << \", \" << point.y << \")\" << std::endl;\n}\n\nint main() {\n    Point point;\n    point.x = 3;\n    point.y = 5;\n    print_point(point);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    c_swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    cpp_swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_array_init(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = c_array_init(size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cpp_array_init(int size) {\n    std::vector<int> vec;\n    for (int i = 0; i < size; i++) {\n        vec.push_back(i + 1);\n    }\n    return vec;\n}\n\nint main() {\n    int size = 5;\n    std::vector<int> vec = cpp_array_init(size);\n    for (int i = 0; i < size; i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_print_point(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point p = {3, 7};\n    c_print_point(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 7};\n    cpp_print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nvoid c_print_person(const Person *p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    c_print_person(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nvoid cpp_print_person(const Person &p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}\n\nint main() {\n    Person p = {1, \"Alice\"};\n    cpp_print_person(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint c_sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Sum: %d\\n\", c_sum_array(arr, size));\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint cpp_sum_array(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << cpp_sum_array(vec) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function1(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    c_function1(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_function1(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_function1(vec);\n    for(int val : vec) {\n        std::cout << val << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid c_function2(Point *p) {\n    p->x *= 2;\n    p->y *= 2;\n}\n\nint main() {\n    Point point = {3, 4};\n    c_function2(&point);\n    printf(\"%d %d\", point.x, point.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid cpp_function2(Point &p) {\n    p.x *= 2;\n    p.y *= 2;\n}\n\nint main() {\n    Point point = {3, 4};\n    cpp_function2(point);\n    std::cout << point.x << \" \" << point.y;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* c_function3(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = c_function3(5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* cpp_function3(int size) {\n    int *arr = new int[size];\n    for(int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int *arr = cpp_function3(5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* c_function4() {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = 10;\n    p->y = 20;\n    return p;\n}\n\nint main() {\n    Point *point = c_function4();\n    printf(\"%d %d\", point->x, point->y);\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* cpp_function4() {\n    Point *p = new Point;\n    p->x = 10;\n    p->y = 20;\n    return p;\n}\n\nint main() {\n    Point *point = cpp_function4();\n    std::cout << point->x << \" \" << point->y;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function5(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *arr = (int*)malloc(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    c_function5(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function5(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *arr = new int[5];\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n    cpp_function5(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    delete[] arr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(&p, 1, 2);\n    printf(\"x: %d, y: %d\\n\", p.x, p.y);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point p;\n    setPoint(p, 1, 2);\n    std::cout << \"x: \" << p.x << \", y: \" << p.y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid initArray(Array *arr, int size) {\n    arr->data = (int*)malloc(size * sizeof(int));\n    arr->size = size;\n}\n\nint main() {\n    Array arr;\n    initArray(&arr, 5);\n    arr.data[0] = 10;\n    printf(\"Element at index 0: %d\\n\", arr.data[0]);\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> data;\n\n    void initArray(int size) {\n        data.resize(size);\n    }\n};\n\nint main() {\n    Array arr;\n    arr.initArray(5);\n    arr.data[0] = 10;\n    std::cout << \"Element at index 0: \" << arr.data[0] << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\ntypedef struct {\n    Point p1;\n    Point p2;\n} Line;\n\nvoid setLine(Line *l, int x1, int y1, int x2, int y2) {\n    l->p1.x = x1;\n    l->p1.y = y1;\n    l->p2.x = x2;\n    l->p2.y = y2;\n}\n\nint main() {\n    Line line;\n    setLine(&line, 1, 2, 3, 4);\n    printf(\"Line: (%d, %d) - (%d, %d)\\n\", line.p1.x, line.p1.y, line.p2.x, line.p2.y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n\nclass Line {\npublic:\n    Point p1;\n    Point p2;\n};\n\nvoid setLine(Line &l, int x1, int y1, int x2, int y2) {\n    l.p1.x = x1;\n    l.p1.y = y1;\n    l.p2.x = x2;\n    l.p2.y = y2;\n}\n\nint main() {\n    Line line;\n    setLine(line, 1, 2, 3, 4);\n    std::cout << \"Line: (\" << line.p1.x << \", \" << line.p1.y << \") - (\" << line.p2.x << \", \" << line.p2.y << \")\" << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nvoid resizeArray(Array *arr, int newSize) {\n    arr->data = (int*)realloc(arr->data, newSize * sizeof(int));\n    arr->size = newSize;\n}\n\nint main() {\n    Array arr;\n    arr.data = (int*)malloc(5 * sizeof(int));\n    arr.size = 5;\n    resizeArray(&arr, 10);\n    printf(\"New size: %d\\n\", arr.size);\n    free(arr.data);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> data;\n\n    void resizeArray(int newSize) {\n        data.resize(newSize);\n    }\n};\n\nint main() {\n    Array arr;\n    arr.data.resize(5);\n    arr.data.resize(10);\n    std::cout << \"New size: \" << arr.data.size() << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point *p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point *p = createPoint(3, 4);\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int x, int y) : x(x), y(y) {}\n};\n\nint main() {\n    Point *p = new Point(3, 4);\n    std::cout << \"Point: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    int *temp = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::vector<int> temp;\n    for (int i = vec.size() - 1; i >= 0; i--) {\n        temp.push_back(vec[i]);\n    }\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    printPoint(&p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    printPoint(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyMatrix(int **a, int **b, int **result, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < cols; k++) {\n                result[i][j] += a[i][k] * b[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int a[2][2] = {{1, 2}, {3, 4}};\n    int b[2][2] = {{5, 6}, {7, 8}};\n    int result[2][2];\n    multiplyMatrix((int **)a, (int **)b, (int **)result, 2, 2);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyMatrix(const std::vector<std::vector<int>> &a, const std::vector<std::vector<int>> &b, std::vector<std::vector<int>> &result) {\n    int rows = a.size();\n    int cols = b[0].size();\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            result[i][j] = 0;\n            for (int k = 0; k < cols; k++) {\n                result[i][j] += a[i][k] * b[k][j];\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> a = {{1, 2}, {3, 4}};\n    std::vector<std::vector<int>> b = {{5, 6}, {7, 8}};\n    std::vector<std::vector<int>> result(2, std::vector<int>(2));\n    multiplyMatrix(a, b, result);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            std::cout << result[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverseString(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size, 0);\n}\n\nint main() {\n    std::vector<int> arr = create_array(5);\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"Point: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p = {3, 4};\n    print_point(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p = {3, 4};\n    print_point(p);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct Node* head = NULL;\n    // Code to populate the linked list\n    print_list(head);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_list(Node* head) {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << std::endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* head = nullptr;\n    // Code to populate the linked list\n    print_list(head);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Student {\n    char name[50];\n    int age;\n};\n\nstruct Student* create_student(const char* name, int age) {\n    struct Student* new_student = (struct Student*)malloc(sizeof(struct Student));\n    strcpy(new_student->name, name);\n    new_student->age = age;\n    return new_student;\n}\n\nint main() {\n    struct Student* s = create_student(\"Alice\", 25);\n    printf(\"Student: %s, Age: %d\\n\", s->name, s->age);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct Student {\n    std::string name;\n    int age;\n};\n\nStudent* create_student(const std::string& name, int age) {\n    Student* new_student = new Student;\n    new_student->name = name;\n    new_student->age = age;\n    return new_student;\n}\n\nint main() {\n    Student* s = create_student(\"Alice\", 25);\n    std::cout << \"Student: \" << s->name << \", Age: \" << s->age << std::endl;\n    delete s;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x=%d, y=%d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    std::cout << \"Before swap: x=\" << x << \", y=\" << y << std::endl;\n    swap(x, y);\n    std::cout << \"After swap: x=\" << x << \", y=\" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *arr = createArray(5);\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createVector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = createVector(5);\n    for(int i = 0; i < 5; i++) {\n        vec[i] = i + 1;\n        std::cout << \"vec[\" << i << \"] = \" << vec[i] << std::endl;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point coordinates: (%d, %d)\\n\", p.x, p.y);\n}\n\nint main() {\n    struct Point p1 = {3, 5};\n    printPoint(p1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point p1 = {3, 5};\n    printPoint(p1);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid printList(struct Node* head) {\n    struct Node* current = head;\n    while(current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node n1, n2, n3;\n    n1.data = 1; n1.next = &n2;\n    n2.data = 2; n2.next = &n3;\n    n3.data = 3; n3.next = NULL;\n    printList(&n1);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid printList(const Node* head) {\n    const Node* current = head;\n    while(current != NULL) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"NULL\" << std::endl;\n}\n\nint main() {\n    Node* n1 = new Node, n2 = new Node, n3 = new Node;\n    n1->data = 1; n1->next = n2;\n    n2->data = 2; n2->next = n3;\n    n3->data = 3; n3->next = NULL;\n    printList(n1);\n    delete n1; delete n2; delete n3;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    printf(\"3 + 7 = %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 7);\n    std::cout << \"3 + 7 = \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addOne(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int num = 5;\n    addOne(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid addOne(int &num) {\n    num++;\n}\n\nint main() {\n    int num = 5;\n    addOne(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid multiplyArray(int *arr, int size, int factor) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= factor;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    multiplyArray(arr, 5, 2);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid multiplyVector(std::vector<int> &arr, int factor) {\n    for (int &num : arr) {\n        num *= factor;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    multiplyVector(arr, 2);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n\nint main() {\n    Point *p = (Point *)malloc(sizeof(Point));\n    setPoint(p, 3, 4);\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n\nint main() {\n    Point *p = new Point;\n    setPoint(*p, 3, 4);\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverseArray(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int> &arr) {\n    for (int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    reverseVector(arr);\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculateArea(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle *rect = (Rectangle *)malloc(sizeof(Rectangle));\n    rect->width = 4;\n    rect->height = 5;\n    int area = calculateArea(rect);\n    printf(\"Area: %d\\n\", area);\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle *rect = new Rectangle;\n    rect->width = 4;\n    rect->height = 5;\n    int area = calculateArea(*rect);\n    std::cout << \"Area: \" << area << std::endl;\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid sum_array(int* arr, int size, int* result) {\n    *result = 0;\n    for(int i = 0; i < size; i++) {\n        *result += arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int result;\n    sum_array(arr, 5, &result);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int>& vec, int& result) {\n    result = 0;\n    for(int num : vec) {\n        result += num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    int result;\n    sum_vector(vec, result);\n    std::cout << \"Sum: \" << result << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*) malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* create_point(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n\nint main() {\n    Point* p = create_point(3, 4);\n    std::cout << \"Point: (\" << p->x << \", \" << p->y << \")\" << std::endl;\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for(int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    int len = str.length();\n    for(int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::string str = \"hello\";\n    reverse_string(str);\n    std::cout << \"Reversed string: \" << str << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint calculate_area(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    int area = calculate_area(&r);\n    printf(\"Area: %d\\n\", area);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculate_area(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle r = {4, 5};\n    int area = calculate_area(r);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid bubble_sort(int* arr, int size) {\n    for(int i = 0; i < size - 1; i++) {\n        for(int j = 0; j < size - i - 1; j++) {\n            if(arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {5, 2, 7, 1, 3};\n    int size = 5;\n    bubble_sort(arr, size);\n    printf(\"Sorted array: \");\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> vec = {5, 2, 7, 1, 3};\n    std::sort(vec.begin(), vec.end());\n    std::cout << \"Sorted array: \";\n    for(int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nvoid swap(int *a, int *b) { \n    int temp = *a; \n    *a = *b; \n    *b = temp; \n} \n\nint main() { \n    int x = 5, y = 10; \n    swap(&x, &y); \n    printf(\"x: %d, y: %d\\n\", x, y); \n    return 0; \n}", "target_code": "#include <iostream> \n\nvoid swap(int &a, int &b) { \n    int temp = a; \n    a = b; \n    b = temp; \n} \n\nint main() { \n    int x = 5, y = 10; \n    swap(x, y); \n    std::cout << \"x: \" << x << \", y: \" << y << std::endl; \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n#include <stdlib.h> \n\nvoid multiply(int *arr, int n, int scalar) { \n    for (int i = 0; i < n; i++) { \n        arr[i] *= scalar; \n    } \n} \n\nint main() { \n    int *arr = (int*)malloc(5 * sizeof(int)); \n    for (int i = 0; i < 5; i++) { \n        arr[i] = i + 1; \n    } \n    multiply(arr, 5, 2); \n    for (int i = 0; i < 5; i++) { \n        printf(\"%d \", arr[i]); \n    } \n    free(arr); \n    return 0; \n}", "target_code": "#include <iostream> \n#include <vector> \n\nvoid multiply(std::vector<int> &vec, int scalar) { \n    for (int i = 0; i < vec.size(); i++) { \n        vec[i] *= scalar; \n    } \n} \n\nint main() { \n    std::vector<int> vec = {1, 2, 3, 4, 5}; \n    multiply(vec, 2); \n    for (int num : vec) { \n        std::cout << num << \" \"; \n    } \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid printPoint(struct Point p) { \n    printf(\"(%d, %d)\\n\", p.x, p.y); \n} \n\nint main() { \n    struct Point p = {3, 5}; \n    printPoint(p); \n    return 0; \n}", "target_code": "#include <iostream> \n\nstruct Point { \n    int x; \n    int y; \n}; \n\nvoid printPoint(const Point &p) { \n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; \n} \n\nint main() { \n    Point p = {3, 5}; \n    printPoint(p); \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n#include <stdlib.h> \n\nstruct Node { \n    int data; \n    struct Node *next; \n}; \n\nvoid printList(struct Node *head) { \n    struct Node *temp = head; \n    while (temp != NULL) { \n        printf(\"%d \", temp->data); \n        temp = temp->next; \n    } \n} \n\nint main() { \n    struct Node *head = NULL; \n    struct Node *second = NULL; \n    struct Node *third = NULL; \n\n    head = (struct Node*)malloc(sizeof(struct Node)); \n    second = (struct Node*)malloc(sizeof(struct Node)); \n    third = (struct Node*)malloc(sizeof(struct Node)); \n\n    head->data = 1; \n    head->next = second; \n\n    second->data = 2; \n    second->next = third; \n\n    third->data = 3; \n    third->next = NULL; \n\n    printList(head); \n\n    free(head); \n    free(second); \n    free(third); \n\n    return 0; \n}", "target_code": "#include <iostream> \n\nstruct Node { \n    int data; \n    Node *next; \n}; \n\nvoid printList(Node *head) { \n    Node *temp = head; \n    while (temp != nullptr) { \n        std::cout << temp->data << \" \"; \n        temp = temp->next; \n    } \n} \n\nint main() { \n    Node *head = nullptr; \n    Node *second = nullptr; \n    Node *third = nullptr; \n\n    head = new Node; \n    second = new Node; \n    third = new Node; \n\n    head->data = 1; \n    head->next = second; \n\n    second->data = 2; \n    second->next = third; \n\n    third->data = 3; \n    third->next = nullptr; \n\n    printList(head); \n\n    delete head; \n    delete second; \n    delete third; \n\n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h> \n\nstruct Rectangle { \n    int width; \n    int length; \n}; \n\nint area(struct Rectangle *r) { \n    return r->width * r->length; \n} \n\nint main() { \n    struct Rectangle r = {4, 5}; \n    printf(\"Area: %d\\n\", area(&r)); \n    return 0; \n}", "target_code": "#include <iostream> \n\nstruct Rectangle { \n    int width; \n    int length; \n}; \n\nint area(const Rectangle &r) { \n    return r.width * r.length; \n} \n\nint main() { \n    Rectangle r = {4, 5}; \n    std::cout << \"Area: \" << area(r) << std::endl; \n    return 0; \n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_function_pointer(int* ptr)\n{\n    *ptr = 10;\n}\n\nint main()\n{\n    int num = 5;\n    c_function_pointer(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_function_reference(int& ref)\n{\n    ref = 10;\n}\n\nint main()\n{\n    int num = 5;\n    cpp_function_reference(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_array(int arr[], int size)\n{\n    for (int i = 0; i < size; ++i)\n    {\n        arr[i] *= 2;\n    }\n}\n\nint main()\n{\n    int arr[] = {1, 2, 3, 4, 5};\n    c_array(arr, 5);\n    for (int i = 0; i < 5; ++i)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_vector(std::vector<int>& vec)\n{\n    for (int& num : vec)\n    {\n        num *= 2;\n    }\n}\n\nint main()\n{\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    cpp_vector(vec);\n    for (int num : vec)\n    {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct c_struct\n{\n    int id;\n    char name[20];\n};\n\nvoid c_malloc_struct(struct c_struct** s)\n{\n    *s = (struct c_struct*)malloc(sizeof(struct c_struct));\n    (*s)->id = 1;\n}\n\nint main()\n{\n    struct c_struct* s;\n    c_malloc_struct(&s);\n    printf(\"%d %s\\n\", s->id, s->name);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct cpp_struct\n{\n    int id;\n    std::string name;\n};\n\nvoid cpp_new_struct(cpp_struct*& s)\n{\n    s = new cpp_struct;\n    s->id = 1;\n}\n\nint main()\n{\n    cpp_struct* s;\n    cpp_new_struct(s);\n    std::cout << s->id << ' ' << s->name << std::endl;\n    delete s;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_malloc_array(int** arr, int size)\n{\n    *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i)\n    {\n        (*arr)[i] = i * 2;\n    }\n}\n\nint main()\n{\n    int* arr;\n    c_malloc_array(&arr, 5);\n    for (int i = 0; i < 5; ++i)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_vector_array(std::vector<int>& vec, int size)\n{\n    vec.resize(size);\n    for (int i = 0; i < size; ++i)\n    {\n        vec[i] = i * 2;\n    }\n}\n\nint main()\n{\n    std::vector<int> vec;\n    cpp_vector_array(vec, 5);\n    for (int num : vec)\n    {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_malloc_double_ptr(int*** ptr)\n{\n    *ptr = (int**)malloc(sizeof(int*));\n    **ptr = (int*)malloc(sizeof(int));\n    ***ptr = 10;\n}\n\nint main()\n{\n    int** ptr;\n    c_malloc_double_ptr(&ptr);\n    printf(\"%d\\n\", ***ptr);\n    free(**ptr);\n    free(*ptr);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_new_double_ptr(int*** ptr)\n{\n    *ptr = new int*;\n    **ptr = new int;\n    ***ptr = 10;\n}\n\nint main()\n{\n    int** ptr;\n    cpp_new_double_ptr(&ptr);\n    std::cout << ***ptr << std::endl;\n    delete *ptr;\n    delete ptr;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func1(int *array) {\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", array[i]);\n    }\n}\n\nint main() {\n    int *arr = (int *)malloc(5 * sizeof(int));\n    for(int i = 0; i < 5; i++) {\n        arr[i] = i * 2;\n    }\n\n    c_func1(arr);\n    free(arr);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func1(const std::vector<int>& vec) {\n    for(int i = 0; i < 5; i++) {\n        std::cout << vec[i] << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec(5);\n    for(int i = 0; i < 5; i++) {\n        vec[i] = i * 2;\n    }\n\n    cpp_func1(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct C_Struct {\n    int id;\n    char name[20];\n};\n\nvoid c_func2(C_Struct *c_struct) {\n    printf(\"%d %s\\n\", c_struct->id, c_struct->name);\n}\n\nint main() {\n    C_Struct *cs = (C_Struct *)malloc(sizeof(C_Struct));\n    cs->id = 1;\n    strcpy(cs->name, \"John\");\n\n    c_func2(cs);\n    free(cs);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstruct CPP_Struct {\n    int id;\n    std::string name;\n};\n\nvoid cpp_func2(const CPP_Struct& cpp_struct) {\n    std::cout << cpp_struct.id << \" \" << cpp_struct.name << std::endl;\n}\n\nint main() {\n    CPP_Struct cs;\n    cs.id = 1;\n    cs.name = \"John\";\n\n    cpp_func2(cs);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func3(int *ptr) {\n    *ptr = 10;\n}\n\nint main() {\n    int *num = (int *)malloc(sizeof(int));\n    c_func3(num);\n    printf(\"%d\\n\", *num);\n    free(num);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid cpp_func3(int& num) {\n    num = 10;\n}\n\nint main() {\n    int num;\n    cpp_func3(num);\n    std::cout << num << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func4(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int *numbers = (int *)malloc(3 * sizeof(int));\n    numbers[0] = 1;\n    numbers[1] = 2;\n    numbers[2] = 3;\n\n    c_func4(numbers, 3);\n    free(numbers);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func4(const std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    cpp_func4(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid c_func5(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n\nint main() {\n    int *numbers = (int *)malloc(3 * sizeof(int));\n    numbers[0] = 1;\n    numbers[1] = 2;\n    numbers[2] = 3;\n\n    c_func5(numbers, 3);\n    for(int i = 0; i < 3; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    free(numbers);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid cpp_func5(std::vector<int>& vec) {\n    for(int i = 0; i < vec.size(); i++) {\n        vec[i] *= 2;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3};\n    cpp_func5(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x: \" << x << \", y: \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nint main() {\n    int *array = create_array(5);\n    for(int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    free(array);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_vector(int size) {\n    std::vector<int> vec(size);\n    return vec;\n}\n\nint main() {\n    std::vector<int> vec = create_vector(5);\n    for(int i = 0; i < 5; i++) {\n        vec[i] = i;\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint sum_coordinates(struct Point p) {\n    return p.x + p.y;\n}\n\nint main() {\n    struct Point point = {3, 4};\n    printf(\"Sum of coordinates: %d\\n\", sum_coordinates(point));\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint sum_coordinates(const Point &p) {\n    return p.x + p.y;\n}\n\nint main() {\n    Point point = {3, 4};\n    std::cout << \"Sum of coordinates: \" << sum_coordinates(point) << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for(int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for(int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for(int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* create_dynamic_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid free_dynamic_array(int *arr) {\n    free(arr);\n}\n\nint main() {\n    int *array = create_dynamic_array(5);\n    for(int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    free_dynamic_array(array);\n    return 0;\n}", "target_code": "#include <iostream>\n\nint* create_dynamic_array(int size) {\n    int *arr = new int[size];\n    return arr;\n}\n\nvoid free_dynamic_array(int *arr) {\n    delete[] arr;\n}\n\nint main() {\n    int *array = create_dynamic_array(5);\n    for(int i = 0; i < 5; i++) {\n        array[i] = i;\n    }\n    free_dynamic_array(array);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum: %d\\n\", sum);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    sum_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid sum_vector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    std::cout << \"Sum: \" << sum << std::endl;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    sum_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid print_point(Point *p) {\n    printf(\"Point: (%d, %d)\\n\", p->x, p->y);\n}\n\nint main() {\n    Point *p = (Point*) malloc(sizeof(Point));\n    p->x = 3;\n    p->y = 5;\n    print_point(p);\n    free(p);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"Point: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n\nint main() {\n    Point *p = new Point;\n    p->x = 3;\n    p->y = 5;\n    print_point(*p);\n    delete p;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    int *temp = (int*) malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        temp[i] = arr[size - i - 1];\n    }\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n    free(temp);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    std::vector<int> temp(vec.rbegin(), vec.rend());\n    vec = temp;\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nvoid get_area(Rectangle *rect) {\n    int area = rect->width * rect->height;\n    printf(\"Area: %d\\n\", area);\n}\n\nint main() {\n    Rectangle *rect = (Rectangle*) malloc(sizeof(Rectangle));\n    rect->width = 5;\n    rect->height = 3;\n    get_area(rect);\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid get_area(const Rectangle &rect) {\n    int area = rect.width * rect.height;\n    std::cout << \"Area: \" << area << std::endl;\n}\n\nint main() {\n    Rectangle *rect = new Rectangle;\n    rect->width = 5;\n    rect->height = 3;\n    get_area(*rect);\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid square_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    square_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid square_vector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= num;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    square_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addArrays(int* arr1, int* arr2, int* result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5, 6};\n    int size = 3;\n    int* result = (int*)malloc(size * sizeof(int));\n    addArrays(arr1, arr2, result, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid addVectors(const std::vector<int>& vec1, const std::vector<int>& vec2, std::vector<int>& result) {\n    for (size_t i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 2, 3};\n    std::vector<int> vec2 = {4, 5, 6};\n    std::vector<int> result;\n    addVectors(vec1, vec2, result);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getSum(const Point* p) {\n    return p->x + p->y;\n}\n\nint main() {\n    Point* point = (Point*)malloc(sizeof(Point));\n    point->x = 5;\n    point->y = 10;\n    printf(\"Sum of x and y: %d\\n\", getSum(point));\n    free(point);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getSum(const Point& p) {\n    return p.x + p.y;\n}\n\nint main() {\n    Point* point = new Point;\n    point->x = 5;\n    point->y = 10;\n    std::cout << \"Sum of x and y: \" << getSum(*point) << std::endl;\n    delete point;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = 5;\n    reverseArray(arr, size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseVector(std::vector<int>& vec) {\n    for (size_t i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverseVector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copyString(const char* src, char* dest) {\n    while (*src != '\\0') {\n        *dest = *src;\n        src++;\n        dest++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char* src = \"Hello, World!\";\n    char* dest = (char*)malloc(strlen(src) + 1);\n    copyString(src, dest);\n    printf(\"Copied string: %s\\n\", dest);\n    free(dest);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <cstring>\n\nvoid copyString(const char* src, char* dest) {\n    while (*src != '\\0') {\n        *dest = *src;\n        src++;\n        dest++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    const char* src = \"Hello, World!\";\n    char* dest = new char[strlen(src) + 1];\n    copyString(src, dest);\n    std::cout << \"Copied string: \" << dest << std::endl;\n    delete[] dest;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint getArea(const Rectangle* rect) {\n    return rect->width * rect->height;\n}\n\nint main() {\n    Rectangle* rect = (Rectangle*)malloc(sizeof(Rectangle));\n    rect->width = 5;\n    rect->height = 10;\n    printf(\"Area of rectangle: %d\\n\", getArea(rect));\n    free(rect);\n    return 0;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint getArea(const Rectangle& rect) {\n    return rect.width * rect.height;\n}\n\nint main() {\n    Rectangle* rect = new Rectangle;\n    rect->width = 5;\n    rect->height = 10;\n    std::cout << \"Area of rectangle: \" << getArea(*rect) << std::endl;\n    delete rect;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    std::cout << \"x = \" << x << \", y = \" << y << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    print_array(arr, 5);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid print_vector(std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    print_vector(vec);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\ntypedef struct {\n    int id;\n    char name[20];\n} Student;\nvoid print_student(Student *s) {\n    printf(\"ID: %d, Name: %s\\n\", s->id, s->name);\n}\nint main() {\n    Student *s = (Student*)malloc(sizeof(Student));\n    s->id = 1;\n    strcpy(s->name, \"John\");\n    print_student(s);\n    free(s);\n    return 0;\n}", "target_code": "#include <iostream>\n#include <string>\nclass Student {\npublic:\n    int id;\n    std::string name;\n    void print() {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};\nint main() {\n    Student *s = new Student;\n    s->id = 1;\n    s->name = \"John\";\n    s->print();\n    delete s;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    reverse_array(arr, 5);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - 1 - i];\n        vec[vec.size() - 1 - i] = temp;\n    }\n}\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    reverse_vector(vec);\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid *allocate_memory(int size) {\n    return malloc(size);\n}\nvoid free_memory(void *ptr) {\n    free(ptr);\n}\nint main() {\n    int *ptr = (int*)allocate_memory(sizeof(int));\n    *ptr = 10;\n    printf(\"Value: %d\\n\", *ptr);\n    free_memory(ptr);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid *allocate_memory(int size) {\n    return new char[size];\n}\nvoid free_memory(void *ptr) {\n    delete[] static_cast<char*>(ptr);\n}\nint main() {\n    int *ptr = static_cast<int*>(allocate_memory(sizeof(int));\n    *ptr = 10;\n    std::cout << \"Value: \" << *ptr << std::endl;\n    free_memory(ptr);\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid increment(int *num) {\n    (*num)++;\n}\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"x = %d\\n\", x);\n    return 0;\n}", "target_code": "#include <iostream>\nvoid increment(int &num) {\n    num++;\n}\nint main() {\n    int x = 5;\n    increment(x);\n    std::cout << \"x = \" << x << std::endl;\n    return 0;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { for (int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverseArray(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void movePoint(Point* pt, int dx, int dy) { pt->x += dx; pt->y += dy; }", "target_code": "struct Point { int x; int y; }; void movePoint(Point &pt, int dx, int dy) { pt.x += dx; pt.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "int* createArray(int size) { return new int[size]; } void deleteArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int> &arr) { for (int elem : arr) { std::cout << elem << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void printPersonInfo(Person* person) { printf(\"Name: %s, Age: %d\\n\", person->name, person->age); }", "target_code": "struct Person { std::string name; int age; }; void printPersonInfo(const Person &person) { std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char title[100]; int year; } Book; void printBookInfo(Book* book) { printf(\"Title: %s, Year: %d\\n\", book->title, book->year); }", "target_code": "struct Book { std::string title; int year; }; void printBookInfo(const Book &book) { std::cout << \"Title: \" << book.title << \", Year: \" << book.year << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArrayValues(int* arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void doubleArrayValues(std::vector<int> &arr) { for (int &elem : arr) { elem *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; float price; } Product; void updateProductPrice(Product* product, float newPrice) { product->price = newPrice; }", "target_code": "struct Product { int id; float price; }; void updateProductPrice(Product &product, float newPrice) { product.price = newPrice; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverseArray(std::vector<int>& arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "int* createArray(int size) { return new int[size]; } void deleteArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiplyMatrix(int** mat1, int** mat2, int** result, int rows1, int cols1, int cols2) { for(int i=0; i<rows1; i++) { for(int j=0; j<cols2; j++) { result[i][j] = 0; for(int k=0; k<cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }", "target_code": "void multiplyMatrix(const std::vector<std::vector<int>>& mat1, const std::vector<std::vector<int>>& mat2, std::vector<std::vector<int>>& result) { int rows1 = mat1.size(), cols1 = mat1[0].size(), cols2 = mat2[0].size(); for(int i=0; i<rows1; i++) { for(int j=0; j<cols2; j++) { result[i][j] = 0; for(int k=0; k<cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void resizeArray(int** arr, int oldSize, int newSize) { int* newArr = (int*)malloc(newSize * sizeof(int)); memcpy(newArr, *arr, oldSize * sizeof(int)); free(*arr); *arr = newArr; }", "target_code": "void resizeArray(std::vector<int>& arr, int newSize) { arr.resize(newSize); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int getArea(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* newArr = (int*)malloc(size * sizeof(int)); memcpy(newArr, arr, size * sizeof(int)); return newArr; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << \" \"; } std::cout << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int size;\n    int* data;\n} Array;\n\nArray createArray(int size) {\n    Array arr;\n    arr.size = size;\n    arr.data = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid deleteArray(Array* arr) {\n    free(arr->data);\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstruct Array {\n    int size;\n    std::vector<int> data;\n};\n\nArray createArray(int size) {\n    return {size, std::vector<int>(size)};\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid movePoint(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid movePoint(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* cloneArray(int* arr, int size) {\n    int* clone = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        clone[i] = arr[i];\n    }\n    return clone;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> cloneArray(const std::vector<int>& arr) {\n    return arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid printPoint(const Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point* p) {\n    std::cout << \"(\" << p->x << \", \" << p->y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int>& arr) {\n    int size = arr.size();\n    for (int i = 0; i < size / 2; i++) {\n        std::swap(arr[i], arr[size - 1 - i]);\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    int sum = 0;\n    for(int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(struct Point p1, struct Point p2) {\n    return abs(p2.x - p1.x) + abs(p2.y - p1.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(const Point &p1, const Point &p2) {\n    return abs(p2.x - p1.x) + abs(p2.y - p1.y);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    for(int i = 0; i < arr.size() / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[arr.size() - i - 1];\n        arr[arr.size() - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid clear_array(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        arr[i] = 0;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid clear_array(std::vector<int> &arr) {\n    for(int &num : arr) {\n        num = 0;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint find_max(int *arr, int size) {\n    int max = arr[0];\n    for(int i = 1; i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint find_max(const std::vector<int> &arr) {\n    int max = arr[0];\n    for(int num : arr) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid squareArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid squareArray(std::vector<int> &arr) {\n    for (int &num : arr) {\n        num = num * num;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstruct Point* createPoint(int x, int y) {\n    struct Point* newPoint = (struct Point*)malloc(sizeof(struct Point));\n    newPoint->x = x;\n    newPoint->y = y;\n    return newPoint;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* newPoint = new Point;\n    newPoint->x = x;\n    newPoint->y = y;\n    return newPoint;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int *arr, int size) {\n    int *newArr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i] * 2;\n    }\n    return newArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> newArr(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        newArr[i] = arr[i] * 2;\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setRectangleSize(struct Rectangle *rect, int width, int height) {\n    rect->width = width;\n    rect->height = height;\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid setRectangleSize(Rectangle &rect, int width, int height) {\n    rect.width = width;\n    rect.height = height;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insertNode(struct Node **head, int data) {\n    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = *head;\n    *head = newNode;\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insertNode(Node* &head, int data) {\n    Node *newNode = new Node;\n    newNode->data = data;\n    newNode->next = head;\n    head = newNode;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* mergeArrays(int *arr1, int size1, int *arr2, int size2) {\n    int *mergedArr = (int *)malloc((size1 + size2) * sizeof(int));\n    for (int i = 0; i < size1; i++) {\n        mergedArr[i] = arr1[i];\n    }\n    for (int j = 0; j < size2; j++) {\n        mergedArr[size1 + j] = arr2[j];\n    }\n    return mergedArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeArrays(const std::vector<int> &arr1, const std::vector<int> &arr2) {\n    std::vector<int> mergedArr;\n    mergedArr.reserve(arr1.size() + arr2.size());\n    mergedArr.insert(mergedArr.end(), arr1.begin(), arr1.end());\n    mergedArr.insert(mergedArr.end(), arr2.begin(), arr2.end());\n    return mergedArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverseArray(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Student {\n    char name[50];\n    int age;\n};\n\nvoid printStudentInfo(struct Student *student) {\n    printf(\"Name: %s, Age: %d\\n\", student->name, student->age);\n}\n", "target_code": "#include <iostream>\n\nstruct Student {\n    std::string name;\n    int age;\n};\n\nvoid printStudentInfo(const Student &student) {\n    std::cout << \"Name: \" << student.name << \", Age: \" << student.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *arr, int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for(int elem : arr) { result += elem; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(char *str) { int len = strlen(str); for(int i = 0; i < len / 2; i++) { char temp = str[i]; str[i] = str[len - i - 1]; str[len - i - 1] = temp; } }", "target_code": "void reverse(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int getDistance(Point *p1, Point *p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "class Point { public: int x; int y; Point(int x, int y) : x(x), y(y) {} int getDistance(const Point& other) { return sqrt(pow(other.x - x, 2) + pow(other.y - y, 2)); } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int *arr) { free(arr); }", "target_code": "std::vector<int> createArray(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void printEmployee(const Employee *emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "class Employee { public: int id; std::string name; void printEmployee() { std::cout << \"ID: \" << id << \", Name: \" << name << std::endl; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "class Rectangle { public: int width; int height; int getArea() { return width * height; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteIntArray(int *arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void deleteIntArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int day; int month; int year; } Date; void printDate(const Date *date) { printf(\"%d/%d/%d\\n\", date->day, date->month, date->year); }", "target_code": "class Date { public: int day; int month; int year; void printDate() { std::cout << day << \"/\" << month << \"/\" << year << std::endl; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n\nint power(int base, int exp) {\n    int result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for(const auto& elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(const auto& elem : arr) sum += elem; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* newArr = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) newArr[i] = arr[i]; return newArr; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void updatePersonAge(Person* p, int newAge) { p->age = newAge; }", "target_code": "void updatePersonAge(Person& p, int newAge) { p.age = newAge; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(std::vector<int> &arr) {\n    int result = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        result += arr[i];\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid print_person(struct Person p) {\n    printf(\"Name: %s, Age: %d\\n\", p.name, p.age);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nvoid print_person(const Person &p) {\n    std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint get_max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint get_max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    int start = 0;\n    int end = size - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(struct Rectangle rect) {\n    return rect.width * rect.height;\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint area(const Rectangle &rect) {\n    return rect.width * rect.height;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *duplicate_array(int arr[], int size) {\n    int *new_arr = (int *)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    return new_arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicate_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr(arr.begin(), arr.end());\n    return new_arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int arr[], int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void add_arrays(int* arr1, int* arr2, int* result, int size) { for(int i=0; i<size; i++) { result[i] = arr1[i] + arr2[i]; } }", "target_code": "void add_arrays(std::vector<int>& arr1, std::vector<int>& arr2, std::vector<int>& result) { for(size_t i=0; i<arr1.size(); i++) { result.push_back(arr1[i] + arr2[i]); } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void set_point(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "struct Point { int x; int y; }; void set_point(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void delete_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void delete_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_message(char* message) { printf(\"%s\\n\", message); }", "target_code": "void print_message(const std::string& message) { std::cout << message << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person_info(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person_info(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int temp; for(int i=0; i<size/2; i++) { temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void init_array(Array* arr, int size) { arr->data = (int*)malloc(size * sizeof(int)); arr->size = size; }", "target_code": "struct Array { std::vector<int> data; int size; }; void init_array(Array& arr, int size) { arr.data.resize(size); arr.size = size; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { return std::accumulate(arr.begin(), arr.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { int *start = arr, *end = arr + size - 1; while (start < end) { int temp = *start; *start = *end; *end = temp; start++; end--; } }", "target_code": "void reverseArray(std::vector<int> &arr) { int start = 0, end = arr.size() - 1; while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point p) { printf(\"(%d, %d)\\n\", p.x, p.y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void deleteArray(int *arr) { free(arr); }", "target_code": "int *createArray(int size) { return new int[size]; } void deleteArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student; void printStudent(Student s) { printf(\"ID: %d, Name: %s\\n\", s.id, s.name); }", "target_code": "struct Student { int id; std::string name; }; void printStudent(const Student &s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int *src, int *dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int *arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void doubleArray(std::vector<int> &arr) { for (int &num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int> &arr) { int sum = 0; for (int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printSquare(int *arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d\\n\", arr[i] * arr[i]); } }", "target_code": "void printSquare(const std::vector<int> &arr) { for (int num : arr) { std::cout << num * num << \"\\n\"; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createIntArray(int size) { return (int *)calloc(size, sizeof(int)); } void deleteIntArray(int *arr) { free(arr); }", "target_code": "int *createIntArray(int size) { return new int[size](); } void deleteIntArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* array, int size) { int result = 0; for(int i = 0; i < size; i++) { result += array[i]; } return result; }", "target_code": "int sum(const std::vector<int>& array) { int result = 0; for(int value : array) { result += value; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(int* array, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { temp[i] = array[size - 1 - i]; } for(int i = 0; i < size; i++) { array[i] = temp[i]; } free(temp); }", "target_code": "void reverse(std::vector<int>& array) { std::reverse(array.begin(), array.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move(Point* p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move(Point& p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* array) { free(array); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); } // No es necesario la función free_array en C++"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", array[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& array) { for(int value : array) { std::cout << value << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copy_array(int* array, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { copy[i] = array[i]; } return copy; }", "target_code": "std::vector<int> copy_array(const std::vector<int>& array) { return array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if(n <= 1) { return 1; } return n * factorial(n - 1); }", "target_code": "int factorial(int n) { return (n <= 1) ? 1 : n * factorial(n - 1); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* values; int size; } Array; int sum_array(Array* arr) { int result = 0; for(int i = 0; i < arr->size; i++) { result += arr->values[i]; } return result; }", "target_code": "class Array { std::vector<int> values; public: int sum_array() { int result = 0; for(int value : values) { result += value; } return result; } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementar(int* num) { (*num)++; }", "target_code": "void incrementar(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicar(int* num) { int* resultado = malloc(sizeof(int)); *resultado = (*num) * 2; return resultado; }", "target_code": "int* duplicar(int& num) { int* resultado = new int; *resultado = num * 2; return resultado; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void intercambiar(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void intercambiar(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Punto;", "target_code": "struct Punto { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "Punto* crear_punto(int x, int y) { Punto* p = malloc(sizeof(Punto)); p->x = x; p->y = y; return p; }", "target_code": "Punto* crear_punto(int x, int y) { Punto* p = new Punto; p->x = x; p->y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void liberar_punto(Punto* p) { free(p); }", "target_code": "void liberar_punto(Punto* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* crear_array(int tam) { return malloc(sizeof(int) * tam); }", "target_code": "int* crear_array(int tam) { return new int[tam]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void llenar_array(int* arr, int tam) { for(int i = 0; i < tam; i++) arr[i] = i; }", "target_code": "void llenar_array(int* arr, int tam) { for(int i = 0; i < tam; i++) arr[i] = i; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void imprimir_array(int* arr, int tam) { for(int i = 0; i < tam; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void imprimir_array(int* arr, int tam) { for(int i = 0; i < tam; i++) std::cout << arr[i] << \" \"; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* datos; int tam; } Array;", "target_code": "struct Array { std::vector<int> datos; int tam; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { for (int i = 0; i < size/2; ++i) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_array(std::vector<int>& arr) { for (int i = 0; i < arr.size()/2; ++i) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for (int i = 0; i < size; ++i) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int>& arr) { for (int val : arr) { std::cout << val << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for (int val : arr) { sum += val; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int* src, int* dest, int size) { for (int i = 0; i < size; ++i) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& arr) {\n    int result = 0;\n    for(int num : arr) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point {\n    int x;\n    int y;\n};\n\nint getDistance(struct Point a, struct Point b) {\n    return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\nint getDistance(const Point& a, const Point& b) {\n    return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "void printArray(const std::vector<int>& arr) {\n    for(int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "int factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while(start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "target_code": "void reverseArray(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while(start < end) {\n        std::swap(arr[start], arr[end]);\n        start++;\n        end--;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int getMax(int *arr, int size) {\n    int max = arr[0];\n    for(int i = 1; i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "target_code": "int getMax(const std::vector<int>& arr) {\n    int max = arr[0];\n    for(int num : arr) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int *src, int *dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for (int num : vec) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return Point{ x, y }; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_dynamic_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_dynamic_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_dynamic_array(int *arr) { free(arr); }", "target_code": "void free_dynamic_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_person(Person *p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void print_person(const Person &p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }", "target_code": "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_string(char *str) { int length = strlen(str); for (int i = 0; i < length / 2; i++) { char temp = str[i]; str[i] = str[length - i - 1]; str[length - i - 1] = temp; } }", "target_code": "void reverse_string(std::string &str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max_element(int *arr, int size) { int max = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) max = arr[i]; } return max; }", "target_code": "int max_element(const std::vector<int> &vec) { return *std::max_element(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "float average(float *arr, int size) { float sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum / size; }", "target_code": "float average(const std::vector<float> &vec) { float sum = std::accumulate(vec.begin(), vec.end(), 0.0f); return sum / vec.size(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { int i, j; for(i = 0, j = size-1; i < j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void print_point(Point *p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void print_point(const Point &p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); } void free_array(int *arr) { free(arr); }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiply_matrix(int **mat, int rows, int cols, int scalar) { int i, j; for(i = 0; i < rows; i++) { for(j = 0; j < cols; j++) { mat[i][j] *= scalar; } } }", "target_code": "void multiply_matrix(std::vector<std::vector<int>> &mat, int scalar) { for(auto &row : mat) { for(auto &elem : row) { elem *= scalar; } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; void print_student(Student *s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "struct Student { int id; std::string name; }; void print_student(const Student &s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *clone_array(int *arr, int size) { int *clone = (int *)malloc(size * sizeof(int)); memcpy(clone, arr, size * sizeof(int)); return clone; }", "target_code": "std::vector<int> clone_vector(const std::vector<int> &vec) { return std::vector<int>(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculate_area(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculate_area(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void concatenate_strings(char *str1, char *str2, char *result) { sprintf(result, \"%s%s\", str1, str2); }", "target_code": "std::string concatenate_strings(const std::string &str1, const std::string &str2) { return str1 + str2; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_int(int value) { int *ptr = (int *)malloc(sizeof(int)); *ptr = value; return ptr; } void delete_int(int *ptr) { free(ptr); }", "target_code": "int *create_int(int value) { return new int(value); } void delete_int(int *ptr) { delete ptr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_struct(struct Person *p) { p->age += 1; }", "target_code": "void modify_struct(Person &p) { p.age += 1; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Person { char name[50]; int age; };", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "void free_array(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copy_array(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copy_array(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_values(struct Person p) { return p.age; }", "target_code": "int sum_struct_values(const Person &p) { return p.age; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_and_initialize_array(int size, int value) { int *arr = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { arr[i] = value; } return arr; }", "target_code": "std::vector<int> create_and_initialize_array(int size, int value) { return std::vector<int>(size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point* create_point(int x, int y) { return new Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_array(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "#include <iostream>\nvoid print_vector(const std::vector<int>& vec) { for(int i = 0; i < vec.size(); i++) { std::cout << vec[i] << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student; Student* create_student(int id, const char* name) { Student* s = (Student*)malloc(sizeof(Student)); s->id = id; strcpy(s->name, name); return s; }", "target_code": "struct Student { int id; std::string name; }; Student* create_student(int id, const std::string& name) { return new Student{id, name}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void bubble_sort(int* arr, int size) { for(int i = 0; i < size - 1; i++) { for(int j = 0; j < size - i - 1; j++) { if(arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } }", "target_code": "void bubble_sort(std::vector<int>& vec) { for(int i = 0; i < vec.size() - 1; i++) { for(int j = 0; j < vec.size() - i - 1; j++) { if(vec[j] > vec[j + 1]) { std::swap(vec[j], vec[j + 1]); } } } }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nint* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "#include <vector>\nstd::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { double real; double imag; } Complex; Complex add_complex(Complex a, Complex b) { Complex result; result.real = a.real + b.real; result.imag = a.imag + b.imag; return result; }", "target_code": "struct Complex { double real; double imag; }; Complex add_complex(const Complex& a, const Complex& b) { return {a.real + b.real, a.imag + b.imag}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_point(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "void print_point(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "void free_point(Point* p) { delete p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Person { char name[50]; int age; };", "target_code": "class Person { public: std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPerson(struct Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void printPerson(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int* src, int* dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int* temp = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { temp[i] = arr[size - i - 1]; } for(int i=0; i<size; i++) { arr[i] = temp[i]; } free(temp); }", "target_code": "void reverseArray(int* arr, int size) { std::vector<int> temp(arr, arr + size); std::reverse(temp.begin(), temp.end()); std::copy(temp.begin(), temp.end(), arr); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* mergeArrays(int* arr1, int size1, int* arr2, int size2) { int* merged = (int*)malloc((size1 + size2) * sizeof(int)); for(int i=0; i<size1; i++) { merged[i] = arr1[i]; } for(int i=0; i<size2; i++) { merged[size1 + i] = arr2[i]; } return merged; }", "target_code": "std::vector<int> mergeArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> merged(arr1); merged.insert(merged.end(), arr2.begin(), arr2.end()); return merged; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void displayArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void displayArray(const std::vector<int>& arr) { for(const auto& num : arr) { std::cout << num << \" \"; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum(int arr[], int n) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int> &arr) {\n    int result = 0;\n    for (int num : arr) {\n        result += num;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\";\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle *r) {\n    printf(\"Rectangle: width=%d, height=%d\\n\", r->width, r->height);\n}\n", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nvoid print_rectangle(const Rectangle &r) {\n    std::cout << \"Rectangle: width=\" << r.width << \", height=\" << r.height << \"\\n\";\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_linked_list(const struct Node *head) {\n    const struct Node *current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid print_linked_list(const Node *head) {\n    const Node *current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \"\\n\";\n        current = current->next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printVector(const std::vector<int> &vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* createPoint(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nPoint* createPoint(int x, int y) {\n    Point* p = new Point;\n    p->x = x;\n    p->y = y;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addArrays(int arr1[], int arr2[], int size, int result[]) {\n    for (int i = 0; i < size; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2) {\n    std::vector<int> result;\n    for (int i = 0; i < vec1.size(); i++) {\n        result.push_back(vec1[i] + vec2[i]);\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumVector(const std::vector<int> &vec) {\n    int sum = 0;\n    for (int num : vec) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printStruct(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printStruct(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int arr[], int size) {\n    int* newArr = (int*)malloc(size * 2 * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    return newArr;\n}\n", "target_code": "#include <iostream>\n\nint* doubleArray(int arr[], int size) {\n    int* newArr = new int[size * 2];\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(std::vector<int> &vec) { int sum = 0; for (int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_array(int *arr, int size) { for (int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void double_vector(std::vector<int> &vec) { for (int i = 0; i < vec.size(); i++) { vec[i] *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; }", "target_code": "std::vector<int> create_vector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_values(Point *p) { return p->x + p->y; }", "target_code": "int sum_struct_values(const Point &p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int *arr) { free(arr); }", "target_code": "N/A (No necesita liberar memoria explícitamente con std::vector)"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int> &vec) { for (int i = 0; i < vec.size(); i++) { std::cout << vec[i] << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copy_array(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); memcpy(copy, arr, size * sizeof(int)); return copy; }", "target_code": "std::vector<int> copy_vector(const std::vector<int> &vec) { return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_struct(Point *p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void modify_struct(Point &p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for (int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializeStruct(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void initializeStruct(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for (int i = 0; i < size; i++) copy[i] = arr[i]; return copy; }", "target_code": "int* copyArray(const std::vector<int>& arr) { int* copy = new int[arr.size()]; std::copy(arr.begin(), arr.end(), copy); return copy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStructMembers(Point* p) { return p->x + p->y; }", "target_code": "int sumStructMembers(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int* arr, int size) { for (int i = 0; i < size; i++) arr[i] *= 2; }", "target_code": "void doubleArray(std::vector<int>& arr) { for (int& num : arr) num *= 2; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for (int i = 0; i < vec.size(); i++) { sum += vec[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_array(int* arr) { free(arr); }", "target_code": "int* create_array(int size) { return new int[size]; } void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max_value(int* arr, int size) { int max = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) { max = arr[i]; } } return max; }", "target_code": "int max_value(const std::vector<int>& vec) { int max = vec[0]; for (int i = 1; i < vec.size(); i++) { if (vec[i] > max) { max = vec[i]; } } return max; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area_rectangle(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area_rectangle(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increase_values(int* arr, int size, int amount) { for (int i = 0; i < size; i++) { arr[i] += amount; } }", "target_code": "void increase_values(std::vector<int>& vec, int amount) { for (int i = 0; i < vec.size(); i++) { vec[i] += amount; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person; void print_person_data(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person_data(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int a, int b) { return a + b; }", "target_code": "int sum(int a, int b) { return a + b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float x; float y; } Vector; Vector add_vectors(Vector v1, Vector v2) { Vector result; result.x = v1.x + v2.x; result.y = v1.y + v2.y; return result; }", "target_code": "struct Vector { float x; float y; }; Vector add_vectors(const Vector& v1, const Vector& v2) { return Vector{v1.x + v2.x, v1.y + v2.y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void sort_array(int* arr, int size) { for (int i = 0; i < size - 1; i++) { for (int j = 0; j < size - i - 1; j++) { if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } }", "target_code": "void sort_vector(std::vector<int>& vec) { std::sort(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void addArrays(int *arr1, int *arr2, int *result, int size) { for(int i=0; i<size; i++) result[i] = arr1[i] + arr2[i]; }", "target_code": "void addVectors(const std::vector<int> &vec1, const std::vector<int> &vec2, std::vector<int> &result) { for(size_t i=0; i<vec1.size(); i++) result.push_back(vec1[i] + vec2[i]); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createDynamicArray(int size) { return (int*) malloc(size * sizeof(int)); }", "target_code": "int* createDynamicArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapValues(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapValues(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int calculateSum(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int calculateSum(const std::vector<int> &vec) { int sum = 0; for(int num : vec) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printStruct(Person *person) { printf(\"ID: %d, Name: %s\\n\", person->id, person->name); }", "target_code": "void printStruct(const Person &person) { std::cout << \"ID: \" << person.id << \", Name: \" << person.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int *arr, int size) { int *copy = (int*) malloc(size * sizeof(int)); for(int i=0; i<size; i++) copy[i] = arr[i]; return copy; }", "target_code": "std::vector<int> copyVector(const std::vector<int> &vec) { return vec; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeDynamicArray(int *arr) { free(arr); }", "target_code": "void freeDynamicArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void incrementValues(int *arr, int size) { for(int i=0; i<size; i++) arr[i]++; }", "target_code": "void incrementValues(std::vector<int> &vec) { for(int &num : vec) num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStructValues(Person *person) { return person->id + strlen(person->name); }", "target_code": "int sumStructValues(const Person &person) { return person.id + person.name.length(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(std::vector<int> &vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_sum(Point p) {\n    return p.x + p.y;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_sum(Point &p) {\n    return p.x + p.y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size() / 2; i++) {\n        int temp = vec[i];\n        vec[i] = vec[vec.size() - i - 1];\n        vec[vec.size() - i - 1] = temp;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\n\nint max(int &a, int &b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid insert_node(struct Node **head, int data) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = *head;\n    *head = new_node;\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid insert_node(Node *&head, int data) {\n    Node *new_node = new Node;\n    new_node->data = data;\n    new_node->next = head;\n    head = new_node;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_vector(std::vector<int> &vec) {\n    for (int i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int i = 0; i < vec.size(); i++) {\n        sum += vec[i];\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n\nint* create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(struct Point p) {\n    printf(\"(%d, %d)\\n\", p.x, p.y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid print_point(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    int left = 0;\n    int right = size - 1;\n    while (left < right) {\n        int temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n    int left = 0;\n    int right = vec.size() - 1;\n    while (left < right) {\n        int temp = vec[left];\n        vec[left] = vec[right];\n        vec[right] = temp;\n        left++;\n        right--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* merge_arrays(int arr1[], int size1, int arr2[], int size2) {\n    int* merged = (int*)malloc((size1 + size2) * sizeof(int));\n    int i, j;\n    for (i = 0; i < size1; i++) {\n        merged[i] = arr1[i];\n    }\n    for (j = 0; j < size2; j++) {\n        merged[i + j] = arr2[j];\n    }\n    return merged;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> merge_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2) {\n    std::vector<int> merged;\n    merged.reserve(vec1.size() + vec2.size());\n    merged.insert(merged.end(), vec1.begin(), vec1.end());\n    merged.insert(merged.end(), vec2.begin(), vec2.end());\n    return merged;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid print_linked_list(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nvoid print_linked_list(const Node* head) {\n    const Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"NULL\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int age;\n};\n\nvoid print_student_info(struct Student s) {\n    printf(\"Name: %s, Age: %d\\n\", s.name, s.age);\n}\n", "target_code": "#include <iostream>\n\nstruct Student {\n    std::string name;\n    int age;\n};\n\nvoid print_student_info(const Student& s) {\n    std::cout << \"Name: \" << s.name << \", Age: \" << s.age << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* copy_array(int arr[], int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> copy_vector(const std::vector<int>& vec) {\n    std::vector<int> copy(vec.begin(), vec.end());\n    return copy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *createIntArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Array;\n\nArray createArray(int size) {\n    Array arr;\n    arr.data = (int *)malloc(size * sizeof(int));\n    arr.size = size;\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nclass Array {\npublic:\n    std::vector<int> data;\n    int size;\n\n    Array(int size) : data(size), size(size) {}\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid incrementArray(int *arr, int size, int inc) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += inc;\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid incrementArray(std::vector<int> &arr, int inc) {\n    for (int &num : arr) {\n        num += inc;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    void print() {\n        std::cout << \"(\" << x << \", \" << y << \")\" << std::endl;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid doubleArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid doubleArray(std::vector<int> &arr) {\n    std::for_each(arr.begin(), arr.end(), [](int &num) {\n        num *= 2;\n    });\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\n// No es necesario, std::vector se libera automáticamente\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    } else {\n        return base * power(base, exponent - 1);\n    }\n}\n", "target_code": "#include <iostream>\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    } else {\n        return base * power(base, exponent - 1);\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseString(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nvoid reverseString(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* mergeArrays(int *arr1, int size1, int *arr2, int size2) {\n    int *result = (int*)malloc((size1 + size2) * sizeof(int));\n    memcpy(result, arr1, size1 * sizeof(int));\n    memcpy(result + size1, arr2, size2 * sizeof(int));\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeArrays(std::vector<int> &arr1, std::vector<int> &arr2) {\n    std::vector<int> result;\n    result.insert(result.end(), arr1.begin(), arr1.end());\n    result.insert(result.end(), arr2.begin(), arr2.end());\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getDistance(struct Point *p1, struct Point *p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}\n", "target_code": "#include <iostream>\n#include <cmath>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint getDistance(const Point &p1, const Point &p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* filterArray(int *arr, int size, int threshold, int &newSize) {\n    int *newArr = (int*)malloc(size * sizeof(int));\n    newSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] > threshold) {\n            newArr[newSize] = arr[i];\n            newSize++;\n        }\n    }\n    newArr = (int*)realloc(newArr, newSize * sizeof(int));\n    return newArr;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> filterArray(const std::vector<int> &arr, int threshold) {\n    std::vector<int> newArr;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > threshold) {\n            newArr.push_back(arr[i]);\n        }\n    }\n    return newArr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const std::vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << '\\n';\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint countDigits(int num) {\n    int count = 0;\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n    return count;\n}\n", "target_code": "#include <iostream>\n\nint countDigits(int num) {\n    return std::to_string(num).length();\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid deleteLinkedList(struct Node *head) {\n    struct Node *current = head;\n    struct Node *next;\n    while (current != NULL) {\n        next = current->next;\n        free(current);\n        current = next;\n    }\n}\n", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node *next;\n};\n\nvoid deleteLinkedList(Node *head) {\n    Node *current = head;\n    Node *next;\n    while (current != NULL) {\n        next = current->next;\n        delete current;\n        current = next;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sum_array(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sum_array(std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint *create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(struct Point *p1, struct Point *p2) {\n    return (p2->x - p1->x) * (p2->x - p1->x) + (p2->y - p1->y) * (p2->y - p1->y);\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint get_distance(const Point &p1, const Point &p2) {\n    return (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_array(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}\n", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint get_age(struct Person *p) {\n    return p->age;\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint get_age(const Person &p) {\n    return p.age;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copy_array(int *dest, int *src, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid copy_array(int *dest, const int *src, int size) {\n    std::copy(src, src + size, dest);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid print_array(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint *multiply_by_scalar(int *arr, int size, int scalar) {\n    int *result = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * scalar;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n\nstd::vector<int> multiply_by_scalar(const std::vector<int> &arr, int scalar) {\n    std::vector<int> result(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * scalar;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid free_array(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid free_array(int *arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int* num) { (*num)++; }", "target_code": "void increment(int& num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) { int result = 0; for(int i=0; i<size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(std::vector<int>& arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void* createIntArray(int size) { return malloc(size * sizeof(int)); }", "target_code": "int* createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(Point* p1, Point* p2) { Point temp = *p1; *p1 = *p2; *p2 = temp; }", "target_code": "void swap(Point& p1, Point& p2) { Point temp = p1; p1 = p2; p2 = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); } void freeIntArray(int* arr) { free(arr); }", "target_code": "int* createIntArray(int size) { return new int[size]; } void freeIntArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void setRectangleSize(Rectangle* rect, int w, int h) { rect->width = w; rect->height = h; }", "target_code": "struct Rectangle { int width; int height; }; void setRectangleSize(Rectangle& rect, int w, int h) { rect.width = w; rect.height = h; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createAndFillArray(int size, int value) { int* arr = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { arr[i] = value; } return arr; }", "target_code": "std::vector<int> createAndFillArray(int size, int value) { return std::vector<int>(size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *createArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid updatePoint(Point *p, int new_x, int new_y) {\n    p->x = new_x;\n    p->y = new_y;\n}\n", "target_code": "#include <iostream>\n\nvoid updatePoint(Point &p, int new_x, int new_y) {\n    p.x = new_x;\n    p.y = new_y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapPointers(int **ptr1, int **ptr2) {\n    int *temp = *ptr1;\n    *ptr1 = *ptr2;\n    *ptr2 = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapPointers(int* &ptr1, int* &ptr2) {\n    int* temp = ptr1;\n    ptr1 = ptr2;\n    ptr2 = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int *)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point *p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nvoid printPoint(const Point &p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void print_vector(std::vector<int>& vec) { for(int i=0; i<vec.size(); i++) std::cout << vec[i] << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Student;", "target_code": "struct Student { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(std::vector<int>& vec) { int sum = 0; for(int i=0; i<vec.size(); i++) sum += vec[i]; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void update_point(Point* p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void update_point(Point& p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int* arr, int size) { int start = 0; int end = size - 1; while (start < end) { swap(&arr[start], &arr[end]); start++; end--; } }", "target_code": "void reverse_vector(std::vector<int>& vec) { int start = 0; int end = vec.size() - 1; while (start < end) { swap(vec[start], vec[end]); start++; end--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copy_array(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) copy[i] = arr[i]; return copy; }", "target_code": "std::vector<int> copy_vector(std::vector<int>& vec) { std::vector<int> copy(vec.begin(), vec.end()); return copy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *num) { (*num)++; }", "target_code": "void increment(int &num) { num++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverseArray(std::vector<int> &arr) { for(int i=0; i<arr.size()/2; i++) { int temp = arr[i]; arr[i] = arr[arr.size()-1-i]; arr[arr.size()-1-i] = temp; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point createPoint(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point createPoint(int x, int y) { return Point{x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "int *createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int *arr) { free(arr); }", "target_code": "void freeArray(int *arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int *arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printIntArray(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for(int i=0; i<size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int> &arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int calculateArea(const Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int calculateArea(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *copyArray(int *arr, int size) { int *copy = (int *)malloc(size * sizeof(int)); for(int i=0; i<size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyArray(const std::vector<int> &arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(sizeof(int) * size); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for (int i = 0; i < arr.size(); i++) { std::cout << arr[i] << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modifyStruct(Point* p, int new_x, int new_y) { p->x = new_x; p->y = new_y; }", "target_code": "void modifyStruct(Point& p, int new_x, int new_y) { p.x = new_x; p.y = new_y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for (int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const int* src, int* dest, int size) { std::copy(src, src + size, dest); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* addArrays(int* arr1, int* arr2, int size) { int* result = (int*)malloc(sizeof(int) * size); for (int i = 0; i < size; i++) { result[i] = arr1[i] + arr2[i]; } return result; }", "target_code": "std::vector<int> addArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> result; for (int i = 0; i < arr1.size(); i++) { result.push_back(arr1[i] + arr2[i]); } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int getArraySum(int* arr, int size) { int sum = 0; for (int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int getArraySum(const std::vector<int>& arr) { int sum = 0; for (int i = 0; i < arr.size(); i++) { sum += arr[i]; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[50]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int n) { int total = 0; for(int i = 0; i < n; i++) { total += arr[i]; } return total; }", "target_code": "int sum(const std::vector<int>& arr) { int total = 0; for(int num : arr) { total += num; } return total; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student;", "target_code": "struct Student { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::vector<int> create_array(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_student(const Student* s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "void print_student(const Student& s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "N/A (No need for explicit memory management with std::vector in C++)"}
{"source_language": "C", "target_language": "C++", "source_code": "void initialize_array(int* arr, int n) { for(int i = 0; i < n; i++) { arr[i] = i; } }", "target_code": "void initialize_array(std::vector<int>& arr) { for(int i = 0; i < arr.size(); i++) { arr[i] = i; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) { if(n == 0) return 1; return n * factorial(n - 1); }", "target_code": "int factorial(int n) { if(n == 0) return 1; return n * factorial(n - 1); } // Recursive function in C++ is the same as in C"}
{"source_language": "C", "target_language": "C++", "source_code": "void modify_array(int* arr, int n) { for(int i = 0; i < n; i++) { arr[i] *= 2; } }", "target_code": "void modify_array(std::vector<int>& arr) { for(int& num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int count_elements(int* arr, int n, int target) { int count = 0; for(int i = 0; i < n; i++) { if(arr[i] == target) { count++; } } return count; }", "target_code": "int count_elements(const std::vector<int>& arr, int target) { int count = 0; for(int num : arr) { if(num == target) { count++; } } return count; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n\nint* createIntArray(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n\nvoid printIntArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid freeIntArray(int *arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeIntArray(int* arr) {\n    delete[] arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n} Employee;\n", "target_code": "#include <iostream>\n\nclass Employee {\npublic:\n    int id;\n    std::string name;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid reverseArray(std::vector<int>& arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addOneToArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] += 1;\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid addOneToArray(std::vector<int>& arr) {\n    for (int& num : arr) {\n        num += 1;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* copyArray(int *arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n", "target_code": "#include <iostream>\n\nstd::vector<int> copyArray(const std::vector<int>& arr) {\n    std::vector<int> copy;\n    for (int num : arr) {\n        copy.push_back(num);\n    }\n    return copy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    double radius;\n} Circle;\n\nvoid updateRadius(Circle *c, double new_radius) {\n    c->radius = new_radius;\n}\n", "target_code": "#include <iostream>\n\nclass Circle {\npublic:\n    double radius;\n    void updateRadius(double new_radius) {\n        radius = new_radius;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sum(int arr[], int size) {\n    int result = 0;\n    for(int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\nint sum(const std::vector<int> &arr) {\n    int result = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        result += arr[i];\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n", "target_code": "#include <iostream>\nint* create_array(int size) {\n    return new int[size];\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int x;\n    int y;\n} Point;\nint get_sum(Point p) {\n    return p.x + p.y;\n}\n", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    Point(int x_, int y_) : x(x_), y(y_) {}\n    int get_sum() {\n        return x + y;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\ntypedef struct {\n    int width;\n    int height;\n} Rectangle;\nint get_area(Rectangle* rect) {\n    return rect->width * rect->height;\n}\n", "target_code": "#include <iostream>\nclass Rectangle {\npublic:\n    int width;\n    int height;\n    Rectangle(int width_, int height_) : width(width_), height(height_) {}\n    int get_area() {\n        return width * height;\n    }\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverse_array(int* arr, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n", "target_code": "#include <iostream>\nvoid reverse_array(std::vector<int> &arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* duplicate_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i];\n    }\n    return new_arr;\n}\n", "target_code": "#include <iostream>\nstd::vector<int> duplicate_array(const std::vector<int> &arr) {\n    std::vector<int> new_arr;\n    for(int i = 0; i < arr.size(); i++) {\n        new_arr.push_back(arr[i]);\n    }\n    return new_arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "target_code": "#include <iostream>\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_array(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\nvoid print_array(const std::vector<int> &arr) {\n    for(int i = 0; i < arr.size(); i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n", "target_code": "#include <iostream>\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *x) { (*x)++; }", "target_code": "void increment(int &x) { x++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int array[], int size) { int result = 0; for(int i = 0; i < size; i++) { result += array[i]; } return result; }", "target_code": "int sum(const std::vector<int> &array) { int result = 0; for(int val : array) { result += val; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createIntArray(int size) { return (int*)malloc(sizeof(int) * size); }", "target_code": "int *createIntArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int *array) { free(array); }", "target_code": "void freeIntArray(int *array) { delete[] array; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int square(int x) { return x * x; }", "target_code": "int square(int x) { return x * x; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int *array, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", array[i]); } printf(\"\\n\"); }", "target_code": "void printIntArray(const std::vector<int> &array) { for(int val : array) { std::cout << val << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void setPersonName(Person *p, const char *name) { strcpy(p->name, name); }", "target_code": "void setPersonName(Person &p, const std::string &name) { p.name = name; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int *array, int size) { for(int i = 0; i < size; i++) { array[i] *= 2; } }", "target_code": "void doubleArray(std::vector<int> &array) { for(int &val : array) { val *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int* arr, int size) { int result = 0; for(int i = 0; i < size; i++) { result += arr[i]; } return result; }", "target_code": "int sum(const std::vector<int>& arr) { int result = 0; for(int num : arr) { result += num; } return result; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse(char* str) { int len = strlen(str); for(int i = 0, j = len-1; i < j; i++, j--) { char temp = str[i]; str[i] = str[j]; str[j] = temp; } }", "target_code": "void reverse(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[20]; } Person; void printPersonInfo(Person* p) { printf(\"ID: %d, Name: %s\\n\", p->id, p->name); }", "target_code": "struct Person { int id; std::string name; }; void printPersonInfo(const Person& p) { std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { int* arr = (int*)malloc(size * sizeof(int)); return arr; } void freeArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createArray(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; float distance(Point* p1, Point* p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { int x; int y; }; float distance(const Point& p1, const Point& p2) { return std::sqrt(std::pow(p2.x - p1.x, 2) + std::pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copyArray(int* src, int* dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copyArray(const std::vector<int>& src, std::vector<int>& dest) { std::copy(src.begin(), src.end(), dest.begin()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float radius; } Circle; float area(Circle* c) { return 3.14 * c->radius * c->radius; }", "target_code": "struct Circle { float radius; }; float area(const Circle& c) { return 3.14 * c.radius * c.radius; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* allocateInt() { int* num = (int*)malloc(sizeof(int)); return num; } void deallocateInt(int* num) { free(num); }", "target_code": "int* allocateInt() { return new int; } void deallocateInt(int* num) { delete num; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle* r) { return r->width * r->height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle& r) { return r.width * r.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i=0; i<size/2; i++) { int temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverse_array(std::vector<int> &arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point create_point(int x, int y) { Point p; p.x = x; p.y = y; return p; }", "target_code": "struct Point { int x; int y; }; Point create_point(int x, int y) { return {x, y}; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_memory(int *ptr) { free(ptr); } int* allocate_memory(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "void free_memory(int *ptr) { delete[] ptr; } int* allocate_memory(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i=0; i<size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; void set_dimensions(Rectangle *rect, int w, int h) { rect->width = w; rect->height = h; }", "target_code": "struct Rectangle { int width; int height; }; void set_dimensions(Rectangle &rect, int w, int h) { rect.width = w; rect.height = h; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int *src, int *dest, int size) { for(int i=0; i<size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array(const std::vector<int> &src, std::vector<int> &dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void double_values(int *arr, int size) { for(int i=0; i<size; i++) { arr[i] *= 2; } }", "target_code": "void double_values(std::vector<int> &arr) { for(int &num : arr) { num *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Employee; void print_employee(const Employee *emp) { printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name); }", "target_code": "struct Employee { int id; std::string name; }; void print_employee(const Employee &emp) { std::cout << \"ID: \" << emp.id << \", Name: \" << emp.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment_values(int *arr, int size) { for(int i=0; i<size; i++) { (*arr)++; arr++; } }", "target_code": "void increment_values(std::vector<int> &arr) { for(int &num : arr) { num++; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "int* createArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}", "target_code": "void printVector(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << ' ';\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int width;\n    int height;\n} Rectangle;", "target_code": "struct Rectangle {\n    int width;\n    int height;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createDynamicArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "std::vector<int> createDynamicArray(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sumVector(const std::vector<int>& vec) {\n    return std::accumulate(vec.begin(), vec.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializePerson(Person* p, int id, const char* name) {\n    p->id = id;\n    strcpy(p->name, name);\n}", "target_code": "void initializePerson(Person& p, int id, const std::string& name) {\n    p.id = id;\n    p.name = name;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int* data;\n    int size;\n} Array;", "target_code": "struct Array {\n    std::vector<int> data;\n    int size;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for (int i = 0; i < size; ++i) printf(\"%d \", arr[i]); }", "target_code": "void printArray(std::vector<int> arr) { for (int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for (int i = 0; i < size; ++i) sum += arr[i]; return sum; }", "target_code": "int sumArray(std::vector<int> arr) { int sum = 0; for (int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void initializePoint(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void initializePoint(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* doubleArray(int* arr, int size) { int* newArr = (int*)malloc(size * 2 * sizeof(int)); memcpy(newArr, arr, size * sizeof(int)); free(arr); return newArr; }", "target_code": "std::vector<int> doubleArray(const std::vector<int>& arr) { std::vector<int> newArr; newArr.reserve(arr.size() * 2); newArr.insert(newArr.end(), arr.begin(), arr.end()); return newArr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumStruct(Point* p) { return p->x + p->y; }", "target_code": "int sumStruct(const Point& p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void modifyStruct(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void modifyStruct(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "int sum_vector(const std::vector<int>& vec) {\n    int sum = 0;\n    for(int num : vec) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_ints(int* a, int* b) {\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}", "target_code": "void swap_ints(int& a, int& b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nint get_distance(const Point* p1, const Point* p2) {\n    return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2));\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\n\ndouble get_distance(const Point& p1, const Point& p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}\n\nvoid delete_array(int* arr) {\n    free(arr);\n}", "target_code": "std::vector<int> create_vector(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Employee;\n\nvoid print_employee(const Employee* emp) {\n    printf(\"ID: %d, Name: %s\\n\", emp->id, emp->name);\n}", "target_code": "struct Employee {\n    int id;\n    std::string name;\n    void print() const {\n        std::cout << \"ID: \" << id << \", Name: \" << name << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* double_array(int* arr, int size) {\n    int* new_arr = (int*)malloc(size * sizeof(int));\n    for(int i = 0; i < size; i++) {\n        new_arr[i] = arr[i] * 2;\n    }\n    return new_arr;\n}", "target_code": "std::vector<int> double_vector(const std::vector<int>& vec) {\n    std::vector<int> new_vec;\n    for(int num : vec) {\n        new_vec.push_back(num * 2);\n    }\n    return new_vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int width;\n    int height;\n} Rectangle;\n\nint get_area(const Rectangle* rect) {\n    return rect->width * rect->height;\n}", "target_code": "struct Rectangle {\n    int width;\n    int height;\n    int get_area() const {\n        return width * height;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* merge_arrays(int* arr1, int size1, int* arr2, int size2) {\n    int* merged = (int*)malloc((size1 + size2) * sizeof(int));\n    memcpy(merged, arr1, size1 * sizeof(int));\n    memcpy(merged + size1, arr2, size2 * sizeof(int));\n    return merged;\n}", "target_code": "std::vector<int> merge_vectors(const std::vector<int>& vec1, const std::vector<int>& vec2) {\n    std::vector<int> merged = vec1;\n    merged.insert(merged.end(), vec2.begin(), vec2.end());\n    return merged;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int* data;\n    int size;\n} Array;\n\nvoid print_array(const Array* arr) {\n    for(int i = 0; i < arr->size; i++) {\n        printf(\"%d \", arr->data[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "class Array {\npublic:\n    std::vector<int> data;\n\n    void print() const {\n        for(int num : data) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct(const Point* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i].x + arr[i].y;\n    }\n    return sum;\n}", "target_code": "int sum_struct(const std::vector<Point>& vec) {\n    int sum = 0;\n    for(const Point& p : vec) {\n        sum += p.x + p.y;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(struct Point p) {\n    printf(\"Point: %d, %d\\n\", p.x, p.y);\n}", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid printPoint(const Point &p) {\n    std::cout << \"Point: \" << p.x << \", \" << p.y << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* doubleArray(int *arr, int size) {\n    int *newArr = (int*)malloc(size * 2 * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newArr[i] = arr[i];\n        newArr[i + size] = arr[i];\n    }\n    free(arr);\n    return newArr;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> newArr(arr.begin(), arr.end());\n    newArr.insert(newArr.end(), arr.begin(), arr.end());\n    return newArr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(struct Rectangle rect) {\n    return rect.width * rect.height;\n}", "target_code": "#include <iostream>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint calculateArea(const Rectangle &rect) {\n    return rect.width * rect.height;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverseArray(int *arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <iostream>\n#include <algorithm>\n\nvoid reverseArray(int *arr, int size) {\n    std::reverse(arr, arr + size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}", "target_code": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n    return newNode;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyString(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}", "target_code": "#include <iostream>\n\nvoid copyString(char *dest, const char *src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* createArray(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printArray(const std::vector<int>& arr) { for(int num : arr) { std::cout << num << ' '; } std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeArray(int* arr) { free(arr); }", "target_code": "void freeArray(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person;", "target_code": "struct Person { std::string name; int age; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* duplicateArray(int* arr, int size) { int* duplicate = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { duplicate[i] = arr[i]; } return duplicate; }", "target_code": "std::vector<int> duplicateArray(const std::vector<int>& arr) { return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void clearArray(int* arr, int size) { for(int i = 0; i < size; i++) { arr[i] = 0; } }", "target_code": "void clearArray(std::vector<int>& arr) { std::fill(arr.begin(), arr.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPersonInfo(Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "void printPersonInfo(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "void swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int arr[], int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "int sum(const std::vector<int>& arr) {\n    int result = 0;\n    for (int elem : arr) {\n        result += elem;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int id;\n    char name[50];\n} Person;", "target_code": "struct Person {\n    int id;\n    std::string name;\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "int* createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) {\n    free(arr);\n}", "target_code": "void freeIntArray(int* arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void printPerson(const Person* p) {\n    printf(\"ID: %d, Name: %s\\n\", p->id, p->name);\n}", "target_code": "void printPerson(const Person& p) {\n    std::cout << \"ID: \" << p.id << \", Name: \" << p.name << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArrayElements(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "void doubleArrayElements(std::vector<int>& arr) {\n    for (int& elem : arr) {\n        elem *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "std::vector<int> copyArray(const std::vector<int>& arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "target_code": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createAndInitArray(int size, int value) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}", "target_code": "std::vector<int> createAndInitArray(int size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "int* create_array(int size) { return new int[size]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int* arr, int size) { for(int i=0; i<size; i++) printf(\"%d \", arr[i]); }", "target_code": "void print_array(const std::vector<int>& arr) { for(int num : arr) std::cout << num << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_array(int* arr) { free(arr); }", "target_code": "void free_array(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i=0; i<size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_array(const std::vector<int>& arr) { int sum = 0; for(int num : arr) sum += num; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle;", "target_code": "struct Rectangle { int width; int height; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void update_rectangle(Rectangle* r, int new_width, int new_height) { r->width = new_width; r->height = new_height; }", "target_code": "void update_rectangle(Rectangle& r, int new_width, int new_height) { r.width = new_width; r.height = new_height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* double_array(int* arr, int size) { int* doubled = (int*)malloc(size * sizeof(int)); for(int i=0; i<size; i++) doubled[i] = arr[i] * 2; return doubled; }", "target_code": "std::vector<int> double_array(const std::vector<int>& arr) { std::vector<int> doubled; for(int num : arr) doubled.push_back(num * 2); return doubled; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max(int a, int b) { return a > b ? a : b; }", "target_code": "int max(int a, int b) { return std::max(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nvoid setPoint(Point *p, int x, int y) {\n    p->x = x;\n    p->y = y;\n}\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nvoid setPoint(Point &p, int x, int y) {\n    p.x = x;\n    p.y = y;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    char name[20];\n} Person;\n\nPerson* createPerson(int id, const char *name) {\n    Person *p = (Person*)malloc(sizeof(Person));\n    p->id = id;\n    strcpy(p->name, name);\n    return p;\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nstruct Person {\n    int id;\n    std::string name;\n};\n\nPerson* createPerson(int id, const std::string &name) {\n    Person *p = new Person;\n    p->id = id;\n    p->name = name;\n    return p;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeMemory(void *ptr) {\n    free(ptr);\n}\n", "target_code": "#include <iostream>\n\nvoid freeMemory(void *ptr) {\n    delete ptr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int> &arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumArray(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* doubleArray(int *arr, int size) {\n    int *result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> doubleArray(const std::vector<int> &arr) {\n    std::vector<int> result(arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        result[i] = arr[i] * 2;\n    }\n    return result;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n", "target_code": "#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint square(int num) {\n    return num * num;\n}\n", "target_code": "#include <iostream>\n\nint square(int num) {\n    return num * num;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_c(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_cpp(std::vector<int>& arr) { int sum = 0; for(int num : arr) { sum += num; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_c(char *str) { int length = strlen(str); for(int i = 0; i < length / 2; i++) { char temp = str[i]; str[i] = str[length - i - 1]; str[length - i - 1] = temp; } }", "target_code": "void reverse_cpp(std::string& str) { std::reverse(str.begin(), str.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int distance_c(Point *p1, Point *p2) { return sqrt(pow(p2->x - p1->x, 2) + pow(p2->y - p1->y, 2)); }", "target_code": "struct Point { int x; int y; }; int distance_cpp(const Point& p1, const Point& p2) { return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2)); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array_c(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_array_cpp(const std::vector<int>& src, std::vector<int>& dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array_c(int size) { return (int*)malloc(size * sizeof(int)); } void free_array_c(int *arr) { free(arr); }", "target_code": "int* create_array_cpp(int size) { return new int[size]; } void free_array_cpp(int* arr) { delete[] arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Student; void print_student_c(Student *s) { printf(\"ID: %d, Name: %s\\n\", s->id, s->name); }", "target_code": "struct Student { int id; std::string name; }; void print_student_cpp(const Student& s) { std::cout << \"ID: \" << s.id << \", Name: \" << s.name << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void bubble_sort_c(int *arr, int size) { for(int i = 0; i < size - 1; i++) { for(int j = 0; j < size - i - 1; j++) { if(arr[j] > arr[j+1]) { int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } } }", "target_code": "void bubble_sort_cpp(std::vector<int>& arr) { std::sort(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area_c(Rectangle *r) { return r->width * r->height; }", "target_code": "struct Rectangle { int width; int height; }; int area_cpp(const Rectangle& r) { return r.width * r.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void uppercase_c(char *str) { for(int i = 0; str[i]; i++) { str[i] = toupper(str[i]); } }", "target_code": "void uppercase_cpp(std::string& str) { std::transform(str.begin(), str.end(), str.begin(), ::toupper); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *merge_arrays_c(int *arr1, int size1, int *arr2, int size2) { int *merged = (int*)malloc((size1 + size2) * sizeof(int)); memcpy(merged, arr1, size1 * sizeof(int)); memcpy(merged + size1, arr2, size2 * sizeof(int)); return merged; }", "target_code": "std::vector<int> merge_arrays_cpp(const std::vector<int>& arr1, const std::vector<int>& arr2) { std::vector<int> merged = arr1; merged.insert(merged.end(), arr2.begin(), arr2.end()); return merged; }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <iostream>\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverseArray(int arr[], int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid reverseVector(std::vector<int> &vec) {\n    int start = 0;\n    int end = vec.size() - 1;\n    while (start < end) {\n        int temp = vec[start];\n        vec[start] = vec[end];\n        vec[end] = temp;\n        start++;\n        end--;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Point {\n    int x;\n    int y;\n};\nvoid printPoint(struct Point p) {\n    printf(\"%d %d\\n\", p.x, p.y);\n}", "target_code": "#include <iostream>\nclass Point {\npublic:\n    int x;\n    int y;\n    void print() {\n        std::cout << x << \" \" << y << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createIntArray(int size) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <iostream>\nint* createIntArray(int size) {\n    return new int[size];\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid freeIntArray(int *arr) {\n    free(arr);\n}", "target_code": "#include <iostream>\nvoid freeIntArray(int *arr) {\n    delete[] arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint sum(const int *arr, int size) {\n    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result += arr[i];\n    }\n    return result;\n}", "target_code": "#include <iostream>\nint sum(const std::vector<int> &vec) {\n    int result = 0;\n    for (int num : vec) {\n        result += num;\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nstruct Student {\n    char name[50];\n    int age;\n};\nvoid printStudent(struct Student *stu) {\n    printf(\"Name: %s, Age: %d\\n\", stu->name, stu->age);\n}", "target_code": "#include <iostream>\n#include <string>\nclass Student {\npublic:\n    std::string name;\n    int age;\n    void print() {\n        std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n    }\n};"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid doubleArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        arr[i] *= 2;\n    }\n}", "target_code": "#include <iostream>\nvoid doubleVector(std::vector<int> &vec) {\n    for (int &num : vec) {\n        num *= 2;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint* createAndInitArray(int size, int value) {\n    int *arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}", "target_code": "#include <iostream>\nstd::vector<int> createAndInitVector(int size, int value) {\n    std::vector<int> vec(size, value);\n    return vec;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid copyArray(int *src, int *dest, int size) {\n    for (int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}", "target_code": "#include <iostream>\nvoid copyVector(const std::vector<int> &src, std::vector<int> &dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid swapIntegers(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n", "target_code": "#include <iostream>\n\nvoid swapIntegers(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createIntArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createIntArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n", "target_code": "#include <iostream>\n\nstruct Point {\n    int x;\n    int y;\n};\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printIntArray(int* arr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printIntArray(const std::vector<int>& arr) {\n    for(const auto& elem : arr) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeIntArray(int* arr) {\n    free(arr);\n}\n", "target_code": "#include <iostream>\n\n// No need for manual memory management with std::vector in C++\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid addPoint(Point* p, int dx, int dy) {\n    p->x += dx;\n    p->y += dy;\n}\n", "target_code": "#include <iostream>\n\nvoid addPoint(Point& p, int dx, int dy) {\n    p.x += dx;\n    p.y += dy;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid copyIntArray(int* src, int* dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n", "target_code": "#include <iostream>\n\nvoid copyIntArray(const int* src, int* dest, int size) {\n    for(int i = 0; i < size; i++) {\n        dest[i] = src[i];\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPoint(Point* p) {\n    printf(\"(%d, %d)\\n\", p->x, p->y);\n}\n", "target_code": "#include <iostream>\n\nvoid printPoint(const Point& p) {\n    std::cout << \"(\" << p.x << \", \" << p.y << \")\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint sumIntArray(int* arr, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nint sumIntArray(const std::vector<int>& arr) {\n    int sum = 0;\n    for(const auto& elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nint* createDynamicArray(int size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createDynamicArray(int size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "void sumArray(int* arr, int size, int* result) { *result = 0; for(int i = 0; i < size; i++) { *result += arr[i]; } }", "target_code": "void sumVector(const std::vector<int>& vec, int& result) { result = 0; for(int i = 0; i < vec.size(); i++) { result += vec[i]; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swapIntegers(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swapIntegers(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void printPoint(Point* p) { printf(\"(%d, %d)\\n\", p->x, p->y); }", "target_code": "struct Point { int x; int y; }; void printPoint(const Point& p) { std::cout << \"(\" << p.x << \", \" << p.y << \")\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createArray(int size) { return (int*)malloc(size * sizeof(int)); } void deleteArray(int* arr) { free(arr); }", "target_code": "std::vector<int> createVector(int size) { return std::vector<int>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int getArea(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int getArea(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int* arr, int size) { int i = 0, j = size - 1; while(i < j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; i++; j--; } }", "target_code": "void reverseVector(std::vector<int>& vec) { int i = 0, j = vec.size() - 1; while(i < j) { int temp = vec[i]; vec[i] = vec[j]; vec[j] = temp; i++; j--; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void doubleArrayValues(Array* arr) { for(int i = 0; i < arr->size; i++) { arr->data[i] *= 2; } }", "target_code": "class Array { std::vector<int> data; public: void doubleValues() { for(int i = 0; i < data.size(); i++) { data[i] *= 2; } } };"}
{"source_language": "C", "target_language": "C++", "source_code": "int* copyArray(int* arr, int size) { int* copy = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { copy[i] = arr[i]; } return copy; }", "target_code": "std::vector<int> copyVector(const std::vector<int>& vec) { return std::vector<int>(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; void freeArray(Array* arr) { free(arr->data); }", "target_code": "class Array { std::vector<int> data; public: ~Array() { data.clear(); } };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printIntArray(int* arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int>& vec) { for(int i = 0; i < vec.size(); i++) { std::cout << vec[i] << \" \"; } std::cout << \"\\n\"; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int* arr, int size) { int sum = 0; for(int i = 0; i < size; ++i) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int>& vec) { int sum = 0; for(const auto& elem : vec) { sum += elem; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; Point* create_point(int x, int y) { Point* p = (Point*)malloc(sizeof(Point)); p->x = x; p->y = y; return p; } void destroy_point(Point* p) { free(p); }", "target_code": "struct Point { int x; int y; }; std::unique_ptr<Point> create_point(int x, int y) { return std::make_unique<Point>(x, y); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int& a, int& b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return (int*)malloc(size * sizeof(int)); } void fill_array(int* arr, int size, int value) { for(int i = 0; i < size; ++i) { arr[i] = value; } }", "target_code": "std::unique_ptr<int[]> create_array(int size) { return std::make_unique<int[]>(size); } void fill_array(int* arr, int size, int value) { std::fill(arr, arr + size, value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area(Rectangle* rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area(const Rectangle& rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_dynamic_array(int size) { return (int*)malloc(size * sizeof(int)); } void free_dynamic_array(int* arr) { free(arr); }", "target_code": "std::unique_ptr<int[]> create_dynamic_array(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { float x; float y; } Vector; void normalize(Vector* vec) { float length = sqrt(vec->x * vec->x + vec->y * vec->y); vec->x /= length; vec->y /= length; }", "target_code": "struct Vector { float x; float y; }; void normalize(Vector& vec) { float length = std::sqrt(vec.x * vec.x + vec.y * vec.y); vec.x /= length; vec.y /= length; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person; void print_person(const Person* p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person(const Person& p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int* data; int size; } Array; int get_element(const Array* arr, int index) { return arr->data[index]; }", "target_code": "struct Array { std::vector<int> data; }; int get_element(const Array& arr, int index) { return arr.data[index]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int square(int x) { return x * x; }", "target_code": "int square(int x) { return x * x; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_vector(const std::vector<int> &vec) { int sum = 0; for(const auto &elem : vec) { sum += elem; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; void move_point(Point *p, int dx, int dy) { p->x += dx; p->y += dy; }", "target_code": "struct Point { int x; int y; }; void move_point(Point &p, int dx, int dy) { p.x += dx; p.y += dy; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { int *arr = (int *)malloc(size * sizeof(int)); return arr; } void delete_array(int *arr) { free(arr); }", "target_code": "std::unique_ptr<int[]> create_vector(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle; int area_rectangle(Rectangle *rect) { return rect->width * rect->height; }", "target_code": "struct Rectangle { int width; int height; }; int area_rectangle(const Rectangle &rect) { return rect.width * rect.height; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap_values(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap_values(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-1-i]; arr[size-1-i] = temp; } }", "target_code": "void reverse_vector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person; void print_person(const Person *p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void print_person(const Person &p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array_zeros(int size) { int *arr = (int *)calloc(size, sizeof(int)); return arr; }", "target_code": "std::unique_ptr<int[]> create_vector_zeros(int size) { return std::make_unique<int[]>(size)(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; float price; } Product; float get_price(const Product *p) { return p->price; }", "target_code": "struct Product { int id; float price; }; float get_price(const Product &p) { return p.price; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int *src, int *dest, int size) { for(int i = 0; i < size; i++) { dest[i] = src[i]; } }", "target_code": "void copy_vector(const std::vector<int> &src, std::vector<int> &dest) { dest = src; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(std::unique_ptr<int>& a, std::unique_ptr<int>& b) { int temp = *a; *a = *b; *b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sum_vector(const std::vector<int>& arr) { int sum = 0; for(const auto& i : arr) sum += i; return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "Point* create_point(int x, int y) { Point* p = malloc(sizeof(Point)); p->x = x; p->y = y; return p; }", "target_code": "std::unique_ptr<Point> create_point(int x, int y) { return std::make_unique<Point>(x, y); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); }", "target_code": "void print_vector(const std::vector<int>& arr) { for(const auto& i : arr) std::cout << i << ' '; std::cout << std::endl; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* create_array(int size) { return malloc(size * sizeof(int)); }", "target_code": "std::unique_ptr<int[]> create_array(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void free_point(Point* p) { free(p); }", "target_code": "// No es necesario, el puntero inteligente se encargará de liberar la memoria automáticamente."}
{"source_language": "C", "target_language": "C++", "source_code": "void reverse_array(int *arr, int size) { for(int i = 0; i < size / 2; i++) { int temp = arr[i]; arr[i] = arr[size - i - 1]; arr[size - i - 1] = temp; } }", "target_code": "void reverse_vector(std::vector<int>& arr) { std::reverse(arr.begin(), arr.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void copy_array(int *src, int *dest, int size) { for(int i = 0; i < size; i++) dest[i] = src[i]; }", "target_code": "void copy_vector(const std::vector<int>& src, std::vector<int>& dest) { std::copy(src.begin(), src.end(), dest.begin()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int width; int height; } Rectangle;", "target_code": "struct Rectangle { int width; int height; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void increment(int *num) { (*num)++; }", "target_code": "void increment(std::unique_ptr<int> &num) { (*num)++; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_array(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sum_array(const std::vector<int> &arr) { int sum = 0; for(const auto &elem : arr) { sum += elem; } return sum; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int id; char name[50]; } Person;", "target_code": "struct Person { int id; std::string name; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_array(int size) { return (int *)malloc(size * sizeof(int)); }", "target_code": "std::unique_ptr<int[]> create_array(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int max(int a, int b) { return (a > b) ? a : b; }", "target_code": "int max(const int &a, const int &b) { return (a > b) ? a : b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void print_array(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void print_array(const std::vector<int> &arr) { for(const auto &elem : arr) { std::cout << elem << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point;", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "int *create_and_initialize(int value) { int *ptr = (int *)malloc(sizeof(int)); *ptr = value; return ptr; }", "target_code": "std::unique_ptr<int> create_and_initialize(int value) { return std::make_unique<int>(value); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum_struct_fields(Person *p) { return p->id + strlen(p->name); }", "target_code": "int sum_struct_fields(const Person &p) { return p.id + p.name.size(); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int* a, int* b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(std::unique_ptr<int>& a, std::unique_ptr<int>& b) { int temp = *a; *a = *b; *b = temp; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArray(int size) { return (int*)malloc(size * sizeof(int)); }", "target_code": "std::unique_ptr<int[]> createIntArray(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "struct Point { int x; int y; };", "target_code": "struct Point { int x; int y; };"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int* arr, int size) { for(int i = 0; i < size; i++) printf(\"%d \", arr[i]); }", "target_code": "void printArray(const std::vector<int>& arr) { for(const auto& elem : arr) std::cout << elem << ' '; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void freeIntArray(int* arr) { free(arr); }", "target_code": "N/A (no need to manually free memory with smart pointers)"}
{"source_language": "C", "target_language": "C++", "source_code": "void multiplyMatrix(int** mat1, int** mat2, int** result, int rows1, int cols1, int cols2) { for(int i = 0; i < rows1; i++) for(int j = 0; j < cols2; j++) { result[i][j] = 0; for(int k = 0; k < cols1; k++) result[i][j] += mat1[i][k] * mat2[k][j]; } }", "target_code": "void multiplyMatrix(const std::vector<std::vector<int>>& mat1, const std::vector<std::vector<int>>& mat2, std::vector<std::vector<int>>& result) { int rows1 = mat1.size(); int cols1 = mat1[0].size(); int cols2 = mat2[0].size(); result.resize(rows1, std::vector<int>(cols2, 0)); for(int i = 0; i < rows1; i++) for(int j = 0; j < cols2; j++) for(int k = 0; k < cols1; k++) result[i][j] += mat1[i][k] * mat2[k][j]; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int* arr, int size) { int sum = 0; for(int i = 0; i < size; i++) sum += arr[i]; return sum; }", "target_code": "int sumArray(const std::vector<int>& arr) { return std::accumulate(arr.begin(), arr.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void updatePoint(Point* p, int x, int y) { p->x = x; p->y = y; }", "target_code": "void updatePoint(Point& p, int x, int y) { p.x = x; p.y = y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void insertValue(int* arr, int index, int value, int size) { if(index >= 0 && index < size) arr[index] = value; }", "target_code": "void insertValue(std::vector<int>& arr, int index, int value) { if(index >= 0 && index < arr.size()) arr[index] = value; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int* createIntArrayWithValue(int size, int value) { int* arr = (int*)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) arr[i] = value; return arr; }", "target_code": "std::unique_ptr<int[]> createIntArrayWithValue(int size, int value) { auto arr = std::make_unique<int[]>(size); std::fill(arr.get(), arr.get() + size, value); return arr; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sum(int *a, int *b) { return *a + *b; }", "target_code": "int sum(std::unique_ptr<int> &a, std::unique_ptr<int> &b) { return *a + *b; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void reverseArray(int *arr, int size) { for(int i = 0; i < size/2; i++) { int temp = arr[i]; arr[i] = arr[size-i-1]; arr[size-i-1] = temp; } }", "target_code": "void reverseVector(std::vector<int> &vec) { std::reverse(vec.begin(), vec.end()); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { int x; int y; } Point; int getSum(Point p) { return p.x + p.y; }", "target_code": "struct Point { int x; int y; }; int getSum(const Point &p) { return p.x + p.y; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createArray(int size) { return (int *)malloc(size * sizeof(int)); } void freeArray(int *arr) { free(arr); }", "target_code": "std::unique_ptr<int[]> createArray(int size) { return std::make_unique<int[]>(size); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }", "target_code": "void swap(int &a, int &b) { std::swap(a, b); }"}
{"source_language": "C", "target_language": "C++", "source_code": "int *createAndInitializeArray(int size, int initialValue) { int *arr = (int *)malloc(size * sizeof(int)); for(int i = 0; i < size; i++) { arr[i] = initialValue; } return arr; }", "target_code": "std::vector<int> createAndInitializeVector(int size, int initialValue) { return std::vector<int>(size, initialValue); }"}
{"source_language": "C", "target_language": "C++", "source_code": "void printArray(int *arr, int size) { for(int i = 0; i < size; i++) { printf(\"%d \", arr[i]); } printf(\"\\n\"); }", "target_code": "void printVector(const std::vector<int> &vec) { for(const auto &element : vec) { std::cout << element << ' '; } std::cout << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "int sumArray(int *arr, int size) { int sum = 0; for(int i = 0; i < size; i++) { sum += arr[i]; } return sum; }", "target_code": "int sumVector(const std::vector<int> &vec) { return std::accumulate(vec.begin(), vec.end(), 0); }"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct { char name[20]; int age; } Person; void printPerson(Person *p) { printf(\"Name: %s, Age: %d\\n\", p->name, p->age); }", "target_code": "struct Person { std::string name; int age; }; void printPerson(const Person &p) { std::cout << \"Name: \" << p.name << \", Age: \" << p.age << '\\n'; }"}
{"source_language": "C", "target_language": "C++", "source_code": "void doubleArray(int *arr, int size) { for(int i = 0; i < size; i++) { arr[i] *= 2; } }", "target_code": "void doubleVector(std::vector<int> &vec) { for(auto &element : vec) { element *= 2; } }"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <vector>\n#include <iostream>\n\nvoid print_array(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    char* result = (char*)malloc(strlen(s1) + strlen(s2) + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_initialized_array(int size, int value) {\n    int* array = (int*)malloc(size * sizeof(int));\n    if (array) {\n        for (int i = 0; i < size; ++i) {\n            array[i] = value;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_initialized_array(int size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* copy_array(int* arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    if (copy) {\n        for (int i = 0; i < size; ++i) {\n            copy[i] = arr[i];\n        }\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int>& arr) {\n    return std::vector<int>(arr);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(const char* str) {\n    int len = strlen(str);\n    char* rev = (char*)malloc(len + 1);\n    if (rev) {\n        for (int i = 0; i < len; ++i) {\n            rev[i] = str[len - i - 1];\n        }\n        rev[len] = '\\0';\n    }\n    return rev;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_matrix(int** matrix, int rows, int cols) {\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}", "target_code": "#include <vector>\n#include <iostream>\n\nvoid print_matrix(const std::vector<std::vector<int>>& matrix) {\n    for (const auto& row : matrix) {\n        for (int num : row) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> array(size);\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* new_str = (char*)malloc(strlen(str) + 1);\n    strcpy(new_str, str);\n    return new_str;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int* array, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& array) {\n    for (int val : array) {\n        std::cout << val << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int value;\n    struct Node* next;\n};\n\nstruct Node* create_node(int value) {\n    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\n    node->value = value;\n    node->next = NULL;\n    return node;\n}", "target_code": "#include <memory>\n\nstruct Node {\n    int value;\n    std::shared_ptr<Node> next;\n    Node(int val) : value(val), next(nullptr) {}\n};\n\nstd::shared_ptr<Node> create_node(int value) {\n    return std::make_shared<Node>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid concat_strings(char* dest, const char* src) {\n    while (*dest) dest++;\n    while (*src) *dest++ = *src++;\n    *dest = '\\0';\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* allocate_and_initialize(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = 0;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_initialize(int size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& array) {\n    int sum = 0;\n    for (int val : array) {\n        sum += val;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& str) {\n    return str.length();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(const char* str) {\n    int len = strlen(str);\n    char* rev = (char*)malloc(len + 1);\n    for (int i = 0; i < len; ++i) {\n        rev[i] = str[len - i - 1];\n    }\n    rev[len] = '\\0';\n    return rev;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *duplicate_string(const char *s) {\n    char *dup = (char *)malloc(strlen(s) + 1);\n    if (dup) {\n        strcpy(dup, s);\n    }\n    return dup;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string &s) {\n    return std::string(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *allocate_array(size_t n) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(size_t n) {\n    return std::vector<int>(n);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]> &ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *create_integer() {\n    int *ptr = (int *)malloc(sizeof(int));\n    return ptr;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> create_integer() {\n    return std::make_unique<int>();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar *concatenate_strings(const char *s1, const char *s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char *result = malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string &s1, const std::string &s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *substring(const char *s, size_t start, size_t length) {\n    char *sub = (char *)malloc(length + 1);\n    if (sub) {\n        strncpy(sub, s + start, length);\n        sub[length] = '\\0';\n    }\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string &s, size_t start, size_t length) {\n    return s.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int *arr, size_t n) {\n    for (size_t i = 0; i < n; ++i) {\n        arr[i] = 0;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int> &arr) {\n    std::fill(arr.begin(), arr.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int *arr, size_t n) {\n    for (size_t i = 0; i < n / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[n - i - 1];\n        arr[n - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *copy_array(const char *arr, size_t n) {\n    char *copy = (char *)malloc(n);\n    if (copy) {\n        memcpy(copy, arr, n);\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<char> copy_array(const std::vector<char> &arr) {\n    return std::vector<char>(arr);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(const int *arr, size_t n) {\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int> &arr) {\n    return std::accumulate(arr.begin(), arr.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* s) {\n    char* copy = (char*)malloc(strlen(s) + 1);\n    if (copy) {\n        strcpy(copy, s);\n    }\n    return copy;\n}", "target_code": "#include <memory>\n#include <string>\n\nstd::unique_ptr<std::string> duplicate_string(const std::string& s) {\n    return std::make_unique<std::string>(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* a, const char* b) {\n    return strcmp(a, b);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& a, const std::string& b) {\n    return a.compare(b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_integer() {\n    int* ptr = (int*)malloc(sizeof(int));\n    return ptr;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> allocate_integer() {\n    return std::make_unique<int>();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid concatenate_strings(char* dest, const char* src) {\n    strcat(dest, src);\n}", "target_code": "#include <string>\n\nvoid concatenate_strings(std::string& dest, const std::string& src) {\n    dest += src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_numbers(int* numbers, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d\\n\", numbers[i]);\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_numbers(const std::vector<int>& numbers) {\n    for (const auto& number : numbers) {\n        std::cout << number << std::endl;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* create_buffer(size_t size) {\n    char* buffer = (char*)malloc(size);\n    return buffer;\n}", "target_code": "#include <vector>\n\nstd::vector<char> create_buffer(size_t size) {\n    return std::vector<char>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* append_character(char* s, char c) {\n    size_t len = strlen(s);\n    s = (char*)realloc(s, len + 2);\n    s[len] = c;\n    s[len + 1] = '\\0';\n    return s;\n}", "target_code": "#include <string>\n\nvoid append_character(std::string& s, char c) {\n    s += c;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(char* s) {\n    size_t len = strlen(s);\n    char* reversed = (char*)malloc(len + 1);\n    if (reversed) {\n        for (size_t i = 0; i < len; ++i) {\n            reversed[i] = s[len - i - 1];\n        }\n        reversed[len] = '\\0';\n    }\n    return reversed;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& s) {\n    return std::string(s.rbegin(), s.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    if (array) {\n        for (size_t i = 0; i < size; ++i) {\n            array[i] = 0;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid allocate_and_fill(int** array, size_t size) {\n    *array = (int*)malloc(size * sizeof(int));\n    if (*array) {\n        for (size_t i = 0; i < size; ++i) {\n            (*array)[i] = i;\n        }\n    }\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_fill(size_t size) {\n    std::vector<int> array(size);\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* reverse_string(const char* str) {\n    size_t len = strlen(str);\n    char* reversed = (char*)malloc(len + 1);\n    if (reversed) {\n        for (size_t i = 0; i < len; ++i) {\n            reversed[i] = str[len - 1 - i];\n        }\n        reversed[len] = '\\0';\n    }\n    return reversed;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint matrix_sum(int** matrix, size_t rows, size_t cols) {\n    int sum = 0;\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint matrix_sum(const std::vector<std::vector<int>>& matrix) {\n    int sum = 0;\n    for (const auto& row : matrix) {\n        for (int value : row) {\n            sum += value;\n        }\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid copy_array(int* src, int* dest, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        dest[i] = src[i];\n    }\n}", "target_code": "#include <vector>\n\nvoid copy_array(const std::vector<int>& src, std::vector<int>& dest) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar** split_string(const char* str, char delimiter, int* count) {\n    *count = 1;\n    for (const char* p = str; *p; ++p) {\n        if (*p == delimiter) {\n            (*count)++;\n        }\n    }\n    char** result = (char**)malloc(*count * sizeof(char*));\n    if (result) {\n        size_t idx = 0;\n        const char* start = str;\n        for (const char* p = str; ; ++p) {\n            if (*p == delimiter || *p == '\\0') {\n                size_t len = p - start;\n                result[idx] = (char*)malloc(len + 1);\n                if (result[idx]) {\n                    strncpy(result[idx], start, len);\n                    result[idx][len] = '\\0';\n                }\n                idx++;\n                start = p + 1;\n                if (*p == '\\0') {\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}", "target_code": "#include <string>\n#include <vector>\n#include <sstream>\n\nstd::vector<std::string> split_string(const std::string& str, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string item;\n    while (std::getline(ss, item, delimiter)) {\n        result.push_back(item);\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_matrix(int** matrix, size_t rows) {\n    for (size_t i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\n\nvoid free_matrix(std::vector<std::vector<int>>& matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    size_t len = strlen(str);\n    char* copy = (char*)malloc(len + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* find_max(int* array, size_t size) {\n    if (size == 0) return NULL;\n    int* max = &array[0];\n    for (size_t i = 1; i < size; ++i) {\n        if (array[i] > *max) {\n            max = &array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n\nint* find_max(std::vector<int>& array) {\n    if (array.empty()) return nullptr;\n    return &*std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> createArray(int size) {\n    std::vector<int> array(size);\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* concatStrings(const char* str1, const char* str2) {\n    char* result = malloc(strlen(str1) + strlen(str2) + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstd::string concatStrings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid printArray(int* array, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int>& array) {\n    for (int num : array) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicateArray(int* array, int size) {\n    int* newArray = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        newArray[i] = array[i];\n    }\n    return newArray;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> duplicateArray(const std::vector<int>& array) {\n    return std::vector<int>(array);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* reverseString(const char* str) {\n    int len = strlen(str);\n    char* reversed = (char*)malloc(len + 1);\n    for (int i = 0; i < len; ++i) {\n        reversed[i] = str[len - 1 - i];\n    }\n    reversed[len] = '\\0';\n    return reversed;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sumArray(int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nint sumArray(const std::vector<int>& array) {\n    int sum = 0;\n    for (int num : array) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* toUpperCase(const char* str) {\n    char* upperStr = (char*)malloc(strlen(str) + 1);\n    for (int i = 0; str[i]; ++i) {\n        upperStr[i] = toupper(str[i]);\n    }\n    upperStr[strlen(str)] = '\\0';\n    return upperStr;\n}", "target_code": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string toUpperCase(const std::string& str) {\n    std::string upperStr = str;\n    std::transform(upperStr.begin(), upperStr.end(), upperStr.begin(), ::toupper);\n    return upperStr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* filterEvenNumbers(int* array, int size, int* newSize) {\n    int* result = (int*)malloc(size * sizeof(int));\n    *newSize = 0;\n    for (int i = 0; i < size; ++i) {\n        if (array[i] % 2 == 0) {\n            result[(*newSize)++] = array[i];\n        }\n    }\n    return result;\n}", "target_code": "#include <iostream>\n#include <vector>\n\nstd::vector<int> filterEvenNumbers(const std::vector<int>& array) {\n    std::vector<int> result;\n    for (int num : array) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* str, int start, int length) {\n    char* sub = (char*)malloc(length + 1);\n    strncpy(sub, str + start, length);\n    sub[length] = '\\0';\n    return sub;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstd::string substring(const std::string& str, int start, int length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid freeArray(int* array) {\n    free(array);\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid freeArray(std::vector<int>& array) {\n    array.clear();\n    array.shrink_to_fit();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_message(const char* message) {\n    printf(\"%s\\n\", message);\n}", "target_code": "#include <iostream>\n\nvoid print_message(const std::string& message) {\n    std::cout << message << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    if (ptr) {\n        free(ptr);\n    }\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* append_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string append_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_and_initialize(int n, int value) {\n    int* array = (int*)malloc(n * sizeof(int));\n    if (array) {\n        for (int i = 0; i < n; ++i) {\n            array[i] = value;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_initialize(int n, int value) {\n    return std::vector<int>(n, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate_with_space(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 2);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, \" \");\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_with_space(const std::string& str1, const std::string& str2) {\n    return str1 + \" \" + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nfloat* create_float_array(int size) {\n    float* arr = (float*)malloc(size * sizeof(float));\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<float> create_float_array(int size) {\n    return std::vector<float>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid clear_memory(char* ptr, size_t size) {\n    if (ptr) {\n        memset(ptr, 0, size);\n    }\n}", "target_code": "#include <memory>\n\nvoid clear_memory(std::unique_ptr<char[]>& ptr, size_t size) {\n    if (ptr) {\n        std::fill_n(ptr.get(), size, 0);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_and_fill(int n, int value) {\n    int* array = (int*)malloc(n * sizeof(int));\n    if (array) {\n        for (int i = 0; i < n; ++i) {\n            array[i] = value;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_fill(int n, int value) {\n    return std::vector<int>(n, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* new_str = (char*)malloc(strlen(str) + 1);\n    if (new_str) {\n        strcpy(new_str, str);\n    }\n    return new_str;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_array(size_t size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_message(const char* message) {\n    printf(\"%s\\n\", message);\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid print_message(const std::string& message) {\n    std::cout << message << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid append_to_array(int** array, size_t* size, int value) {\n    *array = (int*)realloc(*array, (*size + 1) * sizeof(int));\n    (*array)[(*size)++] = value;\n}", "target_code": "#include <vector>\n\nvoid append_to_array(std::vector<int>& array, int value) {\n    array.push_back(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concat_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_filled_array(size_t size, int value) {\n    int* array = (int*)malloc(size * sizeof(int));\n    if (array) {\n        for (size_t i = 0; i < size; ++i) {\n            array[i] = value;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_filled_array(size_t size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* array, size_t size) {\n    for (size_t i = 0; i < size / 2; ++i) {\n        int temp = array[i];\n        array[i] = array[size - 1 - i];\n        array[size - 1 - i] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <vector>\n\nvoid reverse_array(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* str, size_t start, size_t length) {\n    char* sub = (char*)malloc(length + 1);\n    if (sub) {\n        strncpy(sub, str + start, length);\n        sub[length] = '\\0';\n    }\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& str, size_t start, size_t length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid remove_element(int* array, size_t* size, size_t index) {\n    if (index < *size) {\n        for (size_t i = index; i < *size - 1; ++i) {\n            array[i] = array[i + 1];\n        }\n        (*size)--;\n    }\n}", "target_code": "#include <vector>\n\nvoid remove_element(std::vector<int>& array, size_t index) {\n    if (index < array.size()) {\n        array.erase(array.begin() + index);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(sizeof(int) * size);\n    for (int i = 0; i < size; ++i) {\n        array[i] = 0;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_integer() {\n    int* num = (int*)malloc(sizeof(int));\n    *num = 0;\n    return num;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> allocate_integer() {\n    return std::make_unique<int>(0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nchar* concat_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* copy_array(const int* array, int size) {\n    int* copy = (int*)malloc(sizeof(int) * size);\n    for (int i = 0; i < size; ++i) {\n        copy[i] = array[i];\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int>& array) {\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* array, int size) {\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& array) {\n    for (size_t i = 0; i < array.size(); ++i) {\n        array[i] = static_cast<int>(i);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* reverse_string(const char* str) {\n    size_t len = strlen(str);\n    char* rev = (char*)malloc(len + 1);\n    if (rev) {\n        for (size_t i = 0; i < len; ++i) {\n            rev[i] = str[len - i - 1];\n        }\n        rev[len] = '\\0';\n    }\n    return rev;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* str, size_t begin, size_t len) {\n    char* sub = (char*)malloc(len + 1);\n    if (sub) {\n        strncpy(sub, str + begin, len);\n        sub[len] = '\\0';\n    }\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& str, size_t begin, size_t len) {\n    return str.substr(begin, len);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid fill_array(int* array, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid fill_array(std::vector<int>& array, int value) {\n    std::fill(array.begin(), array.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char *s1, const char *s2) {\n    char *result = malloc(strlen(s1) + strlen(s2) + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = 0;\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* copy_string(const char* source) {\n    char* copy = malloc(strlen(source) + 1);\n    strcpy(copy, source);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string copy_string(const std::string& source) {\n    return source;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = malloc(sizeof(Point));\n    p->x = x;\n    p->y = y;\n    return p;\n}", "target_code": "#include <memory>\n\nstruct Point {\n    int x, y;\n};\n\nstd::unique_ptr<Point> create_point(int x, int y) {\n    return std::make_unique<Point>(Point{x, y});\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* arr, int size) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& arr) {\n    for (int i = 0; i < arr.size(); ++i) {\n        arr[i] = i;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* to_uppercase(const char* str) {\n    char* result = malloc(strlen(str) + 1);\n    for (int i = 0; str[i]; ++i) {\n        result[i] = toupper(str[i]);\n    }\n    result[strlen(str)] = '\\0';\n    return result;\n}", "target_code": "#include <string>\n#include <algorithm>\n\nstd::string to_uppercase(const std::string& str) {\n    std::string result = str;\n    std::transform(result.begin(), result.end(), result.begin(), ::toupper);\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* duplicate_array(const int* arr, int size) {\n    int* copy = malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> duplicate_array(const std::vector<int>& arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* str, int start, int length) {\n    char* substr = malloc(length + 1);\n    strncpy(substr, str + start, length);\n    substr[length] = '\\0';\n    return substr;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& str, size_t start, size_t length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> array(size);\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid copy_array(int* dest, int* src, int size) {\n    for (int i = 0; i < size; ++i) {\n        dest[i] = src[i];\n    }\n}", "target_code": "#include <algorithm>\n#include <vector>\n\nvoid copy_array(std::vector<int>& dest, const std::vector<int>& src) {\n    std::copy(src.begin(), src.end(), dest.begin());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* duplicate_string(const char* str) {\n    size_t len = strlen(str);\n    char* copy = (char*)malloc(len + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* filter_even(const int* array, int size, int* out_size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    int count = 0;\n    for (int i = 0; i < size; ++i) {\n        if (array[i] % 2 == 0) {\n            result[count++] = array[i];\n        }\n    }\n    *out_size = count;\n    return result;\n}", "target_code": "#include <vector>\n\nstd::vector<int> filter_even(const std::vector<int>& array) {\n    std::vector<int> result;\n    for (int num : array) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse(int* array, int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        int temp = array[i];\n        array[i] = array[size - 1 - i];\n        array[size - 1 - i] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum(const int* array, int size) {\n    int total = 0;\n    for (int i = 0; i < size; ++i) {\n        total += array[i];\n    }\n    return total;\n}", "target_code": "#include <numeric>\n#include <vector>\n\nint sum(const std::vector<int>& array) {\n    return std::accumulate(array.begin(), array.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nint compare_strings(const char* str1, const char* str2) {\n    return strcmp(str1, str2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& str1, const std::string& str2) {\n    return str1.compare(str2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid zero_array(int* array, int size) {\n    for (int i = 0; i < size; ++i) {\n        array[i] = 0;\n    }\n}", "target_code": "#include <vector>\n\nvoid zero_array(std::vector<int>& array) {\n    std::fill(array.begin(), array.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* resize_array(int* array, int old_size, int new_size) {\n    int* new_array = (int*)malloc(new_size * sizeof(int));\n    for (int i = 0; i < old_size && i < new_size; ++i) {\n        new_array[i] = array[i];\n    }\n    free(array);\n    return new_array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> resize_array(const std::vector<int>& array, int new_size) {\n    std::vector<int> new_array = array;\n    new_array.resize(new_size);\n    return new_array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid increment_all(int* array, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        array[i] += 1;\n    }\n}", "target_code": "#include <vector>\n\nvoid increment_all(std::vector<int>& array) {\n    for (int& element : array) {\n        ++element;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid* allocate_memory(size_t size) {\n    return malloc(size);\n}", "target_code": "#include <memory>\n\nstd::shared_ptr<void> allocate_memory(size_t size) {\n    return std::shared_ptr<void>(malloc(size), free);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* s1, const char* s2) {\n    return strcmp(s1, s2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& s1, const std::string& s2) {\n    return s1.compare(s2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::shared_ptr<void>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int* array, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <vector>\n#include <iostream>\n\nvoid print_array(const std::vector<int>& array) {\n    for (const int& element : array) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* duplicate_string(const char* s) {\n    size_t length = strlen(s);\n    char* copy = (char*)malloc(length + 1);\n    strcpy(copy, s);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& s) {\n    return s;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* reverse_array(const int* array, size_t length) {\n    int* reversed = (int*)malloc(length * sizeof(int));\n    for (size_t i = 0; i < length; ++i) {\n        reversed[i] = array[length - 1 - i];\n    }\n    return reversed;\n}", "target_code": "#include <vector>\n\nstd::vector<int> reverse_array(const std::vector<int>& array) {\n    std::vector<int> reversed(array.rbegin(), array.rend());\n    return reversed;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* s, size_t start, size_t length) {\n    char* sub = (char*)malloc(length + 1);\n    strncpy(sub, s + start, length);\n    sub[length] = '\\0';\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& s, size_t start, size_t length) {\n    return s.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    std::vector<int> array(size);\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_reversed(const char* str) {\n    size_t len = strlen(str);\n    for (int i = len - 1; i >= 0; --i) {\n        putchar(str[i]);\n    }\n    putchar('\\n');\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid print_reversed(const std::string& str) {\n    for (auto it = str.rbegin(); it != str.rend(); ++it) {\n        std::cout << *it;\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* find_max(int* array, size_t size) {\n    if (size == 0) return NULL;\n    int* max = &array[0];\n    for (size_t i = 1; i < size; ++i) {\n        if (array[i] > *max) {\n            max = &array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n\nint* find_max(std::vector<int>& array) {\n    return std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid initialize_array(int* array, size_t size, int value) {\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& array, int value) {\n    std::fill(array.begin(), array.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* duplicate_string(const char* str) {\n    size_t len = strlen(str);\n    char* copy = (char*)malloc(len + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <utility>\n\nvoid swap(int& a, int& b) {\n    std::swap(a, b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* filter_even(int* array, size_t size, size_t* new_size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    *new_size = 0;\n    for (size_t i = 0; i < size; ++i) {\n        if (array[i] % 2 == 0) {\n            result[(*new_size)++] = array[i];\n        }\n    }\n    return result;\n}", "target_code": "#include <vector>\n\nstd::vector<int> filter_even(const std::vector<int>& array) {\n    std::vector<int> result;\n    for (int x : array) {\n        if (x % 2 == 0) {\n            result.push_back(x);\n        }\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int* array, size_t size) {\n    for (size_t i = 0; i < size / 2; ++i) {\n        int temp = array[i];\n        array[i] = array[size - i - 1];\n        array[size - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse_array(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* duplicate = (char*)malloc(strlen(str) + 1);\n    if (duplicate) {\n        strcpy(duplicate, str);\n    }\n    return duplicate;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid set_value(int* ptr, int value) {\n    *ptr = value;\n}", "target_code": "#include <memory>\n\nvoid set_value(std::shared_ptr<int> ptr, int value) {\n    *ptr = value;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* resize_array(int* array, size_t new_size) {\n    int* new_array = (int*)realloc(array, new_size * sizeof(int));\n    return new_array;\n}", "target_code": "#include <vector>\n\nvoid resize_array(std::vector<int>& array, size_t new_size) {\n    array.resize(new_size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint** create_matrix(size_t rows, size_t cols) {\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    for (size_t i = 0; i < rows; ++i) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n    }\n    return matrix;\n}", "target_code": "#include <vector>\n\nstd::vector<std::vector<int>> create_matrix(size_t rows, size_t cols) {\n    return std::vector<std::vector<int>>(rows, std::vector<int>(cols));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_matrix(int** matrix, size_t rows) {\n    for (size_t i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\n\nvoid free_matrix(std::vector<std::vector<int>>& matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* get_n_elements(int* array, size_t n) {\n    int* new_array = (int*)malloc(n * sizeof(int));\n    for (size_t i = 0; i < n; ++i) {\n        new_array[i] = array[i];\n    }\n    return new_array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> get_n_elements(const std::vector<int>& array, size_t n) {\n    return std::vector<int>(array.begin(), array.begin() + n);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* substring(const char* str, size_t start, size_t len) {\n    char* sub = (char*)malloc(len + 1);\n    if (sub) {\n        strncpy(sub, &str[start], len);\n        sub[len] = '\\0';\n    }\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& str, size_t start, size_t len) {\n    return str.substr(start, len);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *concatenate(const char *s1, const char *s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char *result = (char *)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string &s1, const std::string &s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *create_array(size_t size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    if (arr) {\n        for (size_t i = 0; i < size; i++) {\n            arr[i] = i;\n        }\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    std::vector<int> arr(size);\n    for (size_t i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_array(int *arr, size_t size) {\n    for (size_t i = 0; i < size / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse_array(std::vector<int> &arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum(int *arr, size_t size) {\n    int total = 0;\n    for (size_t i = 0; i < size; ++i) {\n        total += arr[i];\n    }\n    return total;\n}", "target_code": "#include <vector>\n\nint sum(const std::vector<int> &arr) {\n    return std::accumulate(arr.begin(), arr.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(const int *arr, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <vector>\n#include <iostream>\n\nvoid print_array(const std::vector<int> &arr) {\n    for (const auto &elem : arr) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nsize_t string_length(const char *str) {\n    size_t length = 0;\n    while (str[length] != '\\0') {\n        ++length;\n    }\n    return length;\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string &str) {\n    return str.length();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_memory(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]> &ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint find_max(const int *arr, size_t size) {\n    int max = arr[0];\n    for (size_t i = 1; i < size; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n\nint find_max(const std::vector<int> &arr) {\n    return *std::max_element(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint *copy_array(const int *src, size_t size) {\n    int *dest = (int *)malloc(size * sizeof(int));\n    if (dest) {\n        for (size_t i = 0; i < size; ++i) {\n            dest[i] = src[i];\n        }\n    }\n    return dest;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int> &src) {\n    return src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid initialize_array(int *arr, size_t size, int value) {\n    for (size_t i = 0; i < size; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int> &arr, int value) {\n    std::fill(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(size_t size, int value) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_array(int* array, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& array) {\n    for (int value : array) {\n        std::cout << value << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* find_max(int* array, size_t size) {\n    if (size == 0) return NULL;\n    int* max = &array[0];\n    for (size_t i = 1; i < size; ++i) {\n        if (array[i] > *max) {\n            max = &array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n#include <algorithm>\n\nint find_max(const std::vector<int>& array) {\n    return *std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_string(char* str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_memory(int* array) {\n    free(array);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& array) {\n    array.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(int* array, size_t size) {\n    int sum = 0;\n    for (size_t i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& array) {\n    int sum = 0;\n    for (int value : array) {\n        sum += value;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid initialize_matrix(int** matrix, size_t rows, size_t cols, int value) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            matrix[i][j] = value;\n        }\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_matrix(std::vector<std::vector<int>>& matrix, int value) {\n    for (auto& row : matrix) {\n        std::fill(row.begin(), row.end(), value);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** split_string(const char* str, char delimiter) {\n    size_t count = 0;\n    for (const char* tmp = str; *tmp; ++tmp) {\n        count += (*tmp == delimiter);\n    }\n    char** result = (char**)malloc((count + 2) * sizeof(char*));\n    size_t index = 0;\n    const char* start = str;\n    for (const char* tmp = str; ; ++tmp) {\n        if (*tmp == delimiter || *tmp == '\\0') {\n            size_t length = tmp - start;\n            result[index] = (char*)malloc(length + 1);\n            strncpy(result[index], start, length);\n            result[index][length] = '\\0';\n            index++;\n            if (*tmp == '\\0') break;\n            start = tmp + 1;\n        }\n    }\n    result[index] = NULL;\n    return result;\n}", "target_code": "#include <string>\n#include <sstream>\n#include <vector>\n\nstd::vector<std::string> split_string(const std::string& str, char delimiter) {\n    std::vector<std::string> result;\n    std::istringstream stream(str);\n    std::string token;\n    while (std::getline(stream, token, delimiter)) {\n        result.push_back(token);\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat average(int* array, size_t size) {\n    if (size == 0) return 0.0f;\n    int sum = 0;\n    for (size_t i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return (float)sum / size;\n}", "target_code": "#include <vector>\n\nfloat average(const std::vector<int>& array) {\n    if (array.empty()) return 0.0f;\n    int sum = 0;\n    for (int value : array) {\n        sum += value;\n    }\n    return static_cast<float>(sum) / array.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* s) {\n    char* new_str = (char*)malloc(strlen(s) + 1);\n    if (new_str) {\n        strcpy(new_str, s);\n    }\n    return new_str;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& s) {\n    return std::string(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& array) {\n    int sum = 0;\n    for (int num : array) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate_strings(const char* s1, const char* s2) {\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid fill_array(int* array, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid fill_array(std::vector<int>& array, int value) {\n    std::fill(array.begin(), array.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_array(const int* array, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& array) {\n    for (int num : array) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint find_max(const int* array, int size) {\n    int max = array[0];\n    for (int i = 1; i < size; ++i) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n#include <algorithm>\n\nint find_max(const std::vector<int>& array) {\n    return *std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nint string_length(const char* s) {\n    return strlen(s);\n}", "target_code": "#include <string>\n\nint string_length(const std::string& s) {\n    return s.length();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::shared_ptr<void> ptr) {\n    // Memory is automatically managed\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_int() {\n    int* num = malloc(sizeof(int));\n    return num;\n}", "target_code": "#include <memory>\n\nstd::shared_ptr<int> allocate_int() {\n    return std::make_shared<int>();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concat_strings(const char* str1, const char* str2) {\n    char* result = malloc(strlen(str1) + strlen(str2) + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* array, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& array, int value) {\n    std::fill(array.begin(), array.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid* allocate_memory(size_t size) {\n    return malloc(size);\n}", "target_code": "#include <memory>\n\nstd::shared_ptr<void> allocate_memory(size_t size) {\n    return std::shared_ptr<void>(operator new(size), std::default_delete<void[]>());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(const char* str) {\n    size_t len = strlen(str);\n    char* reversed = malloc(len + 1);\n    if (reversed) {\n        for (size_t i = 0; i < len; ++i) {\n            reversed[i] = str[len - i - 1];\n        }\n        reversed[len] = '\\0';\n    }\n    return reversed;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid set_value(int* ptr, int value) {\n    *ptr = value;\n}", "target_code": "#include <memory>\n\nvoid set_value(std::shared_ptr<int> ptr, int value) {\n    *ptr = value;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* copy_array(const int* array, int size) {\n    int* copy = malloc(size * sizeof(int));\n    if (copy) {\n        for (int i = 0; i < size; ++i) {\n            copy[i] = array[i];\n        }\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int>& array) {\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concat_strings(const char* s1, const char* s2) {\n    char* result = (char*)malloc(strlen(s1) + strlen(s2) + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* array, int size) {\n    for(int i = 0; i < size / 2; i++) {\n        int temp = array[i];\n        array[i] = array[size - i - 1];\n        array[size - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse_array(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint** allocate_matrix(int rows, int cols) {\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    for(int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n    }\n    return matrix;\n}", "target_code": "#include <vector>\n\nstd::vector<std::vector<int>> allocate_matrix(int rows, int cols) {\n    return std::vector<std::vector<int>>(rows, std::vector<int>(cols));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* string_to_uppercase(const char* str) {\n    char* result = (char*)malloc(strlen(str) + 1);\n    for(int i = 0; str[i]; i++) {\n        result[i] = toupper(str[i]);\n    }\n    result[strlen(str)] = '\\0';\n    return result;\n}", "target_code": "#include <string>\n#include <algorithm>\n\nstd::string string_to_uppercase(const std::string& str) {\n    std::string result = str;\n    std::transform(result.begin(), result.end(), result.begin(), ::toupper);\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid delete_matrix(int** matrix, int rows) {\n    for(int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\n\nvoid delete_matrix(std::vector<std::vector<int>>& matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(const int* array, int size) {\n    int sum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& array) {\n    return std::accumulate(array.begin(), array.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* find_substring(const char* str, const char* substr) {\n    char* pos = strstr(str, substr);\n    return pos ? pos : NULL;\n}", "target_code": "#include <string>\n\nstd::size_t find_substring(const std::string& str, const std::string& substr) {\n    return str.find(substr);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *duplicate_string(const char *s) {\n    char *dup = (char *)malloc(strlen(s) + 1);\n    if (dup) {\n        strcpy(dup, s);\n    }\n    return dup;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string &s) {\n    return std::string(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *create_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int> &ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *allocate_and_initialize(int value) {\n    int *ptr = (int *)malloc(sizeof(int));\n    if (ptr) {\n        *ptr = value;\n    }\n    return ptr;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> allocate_and_initialize(int value) {\n    return std::make_unique<int>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid copy_string(char *dest, const char *src) {\n    strcpy(dest, src);\n}", "target_code": "#include <string>\n\nvoid copy_string(std::string &dest, const std::string &src) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar *concatenate_strings(const char *s1, const char *s2) {\n    char *result = (char *)malloc(strlen(s1) + strlen(s2) + 1);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string &s1, const std::string &s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *resize_array(int *arr, int new_size) {\n    int *new_arr = (int *)realloc(arr, new_size * sizeof(int));\n    return new_arr;\n}", "target_code": "#include <vector>\n\nvoid resize_array(std::vector<int> &arr, int new_size) {\n    arr.resize(new_size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int *arr, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int> &arr, int value) {\n    std::fill(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar *reverse_string(const char *str) {\n    int len = strlen(str);\n    char *rev = (char *)malloc(len + 1);\n    if (rev) {\n        for (int i = 0; i < len; ++i) {\n            rev[i] = str[len - 1 - i];\n        }\n        rev[len] = '\\0';\n    }\n    return rev;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string &str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *append_char(char *str, char c) {\n    int len = strlen(str);\n    char *new_str = (char *)realloc(str, len + 2);\n    if (new_str) {\n        new_str[len] = c;\n        new_str[len + 1] = '\\0';\n    }\n    return new_str;\n}", "target_code": "#include <string>\n\nvoid append_char(std::string &str, char c) {\n    str += c;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    char* result = malloc(strlen(s1) + strlen(s2) + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(int size) {\n    std::vector<int> array(size);\n    for (int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_values(int* values, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d\\n\", values[i]);\n    }\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_values(const std::vector<int>& values) {\n    for (int value : values) {\n        std::cout << value << std::endl;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_and_initialize(int size, int value) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_and_initialize(int size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "target_code": "#include <utility>\n\nvoid swap(int& a, int& b) {\n    std::swap(a, b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* s1, const char* s2) {\n    return strcmp(s1, s2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& s1, const std::string& s2) {\n    return s1.compare(s2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* s) {\n    char* copy = malloc(strlen(s) + 1);\n    strcpy(copy, s);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& s) {\n    return s;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* reverse_array(const int* array, int size) {\n    int* reversed = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        reversed[i] = array[size - 1 - i];\n    }\n    return reversed;\n}", "target_code": "#include <vector>\n\nstd::vector<int> reverse_array(const std::vector<int>& array) {\n    return std::vector<int>(array.rbegin(), array.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_elements(const int* array, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_elements(const std::vector<int>& array) {\n    int sum = 0;\n    for (int value : array) {\n        sum += value;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* str1, const char* str2) {\n    char* result = malloc(strlen(str1) + strlen(str2) + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t n) {\n    int* arr = malloc(n * sizeof(int));\n    for(size_t i = 0; i < n; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t n) {\n    std::vector<int> arr(n);\n    for(size_t i = 0; i < n; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* arr, size_t n) {\n    for(size_t i = 0; i < n / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[n - i - 1];\n        arr[n - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* copy_array(const int* arr, size_t n) {\n    int* copy = malloc(n * sizeof(int));\n    for(size_t i = 0; i < n; ++i) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int>& arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = malloc(strlen(str) + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid fill_array(int* arr, size_t n, int value) {\n    for(size_t i = 0; i < n; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid fill_array(std::vector<int>& arr, int value) {\n    std::fill(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nsize_t string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nsize_t count_occurrences(const int* arr, size_t n, int value) {\n    size_t count = 0;\n    for(size_t i = 0; i < n; ++i) {\n        if (arr[i] == value) {\n            ++count;\n        }\n    }\n    return count;\n}", "target_code": "#include <vector>\n\nsize_t count_occurrences(const std::vector<int>& arr, int value) {\n    return std::count(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid clear_memory(int** arr, size_t n) {\n    for(size_t i = 0; i < n; ++i) {\n        free(arr[i]);\n    }\n    free(arr);\n}", "target_code": "#include <vector>\n#include <memory>\n\nvoid clear_memory(std::vector<std::unique_ptr<int[]>>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid copy_string(char* dest, const char* src) {\n    strcpy(dest, src);\n}", "target_code": "#include <string>\n\nvoid copy_string(std::string& dest, const std::string& src) {\n    dest = src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concat_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; i++) {\n        array[i] = i;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    std::vector<int> array(size);\n    for (size_t i = 0; i < size; i++) {\n        array[i] = i;\n    }\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_numbers(int* numbers, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_numbers(const std::vector<int>& numbers) {\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nint string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* new_str = (char*)malloc(strlen(str) + 1);\n    strcpy(new_str, str);\n    return new_str;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_and_set(int value) {\n    int* ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> allocate_and_set(int value) {\n    return std::make_unique<int>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* array, size_t size) {\n    for (size_t i = 0; i < size / 2; i++) {\n        int temp = array[i];\n        array[i] = array[size - 1 - i];\n        array[size - 1 - i] = temp;\n    }\n}", "target_code": "#include <vector>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_elements(int* array, size_t size) {\n    int sum = 0;\n    for (size_t i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_elements(const std::vector<int>& array) {\n    int sum = 0;\n    for (int num : array) {\n        sum += num;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid zero_initialize(int* array, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        array[i] = 0;\n    }\n}", "target_code": "#include <vector>\n\nvoid zero_initialize(std::vector<int>& array) {\n    std::fill(array.begin(), array.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    char* result = (char*)malloc(strlen(s1) + strlen(s2) + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* duplicate_array(const int* arr, int size) {\n    int* copy = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> duplicate_array(const std::vector<int>& arr) {\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* copy_string(const char* s) {\n    char* copy = (char*)malloc(strlen(s) + 1);\n    strcpy(copy, s);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string copy_string(const std::string& s) {\n    return s;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* arr, int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n#include <algorithm>\n\nvoid reverse_array(std::vector<int>& arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint** create_matrix(int rows, int cols) {\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    for (int i = 0; i < rows; ++i) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n    }\n    return matrix;\n}", "target_code": "#include <vector>\n\nstd::vector<std::vector<int>> create_matrix(int rows, int cols) {\n    return std::vector<std::vector<int>>(rows, std::vector<int>(cols));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid free_matrix(int** matrix, int rows) {\n    for (int i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\n\nvoid free_matrix(std::vector<std::vector<int>>& matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* resize_array(int* arr, int old_size, int new_size) {\n    return (int*)realloc(arr, new_size * sizeof(int));\n}", "target_code": "#include <vector>\n\nvoid resize_array(std::vector<int>& arr, int new_size) {\n    arr.resize(new_size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* s1, const char* s2) {\n    return strcmp(s1, s2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& s1, const std::string& s2) {\n    return s1.compare(s2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid allocate_array(int** arr, size_t size) {\n    *arr = (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\n\n// No need for explicit free in C++, vector handles its own memory\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_integer(const int* number) {\n    printf(\"%d\\n\", *number);\n}", "target_code": "#include <iostream>\n\nvoid print_integer(const int& number) {\n    std::cout << number << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_integer(int value) {\n    int* number = (int*)malloc(sizeof(int));\n    if (number) {\n        *number = value;\n    }\n    return number;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> create_integer(int value) {\n    return std::make_unique<int>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nchar* concatenate_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid reverse_array(int* arr, size_t size) {\n    for (size_t i = 0; i < size / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}", "target_code": "#include <vector>\n\nvoid reverse_array(std::vector<int>& arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* get_substring(const char* str, size_t start, size_t length) {\n    char* substr = (char*)malloc(length + 1);\n    if (substr) {\n        strncpy(substr, str + start, length);\n        substr[length] = '\\0';\n    }\n    return substr;\n}", "target_code": "#include <string>\n\nstd::string get_substring(const std::string& str, size_t start, size_t length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* arr, size_t size, int value) {\n    for (size_t i = 0; i < size; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& arr, int value) {\n    std::fill(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(const int* arr, size_t size) {\n    int sum = 0;\n    for (size_t i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& arr) {\n    return std::accumulate(arr.begin(), arr.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid print_array(int *arr, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid print_array(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid reverse_string(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint* create_array(size_t size) {\n    return (int*)malloc(sizeof(int) * size);\n}", "target_code": "#include <vector>\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid print_hello_world() {\n    printf(\"Hello, World!\\n\");\n}", "target_code": "#include <iostream>\nvoid print_hello_world() {\n    std::cout << \"Hello, World!\" << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nchar* duplicate_string(const char* str) {\n    size_t len = strlen(str);\n    char* dup = (char*)malloc(len + 1);\n    strcpy(dup, str);\n    return dup;\n}", "target_code": "#include <string>\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint sum(int* arr, size_t size) {\n    int total = 0;\n    for (size_t i = 0; i < size; ++i) {\n        total += arr[i];\n    }\n    return total;\n}", "target_code": "#include <vector>\nint sum(const std::vector<int>& arr) {\n    int total = 0;\n    for (int num : arr) {\n        total += num;\n    }\n    return total;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nvoid to_uppercase(char *str) {\n    while (*str) {\n        if (*str >= 'a' && *str <= 'z') {\n            *str -= 32;\n        }\n        str++;\n    }\n}", "target_code": "#include <string>\n#include <algorithm>\nvoid to_uppercase(std::string& str) {\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\nvoid free_array(std::vector<int>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}", "target_code": "#include <iostream>\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* concatenate(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_numbers(int* numbers, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", numbers[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <vector>\n#include <iostream>\n\nvoid print_numbers(const std::vector<int>& numbers) {\n    for (const auto& number : numbers) {\n        std::cout << number << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* duplicate_string(const char* str) {\n    size_t len = strlen(str);\n    char* copy = (char*)malloc(len + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint sum_array(const int* array, size_t size) {\n    int sum = 0;\n    for (size_t i = 0; i < size; ++i) {\n        sum += array[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& array) {\n    int sum = 0;\n    for (const auto& elem : array) {\n        sum += elem;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid initialize_array(int* array, size_t size, int value) {\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& array, int value) {\n    std::fill(array.begin(), array.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint find_max(const int* array, size_t size) {\n    int max = array[0];\n    for (size_t i = 1; i < size; ++i) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n#include <algorithm>\n\nint find_max(const std::vector<int>& array) {\n    return *std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substr(const char* str, size_t start, size_t length) {\n    char* sub = (char*)malloc(length + 1);\n    strncpy(sub, str + start, length);\n    sub[length] = '\\0';\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substr(const std::string& str, size_t start, size_t length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid append_char(char** str, char c) {\n    size_t len = strlen(*str);\n    *str = (char*)realloc(*str, len + 2);\n    (*str)[len] = c;\n    (*str)[len + 1] = '\\0';\n}", "target_code": "#include <string>\nvoid append_char(std::string& str, char c) {\n    str.push_back(c);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "typedef struct {\n    int x;\n    int y;\n} Point;\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    if (p) {\n        p->x = x;\n        p->y = y;\n    }\n    return p;\n}", "target_code": "struct Point {\n    int x;\n    int y;\n};\nstd::shared_ptr<Point> create_point(int x, int y) {\n    return std::make_shared<Point>(Point{x, y});\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar** split_string(const char* str, const char* delim, int* count) {\n    char* str_copy = strdup(str);\n    int capacity = 10;\n    char** result = (char**)malloc(capacity * sizeof(char*));\n    *count = 0;\n    char* token = strtok(str_copy, delim);\n    while (token) {\n        if (*count >= capacity) {\n            capacity *= 2;\n            result = (char**)realloc(result, capacity * sizeof(char*));\n        }\n        result[(*count)++] = strdup(token);\n        token = strtok(NULL, delim);\n    }\n    free(str_copy);\n    return result;\n}", "target_code": "#include <string>\n#include <vector>\n#include <sstream>\nstd::vector<std::string> split_string(const std::string& str, char delim) {\n    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string item;\n    while (std::getline(ss, item, delim)) {\n        result.push_back(item);\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* join_strings(char** strings, int count, const char* delim) {\n    size_t length = 0;\n    for (int i = 0; i < count; ++i) {\n        length += strlen(strings[i]) + strlen(delim);\n    }\n    char* result = (char*)malloc(length + 1);\n    result[0] = '\\0';\n    for (int i = 0; i < count; ++i) {\n        strcat(result, strings[i]);\n        if (i < count - 1) {\n            strcat(result, delim);\n        }\n    }\n    return result;\n}", "target_code": "#include <string>\n#include <vector>\nstd::string join_strings(const std::vector<std::string>& strings, const std::string& delim) {\n    std::string result;\n    for (size_t i = 0; i < strings.size(); ++i) {\n        result += strings[i];\n        if (i < strings.size() - 1) {\n            result += delim;\n        }\n    }\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid reverse_array(int* array, int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        int temp = array[i];\n        array[i] = array[size - 1 - i];\n        array[size - 1 - i] = temp;\n    }\n}", "target_code": "#include <vector>\nvoid reverse_array(std::vector<int>& array) {\n    std::reverse(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nchar* int_to_string(int value) {\n    char* buffer = (char*)malloc(12);\n    snprintf(buffer, 12, \"%d\", value);\n    return buffer;\n}", "target_code": "#include <string>\nstd::string int_to_string(int value) {\n    return std::to_string(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* concat_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\nstd::string concat_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *concat(const char *s1, const char *s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char *result = (char *)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat(const std::string &s1, const std::string &s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *create_array(size_t size) {\n    int *array = (int *)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = 0;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int *ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]> &ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_message(const char *message) {\n    printf(\"%s\\n\", message);\n}", "target_code": "#include <iostream>\n\nvoid print_message(const std::string &message) {\n    std::cout << message << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint *duplicate_array(const int *array, size_t size) {\n    int *copy = (int *)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; ++i) {\n        copy[i] = array[i];\n    }\n    return copy;\n}", "target_code": "#include <vector>\n\nstd::vector<int> duplicate_array(const std::vector<int> &array) {\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char *s1, const char *s2) {\n    return strcmp(s1, s2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string &s1, const std::string &s2) {\n    return s1.compare(s2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar *to_upper(const char *str) {\n    char *result = (char *)malloc(strlen(str) + 1);\n    for (size_t i = 0; str[i]; ++i) {\n        result[i] = toupper(str[i]);\n    }\n    result[strlen(str)] = '\\0';\n    return result;\n}", "target_code": "#include <string>\n#include <algorithm>\n\nstd::string to_upper(const std::string &str) {\n    std::string result = str;\n    std::transform(result.begin(), result.end(), result.begin(), ::toupper);\n    return result;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint **create_matrix(size_t rows, size_t cols) {\n    int **matrix = (int **)malloc(rows * sizeof(int *));\n    for (size_t i = 0; i < rows; ++i) {\n        matrix[i] = (int *)malloc(cols * sizeof(int));\n    }\n    return matrix;\n}", "target_code": "#include <vector>\n\nstd::vector<std::vector<int>> create_matrix(size_t rows, size_t cols) {\n    return std::vector<std::vector<int>>(rows, std::vector<int>(cols));\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid destroy_matrix(int **matrix, size_t rows) {\n    for (size_t i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "// No equivalent function needed in C++ as std::vector handles its own memory"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar *substring(const char *str, size_t start, size_t length) {\n    char *sub = (char *)malloc(length + 1);\n    strncpy(sub, str + start, length);\n    sub[length] = '\\0';\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string &str, size_t start, size_t length) {\n    return str.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}", "target_code": "#include <vector>\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\nvoid concatenate(char* dest, const char* src1, const char* src2) {\n    strcpy(dest, src1);\n    strcat(dest, src2);\n}", "target_code": "#include <string>\nstd::string concatenate(const std::string& src1, const std::string& src2) {\n    return src1 + src2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\nvoid free_array(std::vector<int>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint* allocate_int(int value) {\n    int* ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}", "target_code": "#include <memory>\nstd::unique_ptr<int> allocate_int(int value) {\n    return std::make_unique<int>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid print_array(int* arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid print_array(const std::vector<int>& arr) {\n    for (int val : arr) {\n        std::cout << val << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nchar* create_string(const char* init) {\n    char* str = (char*)malloc(strlen(init) + 1);\n    strcpy(str, init);\n    return str;\n}", "target_code": "#include <string>\nstd::string create_string(const std::string& init) {\n    return std::string(init);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid delete_string(char* str) {\n    free(str);\n}", "target_code": "#include <string>\nvoid delete_string(std::string& str) {\n    str.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\nstd::size_t string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid reverse_array(int* arr, int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <vector>\nvoid reverse_array(std::vector<int>& arr) {\n    std::reverse(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nint* copy_array(const int* src, int size) {\n    int* dest = (int*)malloc(size * sizeof(int));\n    memcpy(dest, src, size * sizeof(int));\n    return dest;\n}", "target_code": "#include <vector>\nstd::vector<int> copy_array(const std::vector<int>& src) {\n    return std::vector<int>(src);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* dup = (char*)malloc(strlen(str) + 1);\n    if (dup) {\n        strcpy(dup, str);\n    }\n    return dup;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t n) {\n    int* arr = (int*)malloc(n * sizeof(int));\n    if (arr) {\n        for (size_t i = 0; i < n; ++i) {\n            arr[i] = 0;\n        }\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t n) {\n    return std::vector<int>(n, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& arr) {\n    arr.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint* create_point(int x, int y) {\n    Point* p = (Point*)malloc(sizeof(Point));\n    if (p) {\n        p->x = x;\n        p->y = y;\n    }\n    return p;\n}", "target_code": "#include <memory>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nstd::shared_ptr<Point> create_point(int x, int y) {\n    return std::make_shared<Point>(Point{x, y});\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid delete_point(Point* p) {\n    free(p);\n}", "target_code": "#include <memory>\n\nvoid delete_point(std::shared_ptr<Point> p) {\n    // No action needed, managed by shared_ptr\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* a, const char* b) {\n    return strcmp(a, b);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& a, const std::string& b) {\n    return a.compare(b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_and_init_array(size_t n, int value) {\n    int* arr = (int*)malloc(n * sizeof(int));\n    if (arr) {\n        for (size_t i = 0; i < n; ++i) {\n            arr[i] = value;\n        }\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_init_array(size_t n, int value) {\n    return std::vector<int>(n, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concat_strings(const char* a, const char* b) {\n    size_t len_a = strlen(a);\n    size_t len_b = strlen(b);\n    char* result = (char*)malloc(len_a + len_b + 1);\n    if (result) {\n        strcpy(result, a);\n        strcat(result, b);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concat_strings(const std::string& a, const std::string& b) {\n    return a + b;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* copy_array(const int* src, size_t n) {\n    int* dest = (int*)malloc(n * sizeof(int));\n    if (dest) {\n        for (size_t i = 0; i < n; ++i) {\n            dest[i] = src[i];\n        }\n    }\n    return dest;\n}", "target_code": "#include <vector>\n\nstd::vector<int> copy_array(const std::vector<int>& src) {\n    return std::vector<int>(src);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* reverse_string(const char* str) {\n    size_t len = strlen(str);\n    char* rev = (char*)malloc(len + 1);\n    if (rev) {\n        for (size_t i = 0; i < len; ++i) {\n            rev[i] = str[len - i - 1];\n        }\n        rev[len] = '\\0';\n    }\n    return rev;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, str1);\n    strcat(result, str2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_numbers(int* numbers, int size) {\n    for (int i = 0; i < size; ++i) {\n        printf(\"%d \", numbers[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_numbers(const std::vector<int>& numbers) {\n    for (int number : numbers) {\n        std::cout << number << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    strcpy(copy, str);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* arr) {\n    free(arr);\n}", "target_code": "#include <memory>\n\nvoid free_array(std::unique_ptr<int[]>& arr) {\n    arr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_int(int value) {\n    int* ptr = (int*)malloc(sizeof(int));\n    *ptr = value;\n    return ptr;\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int> allocate_int(int value) {\n    return std::make_unique<int>(value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_string(const char* str) {\n    printf(\"%s\\n\", str);\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid print_string(const std::string& str) {\n    std::cout << str << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* arr, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& arr, int value) {\n    for (int& elem : arr) {\n        elem = value;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(const char* str) {\n    size_t len = strlen(str);\n    char* reversed = (char*)malloc(len + 1);\n    for (size_t i = 0; i < len; ++i) {\n        reversed[i] = str[len - 1 - i];\n    }\n    reversed[len] = '\\0';\n    return reversed;\n}", "target_code": "#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string& str) {\n    std::string reversed = str;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nfloat* create_float_array(int size) {\n    float* arr = (float*)malloc(size * sizeof(float));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = (float)i;\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<float> create_float_array(int size) {\n    std::vector<float> arr(size);\n    for (int i = 0; i < size; ++i) {\n        arr[i] = static_cast<float>(i);\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* duplicate_string(const char* str) {\n    char* result = (char*)malloc(strlen(str) + 1);\n    if (result) {\n        strcpy(result, str);\n    }\n    return result;\n}", "target_code": "#include <string>\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nvoid reverse_string(char* str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - 1 - i];\n        str[len - 1 - i] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stddef.h>\nint* allocate_array(size_t size) {\n    return (int*)malloc(size * sizeof(int));\n}", "target_code": "#include <vector>\nstd::vector<int> allocate_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stddef.h>\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n    array.shrink_to_fit();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* concatenate_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\nstd::string concatenate_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\nvoid print_array(int* array, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\nvoid print_array(const std::vector<int>& array) {\n    for (const auto& elem : array) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar* find_substring(const char* str, const char* substr) {\n    return strstr(str, substr);\n}", "target_code": "#include <string>\nsize_t find_substring(const std::string& str, const std::string& substr) {\n    return str.find(substr);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nchar* to_uppercase(char* str) {\n    char* p = str;\n    while (*p) {\n        if (*p >= 'a' && *p <= 'z') {\n            *p -= 32;\n        }\n        ++p;\n    }\n    return str;\n}", "target_code": "#include <algorithm>\n#include <string>\nstd::string to_uppercase(std::string str) {\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper);\n    return str;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nvoid copy_memory(void* dest, const void* src, size_t n) {\n    memcpy(dest, src, n);\n}", "target_code": "#include <cstring>\n#include <memory>\nvoid copy_memory(std::shared_ptr<void> dest, std::shared_ptr<const void> src, size_t n) {\n    std::memcpy(dest.get(), src.get(), n);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <stddef.h>\nint* resize_array(int* array, size_t new_size) {\n    return (int*)realloc(array, new_size * sizeof(int));\n}", "target_code": "#include <vector>\nvoid resize_array(std::vector<int>& array, size_t new_size) {\n    array.resize(new_size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <iostream>\n#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* create_array(int size) {\n    int* arr = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    std::vector<int> arr(size);\n    for (int i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n    return arr;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid reverse_string(char* str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; ++i) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}", "target_code": "#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(const int* arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}", "target_code": "#include <vector>\n\nint sum_array(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int value : arr) {\n        sum += value;\n    }\n    return sum;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* copy_string(const char* source) {\n    char* copy = (char*)malloc(strlen(source) + 1);\n    strcpy(copy, source);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string copy_string(const std::string& source) {\n    return source;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid fill_array(int* arr, int size, int value) {\n    for (int i = 0; i < size; ++i) {\n        arr[i] = value;\n    }\n}", "target_code": "#include <vector>\n\nvoid fill_array(std::vector<int>& arr, int value) {\n    std::fill(arr.begin(), arr.end(), value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint find_max(const int* arr, int size) {\n    int max = arr[0];\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n\nint find_max(const std::vector<int>& arr) {\n    return *std::max_element(arr.begin(), arr.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nint string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* allocate_integers(int count) {\n    return (int*)malloc(count * sizeof(int));\n}", "target_code": "#include <memory>\n\nstd::unique_ptr<int[]> allocate_integers(int count) {\n    return std::make_unique<int[]>(count);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* result = (char*)malloc(strlen(str) + 1);\n    if (result != NULL) {\n        strcpy(result, str);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::shared_ptr<void> ptr) {\n    // Memory will be automatically freed when ptr goes out of scope\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* a, const char* b) {\n    return strcmp(a, b);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& a, const std::string& b) {\n    return a.compare(b);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocate_and_initialize(size_t size, int value) {\n    int* array = (int*)malloc(size * sizeof(int));\n    if (array != NULL) {\n        for (size_t i = 0; i < size; ++i) {\n            array[i] = value;\n        }\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> allocate_and_initialize(size_t size, int value) {\n    return std::vector<int>(size, value);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nsize_t string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid* allocate_memory(size_t size) {\n    return malloc(size);\n}", "target_code": "#include <memory>\n\nstd::shared_ptr<void> allocate_memory(size_t size) {\n    return std::shared_ptr<void>(malloc(size), free);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid copy_memory(void* dest, const void* src, size_t n) {\n    memcpy(dest, src, n);\n}", "target_code": "#include <cstring>\n\nvoid copy_memory(void* dest, const void* src, size_t n) {\n    std::memcpy(dest, src, n);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* resize_array(int* array, size_t new_size) {\n    return (int*)realloc(array, new_size * sizeof(int));\n}", "target_code": "#include <vector>\n\nstd::vector<int> resize_array(std::vector<int>& array, size_t new_size) {\n    array.resize(new_size);\n    return array;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid concatenate_strings(char* dest, const char* src) {\n    strcat(dest, src);\n}", "target_code": "#include <string>\n\nvoid concatenate_strings(std::string& dest, const std::string& src) {\n    dest += src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_array(int* array) {\n    free(array);\n}", "target_code": "#include <vector>\n\nvoid free_array(std::vector<int>& array) {\n    array.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_string(const char* str) {\n    printf(\"%s\\n\", str);\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid print_string(const std::string& str) {\n    std::cout << str << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid* allocate_memory(size_t size) {\n    return malloc(size);\n}", "target_code": "#include <memory>\n\nstd::shared_ptr<void> allocate_memory(size_t size) {\n    return std::shared_ptr<void>(malloc(size), free);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid deallocate_memory(void* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid deallocate_memory(std::shared_ptr<void>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* str1, const char* str2) {\n    return strcmp(str1, str2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& str1, const std::string& str2) {\n    return str1.compare(str2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concatenate_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stddef.h>\n\nsize_t string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& str) {\n    return str.size();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(const int* array, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& array) {\n    for (int num : array) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid printArray(int *arr, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", arr[i]);\n    }\n}\n", "target_code": "#include <iostream>\n#include <vector>\n\nvoid printArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <string.h>\n\nvoid greet(const char *name) {\n    printf(\"Hello, %s!\\n\", name);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nvoid greet(const std::string& name) {\n    std::cout << \"Hello, \" << name << \"!\" << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* allocateArray(size_t size) {\n    return (int*)malloc(size * sizeof(int));\n}\n", "target_code": "#include <vector>\n\nstd::vector<int> allocateArray(size_t size) {\n    return std::vector<int>(size);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicateString(const char *str) {\n    char *copy = (char*)malloc(strlen(str) + 1);\n    if (copy != NULL) {\n        strcpy(copy, str);\n    }\n    return copy;\n}\n", "target_code": "#include <string>\n\nstd::string duplicateString(const std::string& str) {\n    return str;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printPointerValue(int *ptr) {\n    printf(\"Value: %d\\n\", *ptr);\n}\n", "target_code": "#include <iostream>\n#include <memory>\n\nvoid printPointerValue(const std::unique_ptr<int>& ptr) {\n    std::cout << \"Value: \" << *ptr << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createInt(int value) {\n    int *ptr = (int*)malloc(sizeof(int));\n    if (ptr != NULL) {\n        *ptr = value;\n    }\n    return ptr;\n}\n", "target_code": "#include <memory>\n\nstd::unique_ptr<int> createInt(int value) {\n    return std::make_unique<int>(value);\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid freeArray(int *arr) {\n    free(arr);\n}\n", "target_code": "// In C++, memory deallocation is handled by smart pointers and vectors, so no equivalent function is needed."}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid printString(const char *str) {\n    printf(\"%s\\n\", str);\n}\n", "target_code": "#include <iostream>\n#include <string>\n\nvoid printString(const std::string& str) {\n    std::cout << str << std::endl;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* getArrayCopy(const int *arr, size_t size) {\n    int *copy = (int*)malloc(size * sizeof(int));\n    if (copy != NULL) {\n        for (size_t i = 0; i < size; ++i) {\n            copy[i] = arr[i];\n        }\n    }\n    return copy;\n}\n", "target_code": "#include <vector>\n\nstd::vector<int> getArrayCopy(const std::vector<int>& arr) {\n    return arr;\n}\n"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid freeString(char *str) {\n    free(str);\n}\n", "target_code": "// In C++, std::string handles its own memory, so no equivalent function is needed."}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* concatenate(const char* s1, const char* s2) {\n    size_t len1 = strlen(s1);\n    size_t len2 = strlen(s2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    strcpy(result, s1);\n    strcat(result, s2);\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate(const std::string& s1, const std::string& s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(size_t size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    for (size_t i = 0; i < size; ++i) {\n        array[i] = 0;\n    }\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_matrix(int** matrix, size_t rows) {\n    for (size_t i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\n\nvoid free_matrix(std::vector<std::vector<int>>& matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_array(int* array, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}", "target_code": "#include <iostream>\n#include <vector>\n\nvoid print_array(const std::vector<int>& array) {\n    for (const auto& elem : array) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* duplicate_string(const char* s) {\n    size_t len = strlen(s);\n    char* copy = (char*)malloc(len + 1);\n    strcpy(copy, s);\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& s) {\n    return std::string(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* find_max(int* array, size_t size) {\n    if (size == 0) return NULL;\n    int* max = array;\n    for (size_t i = 1; i < size; ++i) {\n        if (array[i] > *max) {\n            max = &array[i];\n        }\n    }\n    return max;\n}", "target_code": "#include <vector>\n\nint find_max(const std::vector<int>& array) {\n    if (array.empty()) return 0;\n    return *std::max_element(array.begin(), array.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* reverse_string(const char* s) {\n    size_t len = strlen(s);\n    char* reverse = (char*)malloc(len + 1);\n    for (size_t i = 0; i < len; ++i) {\n        reverse[i] = s[len - 1 - i];\n    }\n    reverse[len] = '\\0';\n    return reverse;\n}", "target_code": "#include <string>\n\nstd::string reverse_string(const std::string& s) {\n    return std::string(s.rbegin(), s.rend());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid increment_all(int* array, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        array[i]++;\n    }\n}", "target_code": "#include <vector>\n\nvoid increment_all(std::vector<int>& array) {\n    for (auto& elem : array) {\n        ++elem;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* substring(const char* s, size_t start, size_t length) {\n    char* sub = (char*)malloc(length + 1);\n    strncpy(sub, s + start, length);\n    sub[length] = '\\0';\n    return sub;\n}", "target_code": "#include <string>\n\nstd::string substring(const std::string& s, size_t start, size_t length) {\n    return s.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nsize_t string_length(const char* s) {\n    return strlen(s);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& s) {\n    return s.length();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\n\nchar* duplicate_string(const char* str) {\n    char* copy = (char*)malloc(strlen(str) + 1);\n    if (copy) {\n        strcpy(copy, str);\n    }\n    return copy;\n}", "target_code": "#include <string>\n\nstd::string duplicate_string(const std::string& str) {\n    return std::string(str);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* create_array(int size) {\n    int* array = (int*)malloc(size * sizeof(int));\n    return array;\n}", "target_code": "#include <vector>\n\nstd::vector<int> create_array(int size) {\n    return std::vector<int>(size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid free_memory(int* ptr) {\n    free(ptr);\n}", "target_code": "#include <memory>\n\nvoid free_memory(std::unique_ptr<int[]>& ptr) {\n    ptr.reset();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdio.h>\n\nvoid print_message(const char* message) {\n    printf(\"%s\\n\", message);\n}", "target_code": "#include <iostream>\n#include <string>\n\nvoid print_message(const std::string& message) {\n    std::cout << message << std::endl;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid initialize_array(int* array, int size) {\n    for(int i = 0; i < size; ++i) {\n        array[i] = i;\n    }\n}", "target_code": "#include <vector>\n\nvoid initialize_array(std::vector<int>& array) {\n    for(size_t i = 0; i < array.size(); ++i) {\n        array[i] = static_cast<int>(i);\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nint compare_strings(const char* str1, const char* str2) {\n    return strcmp(str1, str2);\n}", "target_code": "#include <string>\n\nint compare_strings(const std::string& str1, const std::string& str2) {\n    return str1.compare(str2);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nchar* concatenate_strings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n    return result;\n}", "target_code": "#include <string>\n\nstd::string concatenate_strings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nint* resize_array(int* array, int new_size) {\n    return (int*)realloc(array, new_size * sizeof(int));\n}", "target_code": "#include <vector>\n\nvoid resize_array(std::vector<int>& array, int new_size) {\n    array.resize(new_size);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <string.h>\n\nsize_t string_length(const char* str) {\n    return strlen(str);\n}", "target_code": "#include <string>\n\nsize_t string_length(const std::string& str) {\n    return str.length();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n\nvoid zero_memory(int* array, int size) {\n    memset(array, 0, size * sizeof(int));\n}", "target_code": "#include <vector>\n\nvoid zero_memory(std::vector<int>& array) {\n    std::fill(array.begin(), array.end(), 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar *duplicate_string(const char *s) {\n    char *dup = (char *)malloc(strlen(s) + 1);\n    if (dup) strcpy(dup, s);\n    return dup;\n}", "target_code": "#include <string>\nstd::string duplicate_string(const std::string &s) {\n    return std::string(s);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid fill_array(int *arr, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        arr[i] = i;\n    }\n}", "target_code": "#include <vector>\nvoid fill_array(std::vector<int> &arr) {\n    for (size_t i = 0; i < arr.size(); ++i) {\n        arr[i] = i;\n    }\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nint *create_array(size_t size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    if (arr) {\n        for (size_t i = 0; i < size; ++i) {\n            arr[i] = 0;\n        }\n    }\n    return arr;\n}", "target_code": "#include <vector>\nstd::vector<int> create_array(size_t size) {\n    return std::vector<int>(size, 0);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nvoid append_string(char **dest, const char *src) {\n    size_t len = strlen(*dest) + strlen(src) + 1;\n    *dest = realloc(*dest, len);\n    if (*dest) strcat(*dest, src);\n}", "target_code": "#include <string>\nvoid append_string(std::string &dest, const std::string &src) {\n    dest += src;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nchar *int_to_string(int num) {\n    char *str = (char *)malloc(12);\n    if (str) sprintf(str, \"%d\", num);\n    return str;\n}", "target_code": "#include <string>\n#include <to_string>\nstd::string int_to_string(int num) {\n    return std::to_string(num);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nchar *concatenate(const char *s1, const char *s2) {\n    size_t len = strlen(s1) + strlen(s2) + 1;\n    char *result = (char *)malloc(len);\n    if (result) {\n        strcpy(result, s1);\n        strcat(result, s2);\n    }\n    return result;\n}", "target_code": "#include <string>\nstd::string concatenate(const std::string &s1, const std::string &s2) {\n    return s1 + s2;\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nvoid reverse_string(char *s) {\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len / 2; ++i) {\n        char temp = s[i];\n        s[i] = s[len - i - 1];\n        s[len - i - 1] = temp;\n    }\n}", "target_code": "#include <string>\n#include <algorithm>\nvoid reverse_string(std::string &s) {\n    std::reverse(s.begin(), s.end());\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nchar *substring(const char *s, size_t start, size_t length) {\n    char *sub = (char *)malloc(length + 1);\n    if (sub) {\n        strncpy(sub, s + start, length);\n        sub[length] = '\\0';\n    }\n    return sub;\n}", "target_code": "#include <string>\nstd::string substring(const std::string &s, size_t start, size_t length) {\n    return s.substr(start, length);\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\nvoid free_matrix(int **matrix, size_t rows) {\n    for (size_t i = 0; i < rows; ++i) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}", "target_code": "#include <vector>\nvoid free_matrix(std::vector<std::vector<int>> &matrix) {\n    matrix.clear();\n}"}
{"source_language": "C", "target_language": "C++", "source_code": "#include <stdlib.h>\n#include <string.h>\nint compare_strings(const char *s1, const char *s2) {\n    return strcmp(s1, s2);\n}", "target_code": "#include <string>\nint compare_strings(const std::string &s1, const std::string &s2) {\n    return s1.compare(s2);\n}"}
